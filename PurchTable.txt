[Form]
public class PurchTable extends FormRun implements SysIFilterConsumerForm, PurchIPrepayControls, InventIAmbiguousItemLookupHost
{
    PurchTableForm                  purchTableForm;
    PurchTableType                  purchTableType;

    QueryBuildRange                 queryBuildRangeProj;
    QueryBuildRange                 queryBuildRangePurchLine;
    boolean                         isProjectForm;

    // Used for validateWrite and write to update tax groups on misc. charges and header2lines updates
    DialogButton                    copyTaxGroupToMarkupTrans;
    PurchTable2LineUpdatePrompt     purchTable2LineUpdatePrompt;

    InventDimCtrl_Frm_Mov           inventDimFormSetup;

    Object                          tmpPurchTableTaxTransForm;
    Object                          tmpPurchTableTaxWithholdTransForm;
    TaxWithholdParameters_IN        taxWithholdParameters;
    TaxParameters                   taxParameters;
    EximParameters_IN               eximParameters;
    TaxItemGroupHeading             taxItemGroupHeadingRev;
    boolean                         isPurchLine_INEnabled;

    boolean                         cashDiscOnInvoice; 

    Map                             interCompanySalesCache;
    RecId                           interCompanyIsPriceDiscSearchNeeded;

    PurchId                         purchIdTouched;

    boolean                         keepName; // When set to false Name is defaulted from category description.

    NumberSeqFormHandler            numberSeqFormHandler;
    //Asset qualifier related variables
    container                       assetRules;
    List                            assetQualifierList;
    Description                     selectedAssetQualifier;

    LogisticsLocationRecId          postalAddressLocation;

    InventDistinctProduct           productFromLookup;

    #AssetRules
    #resAppl
    #define.grpAssetQualifier('grpAssetQualifier')
    #define.editAssetQualifier('editAssetQualifier')

    BankLCImportFeatureChecker      bankLCImportFeatureChecker;
    BankLGFeatureChecker            bankLGFeatureChecker;
    boolean                         enableLCFeature;
    boolean                         enableLGFeature;

    boolean                         wasCalledFromVendorSearch;
    VendAccount                     vendAccountSearch;
    // Default create values
    ItemId                          defaultItemId;
    InventDim                       defaultInventDim;
    TransDate                       defaultDate;
    boolean                         zakatParameterEnabled;
    InventItemBarcode               itemBarcode;

    #resAppl

    boolean                         isRU;
    boolean                         isPurchTableEnabled_RU;
    // RU assets
    Map                             itemTypeCache;
    Map                             itemInventDimSetupCache;
    #ISOCountryRegionCodes

    boolean                         isPurchLine_WEnabled;
    boolean                         isPurchLine_IntrastatEnabled;
    boolean                         isPurchTableEnabled_W;
    SalesPurchOperationTypeController_BR salesPurchOperationTypeController_BR;
    boolean                         isPurchTableEnabled_BR;

    boolean                         advanceHoldersEnabled;

    PurchLine                       defaultPurchLine;

    PurchParameters                 purchParameters;
    EcoResShowDisplayProductNumber  showDisplayProductNumber;

    ImageListAppl_PurchTableForm  imageListAppl_PurchTableForm;

    private static readonly container DeliveryLineImageData = ImageReference::constructForSymbol(ImageReferenceSymbol::DeliveryLine).pack();
    private static readonly container OrderLineMultipleDeliveriesImageData = ImageReference::constructForSymbol(ImageReferenceSymbol::OrderLineMultipleDeliveries).pack();

    int                            purchTableRecVersion;

    boolean                         skipLinkActive;
    boolean                         linkActiveHeaderExecuted;

    boolean                         executePersonalization;
    QueryBuildRange                 queryRange;
    QueryBuildRange                 queryRangeQuantity;
    QueryBuildRange                 queryRangeOptionsRef;
    QueryBuildRange                 queryRangeGroup;
    InventQty                       salesLineMaxQty;
    boolean                         itemChanged;
    boolean                         inTextLine;
    boolean                         onInit;
    boolean                         fromQty;
    boolean                         fromLostControl;
    SalesLine                       salesLine;
    str                             filePath;

    boolean                         isWHSPurchLineEnabled;
    boolean                         isProductSearchLookupEnabled;

    // <GMY>
    boolean                             isSelfBilldInvoiceEnabled_MY;
    boolean                             isIsoMY;
    boolean                             isWrnPrintedMY;
    VendInvoiceJourLookupController_MY  vendInvoiceJourLookupController;
    // </GMY>

    FormObservableLink workflowIconObservableLink = new FormObservableLink();

    ReverseCharge_W                 reverseCharge;
    FormGroupControl                trackingDimesions;  //For backwards compatibility

    #define.taskClearFfilter(2840)
    PurchId							newButtonCurrentPurchId;
    int								taskId;
    ProjTmpPurchListTable           projTmpPurchList;

    private boolean keepWorkFlowButtonEnabled;
    private boolean projOperationsIntegrationFeatureIsEnabled;
    private boolean purchOrderEnabledForProjOps;
    protected boolean isTaxIntegrationEnabledForPurchase = Tax::isTaxIntegrationEnabledForBusinessProcess(TaxIntegrationBusinessProcess::Purchase);

    // Dialog button when header charge exists and override sales tax on header level is modified.
    protected DialogButton copyOverrideSalesTaxToHeaderMarkupTrans;

    // Dialog button when only line charge exists and override sales tax on line level is modified.
    protected DialogButton copyOverrideSalesTaxToLineMarkupTrans;

    /// <summary>
    /// This method is called from workflow drop dialog class <c>PurchTableWorkflowDropDialog</c>,
    /// to refresh workflow icon for lines after completing the action.
    /// </summary>
    public void refreshWorkflowIcon()
    {
        PurchLine_ds.reread();
        PurchLine_ds.refresh();
        workflowIconObservableLink.markChanged();
    }

    /// <summary>
    /// Determines if price must be reset when the batch id is modified.
    /// </summary>
    /// <returns>true if price must be reset; otherwise, false.</returns>
    protected boolean mustResetPriceOnInventBatchModified()
    {
        return !purchLine.MatchingAgreementLine;
    }

    /// <summary>
    /// This method should be called when the active purchase order/purchase order line is changed or
    /// a change is performed on the purchase order/purchase order line.
    /// </summary>
    private void updateWorkflowButtonForLineVisibility()
    {
        if (!PurchTableWorkflowDropDialog.visible())
        {
            return;
        }

        boolean isWorkflowVisibleForLine = PurchTableForm::isWorkflowVisibleForLine(purchLine);
        WorkflowIcon.visible(isWorkflowVisibleForLine);
        PurchLineWorkflowDropDialog.visible(isWorkflowVisibleForLine);
    }

    /// <summary>
    /// This method should be called when the active purchase order is changed.
    /// </summary>
    private void updateWorkflowButtonVisibility()
    {
        PurchTableWorkflowDropDialog.visible(purchTableForm.isWorkflowVisibleForHeader(PurchTable));
    }

    /// <summary>
    /// This method should be called when the active purchase order is changed or
    /// if we change vendor account since change management settings can be overriden by vendor.
    /// </summary>
    private void updateWorkflowButtonEnabled()
    {
        if (keepWorkFlowButtonEnabled)
        {
            PurchTableWorkflowDropDialog.enabled(true);
        }
        else
        {
            PurchTableWorkflowDropDialog.enabled(purchTable.ChangeRequestRequired);
        }
    }

    boolean allowEditAsset_RU()
    {
        boolean ret;

        if (itemTypeCache && purchLine.ItemId)
        {
            if (itemTypeCache.exists(purchLine.ItemId))
            {
                ret = itemTypeCache.lookup(purchLine.ItemId);
            }
            else
            {
                ret = InventTable::find(purchLine.ItemId).AssetGroupId_RU != '';
                itemTypeCache.insert(purchLine.ItemId, ret);
            }
        }

        return ret;
    }

    boolean allowEditLedgerAccount_RU()
    {
        boolean                     allowEdit = ! purchLine_W.MarkupCode_RU;

        if (allowEdit && itemInventDimSetupCache && purchLine.ItemId)
        {
            if (itemInventDimSetupCache.exists(purchLine.ItemId))
            {
                allowEdit = itemInventDimSetupCache.lookup(purchLine.ItemId);
            }
            else
            {
                allowEdit = !EcoResDimensionGroupSetup::isInventoryDimensionActiveForItem(purchLine.ItemId, fieldNum(InventDim, InventProfileId_RU));
                itemInventDimSetupCache.insert(purchLine.ItemId, allowEdit);
            }
        }

        return allowEdit;
    }

    /// <summary>
    /// If form was called by BackOrderLines list page, applies additional ranges to the form data source to show only sales orders that were selected in a list page.
    /// </summary>
    /// <remarks>
    /// If form called not from BackOrderLines list page no action is taken.
    /// </remarks>
    private void applyBackOrderLinesSelection()
    {
        Map             selectedPurchIds;
        MapEnumerator   en;

        if (!this.isCalledFromPurchLineBackOrderListPage() || !element.args().record())
        {
            return;
        }

        // Apply filter to show only Purch Orders selected in the list page...
        selectedPurchIds = PurchLineBackOrderListPageInteraction::getPurchIdsSelected(FormDataUtil::getFormDataSource(element.args().record()));
        if (selectedPurchIds)
        {
            // Dynalinks need to be cleared to avoid transfer only currently selected record from a list page.
            purchTable_ds.query().dataSourceTable(tableNum(PurchTable)).clearDynalinks();

            en = new MapEnumerator(selectedPurchIds);
            while (en.moveNext())
            {
                purchTable_ds.query().dataSourceTable(tableNum(PurchTable)).addRange(fieldNum(PurchTable,PurchId)).value(en.currentValue());
            }
        }
    }

    public void automaticTotalDiscount()
    {
        PurchTable localPurchTable;

        if (PurchParameters::find().AutomaticTotalDiscount && PurchTable.editAllowed(true))
        {
            for (localPurchTable = purchTable_ds.getFirst(true) ? purchTable_ds.getFirst(true) : purchTable_ds.cursor(); localPurchTable; localPurchTable = purchTable_ds.getNext())
            {
                localPurchTable.updateFinalDisc();
            }
            purchTable_ds.reread();
            purchTable_ds.refresh();
        }
    }

    public void budgetControlLine()
    {
        if (purchLine)
        {
            // Submit to source document processor for an on-demand budget check
            SourceDocumentProcessorFacade::submitOnDemandSourceDocLineImpl(purchLine);

            if (purchLine.isBudgetReservationLineReferenced())
            {
                // Checks the purchase order line balance against the referenced budget reservation line.
                BudgetReservation_PSN::checkBudgetReservationBalance(purchLine.BudgetReservationLine_PSN, purchTable.SourceDocumentHeader);
            }

            purchLine_ds.updateBudgetCheckResultDisplay();
        }
    }

    /// <summary>
    /// This method is called from workflow drop dialog class <c>PurchTableWorkflowDropDialog</c>,
    /// to determine whether the record is ready to be submitted to workflow.
    /// </summary>
    public boolean canSubmitToWorkflow()
    {
        return purchTable.canSubmitToWorkflow();
    }

    private void calculateTotalsSummary_PSN()
    {
        PurchTotalsSummary purchTotalsSummary = PurchTotalsSummary::findByPurchId(purchTable.PurchId, true);

        if (purchTotalsSummary && !purchTotalsSummary.IsValid)
        {
            PurchTotalsSummaryController::updateTotals(PurchTable, tableNum(PurchTotalsSummary), purchTotalsSummary);
        }
    }

    void  checkCreditNoteLine()
    {
        boolean  allowEdit;

        allowEdit = purchLine.allowEditReturnActionId();
        purchLine_ds.object(fieldNum(PurchLine, ReturnActionId)).allowEdit(allowEdit);
        purchLine_ds.object(fieldNum(PurchLine, ReturnActionId)).skip(!allowEdit);

        allowEdit = purchLine.allowEditScrap();
        purchLine_ds.object(fieldNum(PurchLine, Scrap)).allowEdit(allowEdit);
        purchLine_ds.object(fieldNum(PurchLine, Scrap)).skip(allowEdit);
    }

    void close()
    {
        xSysLastValue::saveLast(purchTableForm);

        // Current price references may need to be deleted.
        purchLine.salesPurchLineInterface().cleanUpPriceHistoryRef();

        super();
    }

    /// <summary>
    ///     Configs the BankDocument Controls.
    /// </summary>
    public void configBankDocumentControls()
    {
        boolean         enableDocumentType = false;
        PurchTableType  purchTableTypeLcoal;

        if (enableLCFeature
        ||  enableLGFeature)
        {
            purchTableTypeLcoal = purchTable.type();
            enableDocumentType  = purchTableTypeLcoal.mayBankDocumentTypeBeModified();
            element.configPaymentGroupControls();
            purchTable_DS.object(fieldNum(PurchTable, BankDocumentType)).allowEdit(enableDocumentType);
        }
    }

    /// <summary>
    /// Configs the payment group controls based on the value of field <c>BankDocumentType</c>
    /// </summary>
    private void configPaymentGroupControls()
    {
        boolean flag;

        flag = !purchTable.isMarkedForBankLC();

        purchTable_DS.object(fieldNum(PurchTable, Payment)).allowEdit(flag);
        purchTable_DS.object(fieldNum(PurchTable, FixedDueDate)).allowEdit(flag);
        purchTable_DS.object(fieldNum(PurchTable, PaymMode)).allowEdit(flag);
        purchTable_DS.object(fieldNum(PurchTable, PaymSpec)).allowEdit(flag);
        purchTable_DS.object(fieldNum(PurchTable, PaymentSched)).allowEdit(flag);
        purchTable_DS.object(fieldNum(PurchTable, CashDisc)).allowEdit(flag);
        purchTable_DS.object(fieldNum(PurchTable, CashDiscPercent)).allowEdit(flag);
        purchTable_DS.object(fieldNum(PurchTable, SettleVoucher)).allowEdit(flag);
    }

    public void createAgreementLink()
    {
        AgreementLine                           localAgreementLine;
        Args                                    args;
        FormRun                                 formRun;
        PurchTableForm_DlvScheduleSyncEnabled   purchTableFormDlvSchedule;
        PurchLine                               origPurchLine;

        args = new Args(formStr(AgreementLinePrompt));
        args.caller(element);
        args.record(purchLine);
        args.parm(int642str(purchTable.MatchingAgreement));
        formRun = classfactory.formRunClass(args);
        formRun.init();
        formRun.run();
        formRun.wait(true);
        localAgreementLine = args.record() as AgreementLine;

        if (localAgreementLine)
        {
            // Make a pre-associated copy of the current purchase line.
            origPurchLine = purchLine.data().orig();
            if (isPurchLine_INEnabled || isPurchLine_WEnabled)
            {
                origPurchLine.SysExtensionSerializerMap::copyExtensionTableData(purchLine, true);
            }

            ttsbegin;

            PurchTableForm::createAgreementLinkServer(purchLine, localAgreementLine);

            if (purchLine.LineDeliveryType == LineDeliveryType::OrderLineWithMultipleDeliveries)
            {
                purchTableFormDlvSchedule = purchTableForm as PurchTableForm_DlvScheduleSyncEnabled;
                purchTableFormDlvSchedule.parmOrderLineOrig(origPurchLine);
                if (purchTableFormDlvSchedule.deliveryLinesSync(purchLine, false))
                {
                    // Need to refresh delivery lines on grid.
                    purchLine_DS.executeQuery();
                }
            }

            ttscommit;
            purchLine_DS.research(true);

            this.enableAgreementButtons();
        }
    }

    /// <summary>
    /// Disable the consolidation invoice related controls.
    /// </summary>
    public void disableConsInvoiceControl_JP()
    {
        if (!VendConsInvoiceType_JP::isVendConsInvoiceEnabled())
        {
            purchTable_ds.object(fieldNum(PurchTable, ConsTarget_JP)).visible(false);
            consTarget_JP.visible(false);
        }
    }

    /// <summary>
    /// Method called upon closing of the <c>AccountingDistribution</c> form.
    /// </summary>
    public void distributionFormClosed()
    {
        purchTable_ds.reread();
        purchTable_ds.refresh();
        purchTable_ds.selectionChanged();
    }

    public Common docCursor()
    {
        Common docCursor;

        docCursor = super();

        if (docCursor.TableId == tableNum(InventDim))
        {
            docCursor = purchLine;
        }

        return docCursor;
    }

    public void doRefresh(boolean _lineRefreshNeeded = false)
    {
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            purchTable_ds.reread();
            purchTable_ds.refresh();

            if (_lineRefreshNeeded)
            {
                purchLine_ds.reread();
                purchLine_ds.refresh();
            }
            else
            {
                purchLine_ds.research();
            }
        }
    }

    public void editPurch(boolean _allowEdit, boolean _allowDelete = _allowEdit)
    {
        boolean allowEditEmplAccount_RU;

        purchTable_ds.allowEdit    (_allowEdit);
        purchTable_ds.allowDelete  (_allowEdit && _allowDelete);
        purchLine_ds.allowEdit     (_allowEdit);
        purchLine_ds.allowCreate   (_allowEdit);
        purchLine_ds.allowDelete   (_allowEdit && _allowDelete);

        if (advanceHoldersEnabled)
        {
            allowEditEmplAccount_RU = PaymTerm::isEmplAccountUsed_RU(purchTable.Payment);
            purchTable_W_ds.object(fieldNum(PurchTable_W, EmplAccount_RU)).allowEdit(allowEditEmplAccount_RU);
            purchTable_ds.object(fieldNum(PurchTable, CashDisc)).allowEdit(!allowEditEmplAccount_RU);
        }
    }

    public void findProductNumber()
    {
        if (showDisplayProductNumber)
        {
            inventDistinctProductExpanded.data(inventDistinctProductExpanded::findByInventDim(PurchLine.ItemId, inventDim));
            inventDistinctProductExpanded_ds.setCurrent();
        }
    }

    protected void enableAgreementButtons()
    {
        boolean agreementLineEnabled, createLinkEnabled, removeLinkEnabled;

        [agreementLineEnabled, createLinkEnabled, removeLinkEnabled] = purchTableForm.getEnabledAgreementButtons(purchTable, purchLine);

        agreementLine.enabled(agreementLineEnabled);
        createLink.enabled(createLinkEnabled);
        removeLink.enabled(removeLinkEnabled);

        buttonPurchAgreement.enabled(purchTable.MatchingAgreement);
    }

    boolean enableApplyDEPB_IN()
    {
        boolean ret;
        if (eximPurchLine_IN.EximIncentiveSchemeGroup)
        {
            ret = EximSetOffRulesTable_IN::checkUtilizedDEPBLicense(eximPurchLine_IN.EximIncentiveSchemeGroup);
        }
        return ret;
    }

    public void enableContractNumber_SA()
    {
        purchTable_ContractNum_SA.enabled(VendInfoZakat_SA::findByVendAccount(purchTable.OrderAccount).IsSubcontractor);
    }

    //
    // This method enables/disables depreciation start date control
    //
    void enableDepreciationStartDate(boolean _setDate = true)
    {
        AssetBook assetBook;

        assetBook = AssetBook::find(purchLine.AssetId, purchLine.AssetBookId);
        if (assetBook && (purchLine.AssetTransTypePurch == AssetTransTypePurch::Acquisition || purchLine.AssetTransTypePurch == AssetTransTypePurch::AcquisitionAdj) &&
        !assetBook.depreciationStarted() && assetBook.DepreciationConvention == AssetDepreciationConvention::None)
        {
            if (!depreciationStartDate.enabled())
            {
                depreciationStartDate.enabled(true);
                purchLine.setDepreciationStartDate(_setDate);
            }
        }
        else
        {
            purchLine.setDepreciationStartDate(true);
            depreciationStartDate.enabled(false);
        }
    }

    void enabledVATTaxAgent_RU()
    {
        vatTaxAgent_RU.allowEdit(! PurchLine::exist(purchTable.PurchId));
    }

    public void enableFieldsActive_IN()
    {
        boolean customsFieldsEnabled = purchTable_W.CustomsImportOrder_IN && TaxParameters::isCustomsEnable_IN();

        customsImportAssessableValue_IN.enabled(customsFieldsEnabled);
        purchLine_CustomsMaxRetailPrice_IN.visible(customsFieldsEnabled);
        purchLine_MaximumRetailPrice_IN.enabled(purchTable_W.CustomsImportOrder_IN == NoYes::No);

        PurchTable_ds.object(fieldNum(PurchTable, EXIMPorts_IN)).visible(customsFieldsEnabled);
        PurchLine_ds.object(fieldNum(PurchLine, EXIMPorts_IN)).visible(customsFieldsEnabled);
        PurchLine_ds.object(fieldNum(PurchLine, EximProductGroup_IN)).visible(customsFieldsEnabled);

        element.setEximFieldsAccess_IN();
    }

    void enableForeignTrade_RU()
    {
        purchLine_W_ds.object(fieldNum(PurchLine_W, InvoiceGTDId_RU)).enabled(
            purchLine_W_ds.object(fieldNum(PurchLine_W, CountryRegionName_RU)).enabled(
                purchLine.isCategoryBased()));
    }

    public void enableInvoice4PaymButtons()
    {
        purchTableForm.enableInvoice4PaymButton_RU(buttonUpdateInvoice4Paym_RU);
        buttonProformaInvoice4Paym_RU.enabled(buttonUpdateInvoice4Paym_RU.enabled());
    }

    public void enableLedgerDimensionDefaultAccount()
    {
        if (purchLine.canEditLedgerDimensionDefaultAccount())
        {
            purchLine_LedgerDimension.allowEdit(true
                && (! isRU || this.allowEditLedgerAccount_RU())
            );
        }
        else
        {
            if (purchLine.IsFinalized == NoYes::No && !PurchLine.isInvoiceMatched())
            {
                if (!isRU || purchLine_W.MarkupCode_RU)
                {
                    purchLine.LedgerDimension = 0;
                }
            }
            purchLine_LedgerDimension.allowEdit(false);
        }
    }

    public void enableLinePCActions()
    {
        pcExecute.enabled(purchTableForm.isPCExecuteButtonEnabled(purchLine));
    }

    public void enableMarkupCode_RU()
    {
        if (isRU)
        {
            purchLine_W_ds.object(fieldNum(PurchLine_W, MarkupCode_RU))
                .enabled(purchLine.isMarkupCodeEnabled_RU());
        }
    }

    public void enableProjSalesPrice()
    {
        boolean mustDefaultCostPriceAsSalesPrice;

        if (purchLine.ProjId)
        {
            // Missing item id implies either it has procurement category or details have not been filled in the line yet.
            if (!purchLine.ItemId && ProjParameters::find().DefaultCostPriceAsSalesPrice)
            {
                mustDefaultCostPriceAsSalesPrice = ProjCategory::isProjCategoryTypeItem(purchLine.ProjCategoryId);
            }

            if (ProjInvoiceTable::isSalesCurrencyLocked(ProjTable::find(purchLine.ProjId).ProjInvoiceProjId))
            {
                purchLine_ds.object(fieldNum(PurchLine, ProjSalesCurrencyId)).allowEdit(false);
                purchLine_ds.object(fieldNum(PurchLine, ProjSalesCurrencyId)).skip(true);
            }
            else
            {
                purchLine_ds.object(fieldNum(PurchLine, ProjSalesCurrencyId)).allowEdit(!mustDefaultCostPriceAsSalesPrice);
                purchLine_ds.object(fieldNum(PurchLine, ProjSalesCurrencyId)).skip(mustDefaultCostPriceAsSalesPrice);
            }

            purchLine_ds.object(fieldNum(PurchLine, ProjSalesPrice)).allowEdit(!mustDefaultCostPriceAsSalesPrice);
        }
    }

    void enableRetentionProject()
    {
        if (Project::Enabled())
        {
            if (purchLine.ProjId)
            {
                purchLine_PSARetainScheduleId.visible(true);
            }
            else
            {
                purchLine_PSARetainScheduleId.visible(false);
            }
        }
    }

    public void enableServiceFields_BR()
    {
        InventTable inventTable;
        boolean     enable;

        select firstonly ItemType from inventTable where inventTable.ItemId == purchLine.ItemId;

        enable = inventTable.ItemType == ItemType::Service;

        purchLine_ds.object(fieldNum(PurchLine, TaxServiceCode_BR)).allowEdit(enable);
    }

    public void enableTMSFields()
    {
        TMSTransportationTemplateId transTempId;
        TMSCarrierCode              carrierCode;
        TMSCarrierGroupCode         carrierGroupCode;
        TMSModeCode                 modeCode;
        boolean                     modeCodeEnabled;

        transTempId         = tmsPurchTable.TransportationTemplateId;
        carrierCode         = tmsPurchTable.CarrierCode;
        carrierGroupCode    = tmsPurchTable.CarrierGroupCode;
        modeCode            = tmsPurchTable.ModeCode;
        modeCodeEnabled     = tmsPurchTable.ModeCode != '' && tmsPurchTable.CarrierCode == '';

        tmsPurchTable_ds.object(fieldNum(TMSPurchTable, ModeCode)).allowEdit(!(carrierCode || transTempId || carrierGroupCode));
        tmsPurchTable_ds.object(fieldNum(TMSPurchTable, CarrierCode)).allowEdit(!(transTempId ||carrierGroupCode || modeCodeEnabled));
        tmsPurchTable_ds.object(fieldNum(TMSPurchTable, CarrierServiceCode)).allowEdit(!(transTempId || carrierGroupCode || modeCodeEnabled));
        tmsPurchTable_ds.object(fieldNum(TMSPurchTable, CarrierGroupCode)).allowEdit(!(transTempId || carrierCode || modeCode));
        tmsPurchTable_ds.object(fieldNum(TMSPurchTable, TransportationTemplateId)).allowEdit(!(carrierCode || carrierGroupCode || modeCode));
    }

    public void endDiscount()
    {
        purchTable.updateFinalDisc();
        purchtable_ds.refresh();
    }

    str filenameLookupFilename()
    {
        return '';
    }

    FilenameFilter filenameLookupFilter()
    {
        return ["@SYS54806",'*.*',"@SYS98008",'*.jpg', "@MCR33266",'*.gif', "@SYS98008",'*.jpg',"@MCR33267",'*.tif',"@MCR33268",'*.bmp'];
    }

    str filenameLookupInitialPath()
    {
        return filePath;
    }

    str filenameLookupTitle()
    {
        return '';
    }

    str filePathLookupTitle()
    {
        return '';
    }

    /// <summary>
    /// Fill Package Tree
    /// </summary>
    void fillPackageTree()
    {
        ImageRes    imageRes    = imageListAppl_PurchTableForm.image(#imageFolder);

        TreeItemIdx     purchIdx,packageIdx,packageLineIdx;
        PurchLine       purchLineSearch;
        RetailPackagePurch packagePurch;
        packageTree.deleteAll();

        purchIdx = SysFormTreeControl::addTreeItem(packageTree,
                                                   "@RET4405" + purchTable.PurchId,
                                                   FormTreeAdd::Root,
                                                   "@SYS15812",
                                                   imageRes,
                                                   true);

        while select packagePurch
        where packagePurch.PurchId == purchTable.PurchId
        {
            packageIdx = SysFormTreeControl::addTreeItem(packageTree,
                                                         "@RET4406" + packagePurch.PackageId + '  ' +
                                                         RetailPackageTable::find(packagePurch.PackageId).PackageName +
                                                         '  ' + "@RET4407" + num2str(packagePurch.Qty,2,2,0,0),
                                                         purchIdx,
                                                         packagePurch,
                                                         imageRes,
                                                         true);

            while select ItemId, PurchQty from purchLineSearch
            where purchLineSearch.PurchId           == purchTable.PurchId &&
                  purchLineSearch.RetailPackageId   == packagePurch.PackageId &&
                  purchLineSearch.rboPackageLineNum == packagePurch.LineNum
            {
                packageLineIdx = SysFormTreeControl::addTreeItem(packageTree,
                                                                 purchLineSearch.ItemId + '  ' +
                                                                 InventTable::find(purchLineSearch.ItemId).defaultProductName() +
                                                                 '  ' + "@RET4407" + num2str(purchLineSearch.PurchQty,2,2,0,0),
                                                                 packageIdx,
                                                                 "@SYS7407",
                                                                 imageRes,
                                                                 false);
            }
        }

        SysFormTreeControl::expandTree(packageTree, packageTree.getRoot(), 1);
    }

    /// <summary>
    /// BOE Journal form close event handler
    /// </summary>
    public void formBOEJournalClosed_IN()
    {
        purchTable_ds.research(true);
    }

    private boolean  formControlIsDataBound(Object  _formControl)
    {
        FormControlType formControlType = SysFormRun::controlType(classIdGet(_formControl));
        boolean         ret             = false;

        if (formControlType == FormControlType::CheckBox
        ||  formControlType == FormControlType::ComboBox
        ||  formControlType == FormControlType::ListBox
        ||  formControlType == FormControlType::RadioButton
        ||  formControlType == FormControlType::String
        ||  formControlType == FormControlType::StaticText
        ||  formControlType == FormControlType::Date
        ||  formControlType == FormControlType::Integer
        ||  formControlType == FormControlType::Real
        ||  formControlType == FormControlType::Time
        ||  formControlType == FormControlType::Image
        ||  formControlType == FormControlType::Grid
        ||  formControlType == FormControlType::TabPage)
        {
            ret = true;
        }

        return ret;
    }

    void handleSecurity(FormDataSource _fds, boolean _hasAccess)
    {
        if (_fds && !_fds.allowCheck() && !_hasAccess)
        {
            _fds.query().dataSourceNo(1).enabled(false);
        }
    }

    boolean hasTableAccess(TableId _tableId, AccessType _neededAccessLevel = AccessType::View)
    {
        DictTable dictTable = new DictTable(_tableId);

        if (dictTable)
        {
            return dictTable.rights() >= _neededAccessLevel;
        }
        return false;
    }

    void hideQualityManagement()
    {
        status_qualityOrderStatusDisplay.visible(false);
        statusLine_qualityOrderStatusDisplay.visible(false);
        purchTable_qualityOrderStatusDisplay.visible(false);
        purchLine_qualityOrderStatusDisplay.visible(false);

        lineStripProductQualitySeparator.visible(false);
        inventNonConformanceTableTableHeader.visible(false);
        inventQualityOrderTableTableHeader.visible(false);
        inventNonConformanceTableLine.visible(false);
        inventQualityOrderTableLine.visible(false);
    }

    public void registerDatasourceOnQueryingEvent()
    {
        PurchTable_DS.OnQueryExecuting += eventhandler(this.parmFilterFormQueryEventHandler().applyFilter);
    }

    public void  init()
    {
        Object              caller;
        boolean             wasCalledFromPurchLineBackOrderListPage = this.isCalledFromPurchLineBackOrderListPage();
        boolean             isFrenchRegulatoryEnabled = PublicSectorUtils::isFrenchRegulatoryEnabled();
        xArgs               args = element.args();
        
		isProductSearchLookupEnabled = EcoResProductSearchLookup::isProductSearchLookupEnabled();

        imageListAppl_PurchTableForm = ImageListAppl_PurchTableForm::construct();

        #ISOCountryRegionCodes

        isPurchLine_INEnabled        = PurchLine_IN::isExtensionEnabled();
        isPurchLine_WEnabled         = PurchLine_W::isExtensionEnabled();
        isPurchLine_IntrastatEnabled = SysExtensionSerializerExtensionMap::isExtensionEnabled(tableNum(PurchLine_Intrastat));
        isPurchTableEnabled_W   = PurchTable_W::isExtensionEnabled();
        isPurchTableEnabled_BR   = PurchTable_BR::isExtensionEnabled();
        isPurchTableEnabled_RU   = PurchTable_RU::isExtensionEnabled();

        // <GMY>
        isSelfBilldInvoiceEnabled_MY        = TaxGSTFeatureChecker_MY::isSelfBilledInvoiceEnabled();
        isIsoMY                             = TaxGSTFeatureChecker_MY::isCountryRegionMY();
        if (isIsoMY)
        {
            vendInvoiceJourLookupController = VendInvoiceJourLookupController_MY::construct();
            isWrnPrintedMY                  = false;
        }
        // </GMY>

        if (args)
        {
            args.copyCallerQuery(CopyCallerQuery::No);
            if (!args.record() && args.lookupRecord())
            {
                //Called from EP
                args.record(args.lookupRecord());
                args.lookupRecord(null);
            }
        }

        zakatParameterEnabled = LedgerParameters::find().IsZakatEnabled_SA;
        // </GSA
        this.initCalledFromVendorSearch();
        super();
        
        trackingDimesions = TrackingDimensions;

        if (isConfigurationkeyEnabled(configurationKeyNum(RAsset)))
        {
            itemTypeCache = new Map(Types::String, Types::Enum);
        }

        isRU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);

        if (isRU)
        {
            itemInventDimSetupCache = new Map(Types::String, Types::Enum);
        }

        advanceHoldersEnabled = EmplParameters_RU::enableAdvanceHolders();

        // Initialization specifically for projects
        // Only show purchase orders associated to projects if form is called from the project main menu
        if (args.parmEnumType() == enumNum(PurchTableFormId) && args.parmEnum() == PurchTableFormId::Project)
        {
            if (!args.record()) // called from menu
            {
                purchTable_ds.query().dataSourceTable(tableNum(PurchTable)).addRange(fieldNum(PurchTable, ProjId)).value(SysQuery::valueNotEmptyString());
            }
            
            isProjectForm = true;
        }

        // Initialization for call from PuchLineBackOrderListForm
        if (wasCalledFromPurchLineBackOrderListPage)
        {
            this.applyBackOrderLinesSelection();
            purchTableForm = PurchTableForm::construct(PurchTableFormId::None, args.record());
        }
        else
        {
            purchTableForm = PurchTableForm::constructFromArgs(args);
        }

        purchTableForm.initializeVendorQuery(PurchTable_ds.query());

        purchTableForm.parmPurchTableFormRun(element);
        purchTableForm.parmDimensionEntryControlHeader(DimensionEntryControlHeader);
        purchParameters = PurchParameters::find();
        purchTableForm.parmChangeManagementEnabled(purchParameters.ChangeRequestEnabled);

        TaxVATNumTable::enableLookupVATNum(vatNum);

        element.updateDesign(InventDimFormDesignUpdate::Init);

        purchTable_ds.object(fieldNum(PurchTable, PurchaseType)).allowEdit(purchTableForm.editPurchaseType());
        purchTable_ds.query(purchTableForm.queryPurchTable(purchTable_ds.query()));
        purchLine_ds.query(purchTableForm.queryPurchLine(purchLine_ds.query()));

        groupNotificationToTheCentralBank.visible(SysCountryRegionCode::isLegalEntityInCountryRegion([#isoNO]));

        if (!TaxParameters::find().CashDiscOnInvoice)
        {
            purchTable_ds.object(fieldNum(PurchTable, CashDiscPercent)).allowEdit(false);
        }

        interCompanySalesCache = new Map(typeName2Type(extendedTypeStr(RecId)), Types::Container);

        if (!InventParameters::find().UseQualityManagement)
        {
            element.hideQualityManagement();
        }

        // 1099 Tab should only be visible in the US
        tabLineTax1099.visible(SysCountryRegionCode::isLegalEntityInCountryRegion([#isoUS]));

        //CFM payment requests
        if (element.args().dataset() == tableNum(CFMPaymentRequestTable))
        {
            CFMPaymentRequestTable  paymentRequest;

            paymentRequest = element.args().record();
            purchTable_ds.query().dataSourceTable(tableNum(PurchTable)).addRange(fieldNum(PurchTable, RecId)).value(queryValue(paymentRequest.HeaderRefRecId));
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
	        taxWithholdParameters   = TaxWithholdParameters_IN::find();
            taxParameters           = TaxParameters::find();
            eximParameters          = EximParameters_IN::find();

            element.setVisible_IN();
            element.updateDesign_IN();
	        element.setTaxWithholdVisible_IN();
        }

        if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            TaxDocumentLauncher.visible(true);
            TaxTransSource.visible(false);
            LineSalesTax.visible(false);
            LineTaxTransSource.visible(false);
            PurchTable_TaxGroup.visible(false);
            Projectsalestax.visible(false);
            Projectsalestax_ProjTaxGroupId.visible(false);
            Projectsalestax_ProjTaxItemGroupId.visible(false);
        }

        // <GTE>
        if (TaxIntegrationUtils::isTaxInformationEnabled())
        {
            TransTaxInformation.visible(true);
        }
        // </GTE>

        if (TaxIntegrationUtils::isMultipleTaxIdEnabledForBusinessProcess(TaxIntegrationBusinessProcess::Purchase))
        {
            PurchTable_ds.object(fieldNum(PurchTable, NumberSequenceGroup)).enabled(false);
        }

        if (LedgerParameters::find().IsEncumbranceProcessEnabled == NoYes::No)
        {
            buttonSubLedgerJournalLines.visible(false);
            encumbranceSummary.visible(false);
            ledgerTransact.visible(false);
            RetailUtils::HidePart(element, identifierStr(PurchEncumbranceSummaryPart));
        }
        else
        {
            buttonSubLedgerJournalLines.visible(true);
            encumbranceSummary.visible(true);
            ledgerTransact.visible(true);
        }

        bankLGFeatureChecker    = BankLGFeatureChecker::construct();
        enableLGFeature         = bankLGFeatureChecker.checkFeatureEnabled();
        bankLGRequestForm.visible(enableLGFeature);

        bankLCImportFeatureChecker = BankLCImportFeatureChecker::construct();
        enableLCFeature            = bankLCImportFeatureChecker.checkFeatureEnabled();
        purchTable_DS.object(fieldNum(PurchTable, BankDocumentType)).visible(enableLCFeature || enableLGFeature);
        buttonCreateBankLCImport.visible(enableLCFeature);

        zakat_SA.visible(zakatParameterEnabled);

        headerForeignTrade_ListCode.visible(IntrastatParameters::find().euSalesListTransferPurchases);

        if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
        {
            packageTree.setImagelist(imageListAppl_PurchTableForm.imageList());
            packageTree.setStateImagelist(imageListAppl_PurchTableForm.imageList());
        }

        // Needed to check validity of address
        logisticsPostalAddressHeader_ds.addFieldToSelectionList(fieldNum(LogisticsPostalAddress, ValidFrom));
        logisticsPostalAddressHeader_ds.addFieldToSelectionList(fieldNum(LogisticsPostalAddress, ValidTo));
        logisticsPostalAddressHeader_ds.addFieldToSelectionList(fieldNum(LogisticsPostalAddress, CountryRegionId));
        logisticsPostalAddressLine_ds.addFieldToSelectionList(fieldNum(LogisticsPostalAddress, ValidFrom));
        logisticsPostalAddressLine_ds.addFieldToSelectionList(fieldNum(LogisticsPostalAddress, ValidTo));
        logisticsPostalAddressLine_ds.addFieldToSelectionList(fieldNum(LogisticsPostalAddress, CountryRegionId));

        //if the Purchase Requisition control is enabled, then disable it if the commitments feature is enabled.
        if (purchReq_PurchReqId.enabled())
        {
            purchReq_PurchReqId.enabled(!isFrenchRegulatoryEnabled);
        }

        //Make the commitments fields mandatory and visible if the feature is enabled, otherwise hide them and make them non-mandatory.
        purchCommitmentLineLookup_PSN.visible(isFrenchRegulatoryEnabled);
        purchCommitmentLineLookup_PSN.mandatory(isFrenchRegulatoryEnabled);
        purchCommitmentLineLookup2_PSN.visible(isFrenchRegulatoryEnabled);
        purchCommitmentLineLookup2_PSN.mandatory(isFrenchRegulatoryEnabled);

        commitment_PSN.visible(isFrenchRegulatoryEnabled);

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoJP]))
        {
            element.disableConsInvoiceControl_JP();
        }

        if (BrazilParameters::isEnabled())
        {
            salesPurchOperationTypeController_BR = new SalesPurchOperationTypeController_BR(this.name());
            purchTable_BR_DS.object(fieldNum(PurchTable_BR, cfpsId_BR)).visible(BrazilParameters::isCFPSEnabled_BR());
        }

        if (VendAdvanceInvoice::isDeactivated())
        {
            prepayPurchTableHeading.visible(false);
            buttonRemovePurchPrepayTable.visible(false);
            buttonUpdatePrepayInvoice.visible(false);
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ]))
        {
            purchTable_DS.object(fieldNum(PurchTable, StatProcId)).visible(false);
            purchLine_DS.object( fieldNum(PurchLine,  StatProcId)).visible(false);
        }

        if (args.parmEnumType() == enumNum(FormOpenMode))
        {
            caller = args.caller();
            if (caller && caller is FormRun)
            {
                skipLinkActive = args.parmEnum() == FormOpenMode::ForNew;
            }
        }

        MCRPriceHistory.visible(purchParameters.MCREnablePriceDetails);
        
        BudgetReservation_PSN.visible(PublicSectorUtils::isBudgetReservationEnabled());

        this.initStartPosition(args);

        workflowIconObservableLink = new FormObservableLink();

        reverseCharge = ReverseCharge_W::newParameters(purchTable, purchLine);

        BillToAddressLookup.visible(purchParameters.EnableBillToAddress);
        LogisticsBillToAdress.visible(purchParameters.EnableBillToAddress);

        projOperationsIntegrationFeatureIsEnabled = ProjProjectOperationsIntegrationFeatureHelper::isFeatureEnabled();
        
        if (projOperationsIntegrationFeatureIsEnabled)
        {
            purchOrderEnabledForProjOps = ProjProjectOperationsIntegrationFeatureHelper::isPurchaseOrderEnabledWithProjOps(projOperationsIntegrationFeatureIsEnabled);

            PurchTable_ds.object(fieldNum(PurchTable, ProjId)).visible(purchOrderEnabledForProjOps);
            PurchLine_ds.object(fieldNum(PurchLine, ProjId)).visible(purchOrderEnabledForProjOps);
            PurchLine_ds.object(fieldNum(PurchLine, ActivityNumber)).visible(purchOrderEnabledForProjOps);
            PurchLine_ds.object(fieldNum(PurchLine, ProjCategoryId)).visible(purchOrderEnabledForProjOps);
            PurchLine_ds.object(fieldNum(PurchLine, ProjLinePropertyId)).visible(purchOrderEnabledForProjOps);
            PurchLine_ds.object(fieldNum(PurchLine, ProjWorker)).visible(purchOrderEnabledForProjOps);
            
            // In ProjOps integration, Project sales related fields on purchase order lines should be hidden: Sales currency, Sales unit, Sales price
            PurchLine_ds.object(fieldNum(PurchLine, ProjSalesCurrencyId)).visible(!purchOrderEnabledForProjOps);
            PurchLine_ds.object(fieldNum(PurchLine, ProjSalesUnitId)).visible(!purchOrderEnabledForProjOps);
            PurchLine_ds.object(fieldNum(PurchLine, ProjSalesPrice)).visible(!purchOrderEnabledForProjOps);

            PurchLine_ds.object(fieldNum(PurchLine, ProjTaxGroupId)).visible(purchOrderEnabledForProjOps);
            PurchLine_ds.object(fieldNum(PurchLine, ProjTaxItemGroupId)).visible(purchOrderEnabledForProjOps);
            PurchLine_ds.object(fieldNum(PurchLine, ProjTransId)).visible(purchOrderEnabledForProjOps);
            ProjectIdentification_ItemId.visible(purchOrderEnabledForProjOps);
            ProjectCostPrice_PurchQty.visible(purchOrderEnabledForProjOps);
            ProjectCostPrice_PurchPrice.visible(purchOrderEnabledForProjOps);
            ProjectCostPrice_LineAmount.visible(purchOrderEnabledForProjOps);
        }

        if (isTaxIntegrationEnabledForPurchase)
        {
            PurchTable_ds.object(fieldNum(PurchTable, OverrideSalesTax)).visible(true);
            PurchLine_ds.object(fieldNum(PurchLine, OverrideSalesTax)).visible(true);
        }
        
        this.setEditIntercompanyOrderAllowed(false);

        TradeFormsInstrumentationActivities::instrumentTradeFormQueryFilters(formStr(PurchTable), purchTable_ds.query());
    }

    private void initCalledFromVendorSearch()
    {
        Object                      myCaller;
        VendTmpCurrentVendorResult  vendTmpCurrentVendorResult;

        wasCalledFromVendorSearch = false;

        if (element.args())
        {
            myCaller = element.args().caller();
            if (myCaller && myCaller is FormRun)
            {
                if (element.args().caller().name() == formStr(VendSearchResults))
                {
                    wasCalledFromVendorSearch   = true;
                    vendTmpCurrentVendorResult  = element.args().record();
                    vendAccountSearch           = vendTmpCurrentVendorResult.VendorAccountNum;
                }
            }
        }
    }

    RecId interCompanyIsPriceDiscSearchNeeded()
    {
        return interCompanyIsPriceDiscSearchNeeded;
    }

    void interCompanyRefreshCache()
    {
        interCompanySalesCache = new Map(typeName2Type(extendedTypeStr(RecId)), Types::Container);
    }

    Object inventDimSetupObject()
    {
        return inventDimFormSetup;
    }

    public void invoiceMatchingAccess()
    {
        invoiceMatching.visible(VendParameters::find().editUseInvoiceMatching());
    }

    private boolean isCalledFromPurchLineBackOrderListPage()
    {
        return TradeFormHelper::isCalledFromForm(element.args(), formStr(PurchLineBackOrderListPage));
    }

    private void initStartPosition(xArgs args)
    {
        if (args)
        {
            switch (args.menuItemName())
            {
                case menuitemdisplaystr(PurchOrderApproved):
                case menuitemdisplaystr(PurchOrderAssignedToMe):
                case menuitemdisplaystr(PurchOrderInDraft):
                case menuitemdisplaystr(PurchOrderInExternalReview):
                case menuitemdisplaystr(PurchOrderInReview):
                    PurchTable_DS.startPosition(0);
                    break;
            }
        }
    }

    public void lineTaxTransSource()
    {
        element.automaticTotalDiscount();

        PurchTotals::showTaxLine(menuitemDisplayStr(TaxTmpWorkPurchOrder), purchTable,purchLine);
    }

    public void markupTransFormClosed()
    {
        int pos;

        // Update budget check result for changes from edit
        purchLine_ds.updateBudgetCheckResultDisplay();

        if (isPurchLine_INEnabled)
        {
            purchLine_IN_ds.reread();
            purchLine_IN_ds.refresh();
        }
        if (isPurchLine_WEnabled)
        {
            purchLine_W_ds.reread();
            purchLine_W_ds.refresh();
        }

        if (purchTable.MCRDropShipment)
        {
            pos = purchLine_ds.getPosition();
            purchLine_ds.research();
            purchLine_ds.setPosition(pos);
        }

        purchTable_ds.reread();
        purchTable_ds.refresh();
        purchTable_ds.selectionChanged();
    }

    /// <summary>
    /// Calculates multi line discounts.
    /// </summary>
    public void multiLineDiscount()
    {
        element.automaticTotalDiscount();

        if (purchTable.updateMultiLineDisc())
        {
            purchLine_ds.research(true);
        }
    }

    /// <summary>
    /// Package Allow Edit
    /// </summary>
    /// <param name="allowEdit">
    /// True to allow Edit, False otherwise
    /// </param>
    void packageAllowEdit(boolean allowEdit)
    {
        purchLine_ds.object(fieldNum(PurchLine, ItemId)).allowEdit(allowEdit && purchLine_ds.object(fieldNum(PurchLine, ItemId)).allowEdit());
        purchLine_ds.object(fieldNum(PurchLine, VariantId)).allowEdit(allowEdit && purchLine.editProductDimensionsAllowed());
        if (!PdsGlobal::pdsIsCWItem(purchLine.ItemId))
        {
            purchLine_ds.object(fieldNum(PurchLine, PurchQty)).allowEdit(allowEdit && purchLine_ds.object(fieldNum(PurchLine, PurchQty)).allowEdit());
        }
        purchLine_ds.object(fieldNum(PurchLine, PurchUnit)).allowEdit(allowEdit && purchLine_ds.object(fieldNum(PurchLine, PurchUnit)).allowEdit());
        inventDim_ds.allowEdit(allowEdit && inventDim_ds.allowEdit());
        retailPackagePurch_ds.object(fieldNum(RetailPackagePurch, Qty)).allowEdit(allowEdit);
    }

    public LogisticsLocationRecId parmPostalAddressLocation(LogisticsLocationRecId _postalAddressLocation = 0)
    {
        if (!_postalAddressLocation)
        {
            // Set location by active datasource
            if (element.dataSource().name() == purchLine_ds.name())
            {
                _postalAddressLocation = purchLine.deliveryLocation();
            }
            else
            {
                _postalAddressLocation = purchTable.deliveryLocation();
            }
        }

        postalAddressLocation = _postalAddressLocation;
        return postalAddressLocation;
    }

    void pcConfigureLine()
    {
        purchLine_DS.write();

        if (PCRuntimeLibrary::isConstraintBasedConfigurable(purchLine.ItemId))
        {
            PCExecuteVariantConfiguration::execute(purchLine, purchLine.ItemId, inventDim.ConfigId);
        }

        purchline_ds.research(true);
    }

    /// <summary>
    /// Performs lookup for <c>VendInvoiceJour</c> table.
    /// </summary>
    /// <param name="_control">
    /// The control to require lookup.
    /// </param>
    /// <param name="_vendAccount">
    /// The account of vendor.
    /// </param>
    public void performVendInvoiceJourLookup_MY(
        FormStringControl   _control,
        VendAccount         _vendAccount)
    {
        vendInvoiceJourLookupController.parmVendAccount(_vendAccount);
        vendInvoiceJourLookupController.performLookup(_control);
    }

    /// <summary>
    /// Launch the print management setup form.
    /// </summary>
    public void PrintManagement()
    {
        PrintMgmtSetupContext setupContext = new PrintMgmtSetupContext();

        setupContext.addHierarchyContext(PrintMgmtHierarchyType::Purch, PrintMgmtNodeType::PurchTable);
        setupContext.parmCaller(element);
        setupContext.parmReferencedTableBuffer(purchTable_ds.cursor());
        setupContext.parmCountryRegionId(LogisticsPostalAddress::findRecId(purchTable.DeliveryPostalAddress).CountryRegionId);
        PrintMgmt::launchSetup(setupContext);
    }

    void purchLineResearch()
    {
        purchLine_ds.research();
    }

    PurchTable purchTable()
    {
        return purchTable;
    }

    private void refreshFormPart(str partName)
    {
        int i;
        FormPartControl partControl;
        PartList partList;

        partList = new PartList(this);

        // For each part in the form
        for (i = 1; i <= partList.partCount(); i++)
        {
            partControl = partList.getPartControlById(i);

            if (partControl && partControl.formName() == partName)
            {
                partControl.refresh();
                break;
            }
        }
    }

    private void refreshTotalsFormPart_PSN()
    {
        PurchTotalsSummary purchTotalsSummary = PurchTotalsSummary::findByPurchId(purchTable.PurchId);
        if (purchTotalsSummary && purchTotalsSummary.IsValid)
        {
            element.refreshFormPart(formStr(PurchTotalsSummaryPart));
        }
    }

    public void refreshPurchLine_IN()
    {
        purchLine_ds.reread();
        purchLine_ds.refresh();
        purchLine_IN_ds.reread();
        purchLine_IN_ds.refresh();
        purchLine_W_ds.refresh();
    }

    internal void refreshLinesAfterChargeAllocation()
    {
        PurchLine_ds.research(true);
    }

    public void removeAgreementLink()
    {
        PurchTableForm_DlvScheduleSyncEnabled purchTableFormDlvSchedule;
        PurchLine       origPurchLine = purchLine.orig().data();
        boolean doNotAsk;

        if (purchLine.unLinkAgreementLinePrompt())
        {
            // When the user manually removes a link to an agreement line, then also prevent automatic (re)linking of agreement lines
            purchLine.AgreementSkipAutoLink = NoYes::Yes;

            if (purchLine.LineDeliveryType == LineDeliveryType::OrderLineWithMultipleDeliveries)
            {
                purchTableFormDlvSchedule = purchTableForm as PurchTableForm_DlvScheduleSyncEnabled;
                purchTableFormDlvSchedule.parmOrderLineOrig(origPurchLine);
                if (purchTableFormDlvSchedule.deliveryLinesSync(purchLine, doNotAsk))
                {
                    // Need to update delivery lines on grid.
                    purchLine_DS.executeQuery();
                }
            }
            purchLine_DS.research(true);
            this.enableAgreementButtons();
        }
    }

    /// <summary>
    ///     Resets the asset containers to empty.
    /// </summary>
    public void resetAssetContainers()
    {
        assetRules              = conNull();
        assetQualifierList      = new List(Types::Container);
        selectedAssetQualifier  = '';
    }

    public void run()
    {
        super();

        if (RetailSMB::IsRetailSMBEnabled())
        {
            RetailUtils::HidePart(element, identifierStr(PurchEncumbranceSummaryPart));
        }
    }

    public int task(int _taskId)
    {
        #Task
        int ret;
        
        newButtonCurrentPurchId = ((taskId == #taskNew) && (_taskId == #taskClearFfilter)) ? purchTable.PurchId: null;
        taskId = _taskId;

        ret = super(_taskId);

        return ret;
    }

    public void setAccountingDistributionView(AccountingDistributionView    _accountingDistributionView)
    {
        purchTableForm.subscribeToAccDistViewEvents(_accountingDistributionView);
    }

    /// <summary>
    /// Sets the 1099G fields to be editable if G-2 is selected
    /// </summary>
    /// <remarks>
    /// When G-2 is selected, the fields are set as editable, when it is not selected they are uneditable
    /// </remarks>
    void setAllowEdit1099GFields()
    {
        boolean     canEdit;
        boolean     canEditTax1099;

        canEditTax1099 = purchLine.allowEditTax1099();

        canEdit = purchTableForm.can1099GFieldsBeEdited(purchLine) && canEditTax1099;

        tax1099GFields.allowEdit(canEdit);

        canEdit = purchTableForm.can1099G1FieldsBeEdited(purchLine) && canEditTax1099;

        tax1099G1Fields.allowEdit(canEdit);
    }

    /// <summary>
    /// Sets the editable state of S-2 fields based on the value of S-2
    /// </summary>
    /// <remarks>
    /// When S-2 is selected the fields are editable, when it is not selected they are not editable.
    /// </remarks>
    void setAllowEdit1099SFields()
    {
        boolean canEdit;

        canEdit = purchTableForm.can1099SFieldsBeEdited(purchLine) && purchLine.allowEditTax1099();

        tax1099SFields.allowEdit(canEdit);
    }

    /// <summary>
    /// Sets the editable status of tax1099Amount and tax1099StateAmount based upon the invoice status
    /// </summary>
    /// <remarks>
    /// If the record is marked as Invoiced then the fields are not editable.
    /// </remarks>
    void setAllowEditTax1099()
    {
        boolean canEdit;
        Tax1099Fields tax1099Fields;

        canEdit = purchLine.allowEditTax1099();

        purchLine_ds.object(fieldNum(PurchLine, Tax1099Fields)).allowEdit(canEdit);
        purchLine_ds.object(fieldNum(PurchLine, Tax1099Amount)).allowEdit(canEdit);
        purchLine_ds.object(fieldNum(PurchLine, Tax1099State)).allowEdit(canEdit);
        purchLine_ds.object(fieldNum(PurchLine, Tax1099StateAmount)).allowEdit(canEdit);

        //Amounts on setup tab are not editable for 1099-S
        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            tax1099Fields = Tax1099Fields::find(purchLine.Tax1099Fields);

            if (canEdit && (tax1099Fields.Tax1099Box == Tax1099S::grossProceeds().tax1099Box))
            {
                line1099Fields_Tax1099Amount.allowEdit(false);
                line1099Fields_Tax1099StateAmount.allowEdit(false);
            }
            else
            {
                line1099Fields_Tax1099Amount.allowEdit(true);
                line1099Fields_Tax1099StateAmount.allowEdit(true);
            }
        }
    }

    private void setEditIntercompanyOrderAllowed(boolean _allowEdit)
    {
        PurchTable_ds.object(fieldNum(PurchTable, InterCompanyOrder)).allowEdit(_allowEdit);
    }

    /// <summary>
    /// Enables or disables editability of the commitment line field.
    /// </summary>
    /// <param name="_allowEdit">
    /// Whether to enable editing.
    /// </param>
    void setEditCommitmentLineAllowed(boolean _allowEdit)
    {
        if (PublicSectorUtils::isFrenchRegulatoryEnabled())
        {
            purchLine_ds.object(fieldNum(PurchLine, PurchCommitmentLine_PSN)).allowEdit(_allowEdit);
        }
    }

    /// <summary>
    /// Enables or disables editing of the item and procurement category fields.
    /// </summary>
    /// <param name="allowEdit">
    /// Whether to enable editing.
    /// </param>
    void setEditItemCategoryAllowed(boolean allowEdit)
    {
        purchLine_ds.object(fieldNum(PurchLine, ItemId)).allowEdit(allowEdit);

        if (BrazilParameters::isEnabled())
        {
            purchLine_ds.object(fieldNum(PurchLine, ProcurementCategory)).allowEdit(false);
        }
        else
        {
            purchLine_ds.object(fieldNum(PurchLine, ProcurementCategory)).allowEdit(allowEdit);
        }
    }

    /// <summary>
    /// Enables or disables editing of the line number field.
    /// </summary>
    /// <param name="_allowEdit">
    /// A bolean specifying whether editing is allowed.
    /// </param>
    void setEditLinenumberAllowed(boolean _allowEdit)
    {
        purchLine_ds.object(fieldNum(PurchLine, LineNumber)).allowEdit(_allowEdit);
    }

    public void setEximFieldsAccess_IN()
    {
        boolean           isVisible;
        boolean           isInvoice;

        isVisible = (taxParameters.EximIncentiveSchemes_IN && purchTable_W.CustomsImportOrder_IN);
        isInvoice = (purchLine.PurchQty > 0);

        incentiveSchemeGroup_IN.visible(isVisible);

        incentiveSchemeGroup_IN.enabled(isInvoice);
    }

    public void setIsPwpField()
    {
        if (!Project::Enabled())
        {
            return;
        }

        if (ProjLineProperty::find(purchline.ProjLinePropertyId).ToBeInvoiced)
        {
            purchline_ds.object(fieldNum(PurchLine, IsPwp)).allowEdit(true);
        }
        else
        {
            purchline_ds.object(fieldNum(PurchLine, IsPwp)).allowEdit(false);
        }
    }

    /// <summary>
    /// Sets default values to be used when creating an order line.
    /// </summary>
    public void setLineDefaults()
    {
        Object      callerFormObject;

        // Make sure this was called via a form.
        if (element.args().caller() && element.args().caller() is FormRun)
        {
            if (element.args().caller().name() == formStr(ReqSupplyDemandSchedule))
            {
                callerFormObject = element.args().caller();

                if (formHasMethod(callerFormObject, identifierStr(parmItemId)))
                {
                    defaultItemId = callerFormObject.parmItemId();
                }

                if (formHasMethod(callerFormObject, identifierStr(defaultInventDim)))
                {
                    defaultInventDim = callerFormObject.defaultInventDim();
                }

                if (formHasMethod(callerFormObject, identifierStr(getFromDate)))
                {
                    defaultDate = callerFormObject.getFromDate();
                }
            }
        }
    }

    void setTaxWithholdEnabled_IN()
    {
        // Implement by extension.
    }

    void setTaxWithholdVisible_IN()
    {
        // Implement by extension.
    }

    public void setTitleText()
    {
        if (PurchTableSetOrderAccountToTitleTextFlight::instance().isEnabled())
        {
            headerTitle.text(strFmt('%1 : %2 - %3', purchTable.PurchId,
                                                purchTable.OrderAccount,
                                                purchTable.vendTable_OrderAccount().name()));
        }
        else
        {
            headerTitle.text(strFmt('%1 : %2 - %3', purchTable.PurchId,
                                                purchTable.InvoiceAccount,
                                                purchTable.vendTable_InvoiceAccount().name()));
        }
    }

    /// <summary>
    ///     Sets asset group on the line based on asset rules defined.
    /// </summary>
    /// <param name = "_purchLine">
    ///     A <c>Purchline</c> buffer based on which asset rules needs to be looked up.
    /// </param>
    /// <returns>
    ///     true if an asset group can be set and if no user selection is required; otherwise, false.
    /// </returns>
    boolean setupAsset(PurchLine _purchLine)
    {
        container       optionContainer;
        container       assetQualifierContainer;
        int             i;
        boolean         ret;
        str             temp;
        ListEnumerator  valueList;

        ret = true;

        //Find asset information only for lines which are being created or lines which already have asset information set
        //For purchase lines where asset information was not set when created, there should not be any re-evaluation for asset rules.
        if (_purchLine.ProcurementCategory
            && purchTable.PurchaseType == PurchaseType::Purch
            && (!purchLine.RecId || purchLine.CreateFixedAsset)
            && !assetRules)
        {
            if (AssetParameters::canAssetBeAutoCreated())
            {
                assetRules = PurchTableForm::setupAssetGroup(_purchLine);
            }

            //Load assetQualifierList
            if (conLen(assetRules) > 0)
            {
                optionContainer = conPeek(assetRules, #AssetOptionContainerPosition);

                if (conLen(optionContainer) != 0)
                {
                    //load asset qualifier options
                    if (!_purchLine.AssetGroup)
                    {
                        //asset group does not exist but qualifiers exist; user needs to select a qualifier
                        ret = checkFailed("@SYS136416");
                    }

                    assetQualifierList = new List(Types::Container);
                    for (i = 1; i < conLen(optionContainer); i += 3)
                    {
                        assetQualifierContainer = [conPeek(optionContainer, i), conPeek(optionContainer, i+1)];
                        assetQualifierList.addEnd(assetQualifierContainer);

                        valueList = assetQualifierList.getEnumerator();

                        temp = conPeek(assetQualifierContainer, #AssetOptionContainerGroupPosition);

                        if (_purchLine.AssetGroup == temp)
                        {
                            selectedAssetQualifier = conPeek(assetQualifierContainer, #AssetOptionContainerTextPosition);
                        }
                    }
                }
            }
        }

        if (assetQualifierList && !assetQualifierList.empty())
        {
            //Qualifier options exist, so load asset info controls
            element.design().controlName(#grpAssetQualifier).visible(true);
            txtAssetQualifierQuestion.text(conPeek(assetRules, #AssetQualifierTextPosition));
            editAssetQualifier.text(selectedAssetQualifier);
            editAssetQualifier.mandatory(true);
        }
        else
        {
            element.design().controlName(#grpAssetQualifier).visible(false);
            editAssetQualifier.mandatory(false);
        }

        return ret;
    }

    public void setupPsaPwp()
    {
        if (Project::Enabled())
        {
            if (ProjTable::setFieldPwpThresholdPercent(ProjTable::find(purchLine.ProjId)))
            {
                purchLine_IsPwp.visible(true);
                psaPwpPercent.visible(true);
            }
            else
            {
                purchLine_IsPwp.visible(false);
                psaPwpPercent.visible(false);
            }

            element.setIsPwpField();

            if (purchLine.IsPwp)
            {
                buttonSubledgerdistribution.enabled(false);
                buttonSourceDocumentDistributionHeader.enabled(false);
            }
            else
            {
                buttonSubledgerdistribution.enabled(true);
                buttonSourceDocumentDistributionHeader.enabled(true);
            }
        }
    }

    private void setVisible_IN()
    {
        TaxParameters       taxParametersLoc = TaxParameters::find();
        boolean             isTaxParametersMarked   = TaxParameters::checkTaxParameters_IN();

        purchTable_W_ds.object(fieldNum(PurchTable_W, CustomsImportOrder_IN)).visible(taxParametersLoc.Customs_IN);
        purchLine_IN_ds.object(fieldNum(PurchLine_IN, AssessableValueTransactionCurrency)).visible(isTaxParametersMarked);
        purchLine_IN_ds.object(fieldNum(PurchLine_IN, MaximumRetailPrice)).visible(isTaxParametersMarked);
    }

    void setWidthHeight()
    {
        element.design(1).width(element.design(1).widthValue());
        element.design(1).height(element.design(1).heightValue());
    }

    protected boolean shouldHeaderChangeRequestsBeEnabled()
    {
        return purchTable.ChangeRequestRequired;
    }

    protected boolean shouldHeaderInterCompanyBeEnabled()
    {
        return purchTable.isInterCompanyOrder();
    }

    protected boolean shouldLineInterCompanyBeEnabled()
    {
        return purchTable.isInterCompanyOrder() && !purchLine.isCategoryBased();
    }

    /// <summary>
    /// Shows or hides Address fiscal information depending on the Purchase type.
    /// The fields should not be showed if the Purchase type is ReturnItem
    /// </summary>
    public void showDeliveryAddressFiscalInformation_BR()
    {
        if (purchTable.PurchaseType == PurchaseType::ReturnItem)
        {
            headerDlvAddressFiscalInformation_BR.visible(true);
            lineDlvAddressFiscalInformation_BR.visible(true);
        }
        else
        {
            headerDlvAddressFiscalInformation_BR.visible(false);
            lineDlvAddressFiscalInformation_BR.visible(false);
        }
    }

    internal void showHeaderLogisticsPostalEffectiveAddressMessage()
    {
        // Keep the message appearing on the order details pages (not on the list) with Status = Open Only
        if (element.viewOptionHelper().getViewOption() != FormViewOption::Grid
            && purchTable.PurchStatus == PurchStatus::Backorder
            && (logisticsPostalAddressHeader.RecId != 0 && logisticsPostalAddressHeader.isEffective() == false))
        {
            warning("@SCM:PurchOrderHeaderEffectiveAddressMessage");
        }
    }

    internal void showLineLogisticsPostalEffectiveAddressMessage()
    {
        // Keep the message appearing on the order details pages (not on the list) with Status = Open Only
        if (element.viewOptionHelper().getViewOption() == FormViewOption::Details
            && (purchLine.RecId && purchLine.PurchStatus == PurchStatus::Backorder)
            && (logisticsPostalAddressLine.RecId != 0 && logisticsPostalAddressLine.isEffective() == false))
        {
            warning("@SCM:PurchOrderLineEffectiveAddressMessage");
        }
    }

    public void tmsSetCarrierFieldsFromDlvMode(DlvModeId   _dlvModeId)
    {
        TMSCarrierService carrierService;

        carrierService = TMSCarrierService::findByDlvModeId(_dlvModeId);

        tmsPurchTable.CarrierCode           = carrierService.CarrierCode;
        tmsPurchTable.CarrierServiceCode    = carrierService.CarrierServiceCode;
        tmsPurchTable.ModeCode              = TMSCarrier::find(carrierService.CarrierCode).ModeCode;

        tmsPurchTable_ds.refresh();
    }

    /// <summary>
    /// Updates purchase order when transportation fields are updated
    /// </summary>
    public void tmsUpdatePurchTable()
    {
        purchTable.DlvMode = TMSCarrierService::findDlvModeId(tmsPurchTable.CarrierCode, tmsPurchTable.CarrierServiceCode);

        purchTable_ds.refresh();
    }

    /// <summary>
    /// Enables or disables specific controls for purchase orders that have been confirmed at some point in the past.
    /// </summary>
    /// <remarks>
    /// This is only used for the French regulatory feature.
    /// </remarks>
    public void updateControlsForFrenchConfirmedPO()
    {
        boolean canEnable;

        if (PublicSectorUtils::isFrenchRegulatoryEnabled())
        {
            canEnable = purchTable.canModifyPurchaseOrder();

            purchLine_ds.allowDelete(canEnable);
            purchLine_ds.allowCreate(canEnable);

            // Header buttons
            buttonPurchCancel.enabled(canEnable);
            purchaseCalculate.enabled(canEnable);
            purchOrderMiscCharges.enabled(canEnable);

            // Grid buttons
            lineStripNew.enabled(canEnable);
            buttonLineQuickQuote.enabled(canEnable);
            lineStripDelete.enabled(canEnable);
            buttonLineExpandBOM.enabled(canEnable);
            markupTrans_LinePurchTable.enabled(canEnable);

            // Grid fields
            purchLine_LineDiscGrid.allowEdit(canEnable);
            purchLine_LinePercentGrid.allowEdit(canEnable);
            purchCommitmentLineLookup_PSN.allowEdit(canEnable);

            // Line details tab fields
            LineSalesTax_TaxItemGroup.allowEdit(canEnable);
            LineSalesTax_TaxGroup.allowEdit(canEnable);
            lineDisc.allowEdit(canEnable);
            linePercent.allowEdit(canEnable);
            multiLnDisc.allowEdit(canEnable);
            multiLnPercent.allowEdit(canEnable);
            purchLine_PriceUnit.allowEdit(canEnable);
            purchLine_PurchMarkup.allowEdit(canEnable);
            projectCostPrice_PurchQty.allowEdit(canEnable);
            projectCostPrice_PurchPrice.allowEdit(canEnable);
            projectCostPrice_LineAmount.allowEdit(canEnable);
            purchCommitmentLineLookup2_PSN.allowEdit(canEnable);
        }
    }

    void updateDesign(InventDimFormDesignUpdate mode)
    {
        InventMovement movement = InventMovement::construct(purchLine);
        Set            validInventDimDSset;
        InventDimControlIdCollection inventDimControlIdCollection;
        boolean emptyLine;
		// <GMY>
        boolean             isInvoiceTypeEditable_MY;
        // </GMY

        switch (mode)
        {
            case InventDimFormDesignUpdate::Init:
                if (!inventDimFormSetup)
                {
                    validInventDimDSset = new Set(Types::String);
                    validInventDimDSset.add(inventDim_ds.name());
                    inventDimControlIdCollection = InventDimControlIdCollection::construct();
                    inventDimControlIdCollection.add(storageDimensionsLine.id(), false);
                    inventDimControlIdCollection.add(trackingDimensions.id(), false);
                    inventDimControlIdCollection.add(productDimensions.id(), false);
                    inventDimControlIdCollection.add(inventoryDimensionsGrid.id(), true);
                    inventDimFormSetup = InventDimCtrl_Frm_Mov_OrderLine::newFromFormMovement(element, movement, validInventDimDSset
                    , inventDimControlIdCollection
                    );
                }
            case InventDimFormDesignUpdate::Active,
                 InventDimFormDesignUpdate::FieldChange:
                emptyLine = purchLine.ItemId == '' && purchLine.ProcurementCategory == 0;
                storageDimensionsLine.allowEdit(!emptyLine);
                trackingDimensions.allowEdit(!emptyLine);
                productDimensions.allowEdit(!emptyLine);
                inventoryDimensionsGrid.allowEdit(!emptyLine);
                if (!emptyLine)
                {
                    // For performance reasons, only call the inventDimFormSetup if the order line has an item ID or Category ID.
                    inventDimFormSetup.formActiveSetup(movement.inventDimGroupSetup(), movement);
                    inventDimFormSetup.formSetControls(mode == InventDimFormDesignUpdate::Active);
                }
                break;

            default :
                throw error(strFmt("@SYS54195",funcName()));
        }

		// <GMY>
        if (isSelfBilldInvoiceEnabled_MY)
        {
            isInvoiceTypeEditable_MY = (!purchTable.isInvoiced() && !purchTable.isCanceled());
            gstInvoice_MY_M_editInvoiceType_MY.allowEdit(isInvoiceTypeEditable_MY);
            purchTable_W_ds.object(fieldNum(PurchTable_W, TaxGSTImportDeclarationNo_MY)).allowEdit(isInvoiceTypeEditable_MY);

            this.updateDesignForGSTApprovalNumber_MY();
        }
        // </GMY>
		
        purchLine_DS.updateDesignForProject();
    }

    public void updateDesign_IN()
    {
        if (!taxParameters)
        {
            taxParameters = TaxParameters::find();
        }
        if (taxParameters.ServiceTax_IN)
        {
            taxItemGroupHeadingRev = TaxItemGroupHeading::find(purchLine.TaxItemGroup);
        }

        purchLine_IN_AssessableValueAccountingCurrency.visible(purchTable_W.CustomsImportOrder_IN == NoYes::Yes);
    }

    /// <summary>
    /// Updates the design for GST approval number.
    /// </summary>
    public void updateDesignForGSTApprovalNumber_MY()
    {
        FormDataObject      formDateObj;

        formDateObj = purchTable_W_ds.object(fieldNum(PurchTable_W, gstApprovalNumber_MY));
        if (purchTable_W.InvoiceType_MY == InvoiceType_MY::SelfBilled
            && !purchTable.isInvoiced() && !purchTable.isCanceled())
        {
            formDateObj.allowEdit(true);
            formDateObj.mandatory(true);
        }
        else
        {
            formDateObj.allowEdit(false);
            formDateObj.mandatory(false);
        }
    }

    public void updateFormState(SourceDocumentLineRecId _sourceDocumentLineRecId)
    {
        // Accounting distribution form has closed - update budget check result for changes from edit
        purchLine_ds.updateBudgetCheckResultDisplay();
    }

    public void updatePrepaymentControls()
    {
        buttonUpdatePrepayInvoice.enabled(purchTableForm.isButtonPrepayInvoiceEnabled());
        buttonRemovePurchPrepayTable.enabled(purchTableForm.isRemovePrepayEnabled());
    }

    /// <summary>
    ///     Updates the controls used for selecting source invoice transaction.
    /// </summary>
    public void updateSourceRefControlsAfterLookup_MY()
    {
        VendInvoiceJour     vendInvoiceJourInstance;
        RecId               vendInvoiceJourRecId;

        vendInvoiceJourRecId = vendInvoiceJourLookupController.parmVendInvoiceJourRecId();
        if (vendInvoiceJourRecId != 0)
        {
            vendInvoiceJourInstance = VendInvoiceJour::findRecId(vendInvoiceJourRecId);
            if (vendInvoiceJourInstance)
            {
                purchLine_W.RefInvoiceId_MY       = vendInvoiceJourInstance.InvoiceId;
                purchLine_W.RefInvoiceDate_MY     = vendInvoiceJourInstance.InvoiceDate;
            }
            vendInvoiceJourLookupController.parmVendInvoiceJourRecId(0);
        }
    }

    /// <summary>
    /// Sets product value based on selected product from the lookup.
    /// </summary>
    public void setProductFromLookup(InventDistinctProduct _product)
    {
        productFromLookup = _product;
    }

    /// <summary>
    /// Updates product dimensions assuming item has already been set on the line.
    /// </summary>
    /// <param name="_inventDim">
    /// An instance of <c>InventDim</c> that provides the new product dimensions.
    /// </param>
    public void updateProductDimensions(InventDim _inventDim)
    {
        Set productDimensionFields = inventDim.copyProductDimensionsAndGetModifiedDimensionFields(_inventDim, purchLine.ItemId);
        if (productDimensionFields)
        {
            element.modifyInventDimSet(inventDim, productDimensionFields);
            element.performUpdatePostProductDimensionChange();
        }
    }

    /// <summary>
    /// Modifies inventory dimension field.
    /// </summary>
    public void modifyInventDimField(FieldId _fieldId)
    {
        if (purchLine.modifyInventDim(inventDim, _fieldId, !purchLine.MatchingAgreementLine))
        {
            InventDim.data(purchLine.inventDim());
        }
    }

    /// <summary>
    /// Updates <c>InventDim</c> data based on the given set of modified dimension fields.
    /// </summary>
    /// <param name = "_inventDim">The new inventory dimension record.</param>
    /// <param name = "_dimFields">A set containing the ID's of the modified <c>InventDim</c> fields.</param>
    public void modifyInventDimSet(InventDim _inventDim, Set _dimFields)
    {
        if (purchLine.modifyInventDimSet(_inventDim, _dimFields, !purchLine.MatchingAgreementLine))
        {
            InventDim.data(purchLine.inventDim());
        }
    }

    /// <summary>
    /// Performs updates needed following the product dimension changes.
    /// </summary>
    public void performUpdatePostProductDimensionChange()
    {
        element.findProductNumber();

        // Update item name
        purchLine_ds.cacheCalculateMethod(tableMethodStr(PurchLine, itemName));
    }

    /// <summary>
    /// Resets the purchase line budget reservation reference control.
    /// </summary>
    private void resetPurchaseLineBudgetReferenceControl()
    {
        if (PublicSectorUtils::isBudgetReservationEnabled())
        {
            purchLine.BudgetReservationLine_PSN = 0;
            purchline_ds.rereadReferenceDataSources();
            purchLine_ds.refresh();
        }
    }

    private boolean checkSelectedPurchaseOrdersAreAllVendorCollaboration()
    {
        MultiSelectionHelper selectionHelper = MultiSelectionHelper::construct();
        selectionHelper.parmDatasource(PurchTable_ds);
        PurchTable selectedPurchTable = selectionHelper.getFirst();

        while (selectedPurchTable)
        {
            if (VendTable::find(selectedPurchTable.OrderAccount).VendVendorCollaborationType == VendVendorCollaborationType::Disabled)
            {
                return false;
            }

            selectedPurchTable = selectionHelper.getNext();
        }

        return true;
    }

    /// <summary>
    /// Enables journal buttons.
    /// </summary>
    public void enableJournalButtons()
    {
        #ISOCountryRegionCodes

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            purchTableForm.parmButtonUpdateInvoiceRegistration_IN(buttonUpdateInvoiceRegistration_IN);
            purchTableForm.parmButtonUpdateBillOfEntry_IN(buttonUpdateBillOfEntry_IN);
            purchTableForm.parmButtonJournalBillOfEntry_IN(buttonJournalBillOfEntry_IN);
        }

        // Enable journal buttons
        purchTableForm.enableUpdateJournalButtons(purchTable,
                                                      buttonUpdatePurchaseOrder,
                                                      buttonUpdateReceiptsList,
                                                      buttonUpdatePackingSlip,
                                                      buttonUpdateInvoice,
                                                      buttonProformaPurchaseOrder,
                                                      buttonProformaReceiptsList,
                                                      buttonProformaPackingSlip,
                                                      buttonProformaInvoice,
                                                      buttonUpdateInvoice4Paym_RU,
                                                      buttonUpdateFacture_RU,
                                                      factureEditLinesVend_RU,
                                                      buttonProformaInvoice4Paym_RU,
                                                      buttonProformaFacture_RU,
                                                      factureEditLinesVend_Proforma_RU,
                                                      buttonConfirmationRequest,
                                                      buttonBindingConfirmationRequest);

        // Re-enable journal buttons when multiple orders are selected.
        buttonConfirm.enabled(buttonUpdatePurchaseOrder.enabled());
    }

    /// <summary>
    /// Creates the purchase table form.
    /// </summary>
    /// <returns>true, if the purchase table form has been created; otherwise, false.</returns>
    protected boolean createPurchTableForm()
    {
        if (wasCalledFromVendorSearch)
        {
            return purchTableForm.createFromVendorSearch(vendAccountSearch);
        }
        
        return purchTableForm.create();
    }

    /// <summary>
    /// Determines if the purchase order packed extension records must be updated.
    /// </summary>
    /// <returns>
    /// true if the purchase order packed extension records must be updated; otherwise, false.
    /// </returns>
    protected boolean mustUnpackPurchTableExtensionRecords()
    {
        return isPurchTableEnabled_W || isPurchTableEnabled_RU || isPurchTableEnabled_BR;
    }

    /// <summary>
    /// Provides the string to open the intercompany sales table form
    /// </summary>
    /// <returns>
    /// The string for the intercompany sales table form
    /// </returns>
    protected str intercompanySalesTableFormStr()
    {
        return formStr(SalesTable);
    }

    /// <summary>
    ///  Opens intercompany sales table form.
    /// </summary>
    protected void formRefOnIntercompanySalesTable()
    {
        if (purchTable.PurchaseType == PurchaseType::ReturnItem)
        {
            TradeInterCompany::construct(purchTable).formRun(formStr(ReturnTable),element);
        }
        else
        {
            TradeInterCompany::construct(purchTable).formRun(this.intercompanySalesTableFormStr(),element);
        }
    }

    /// <summary>
    /// Get field list of PurchTable2LineUpdatePrompt dialog when it's not null.
    /// </summary>
    private ListEnumerator getPurchTable2LineUpdateFields()
    {
        List                    purchTable2LineUpdateFields;
        ListEnumerator          purchTable2LineUpdateFieldsEnumerator;
     
        purchTable2LineUpdateFields = List::create(purchTable2LineUpdatePrompt.packedSalesPurchTableToLineUpdateFields());

        purchTable2LineUpdateFieldsEnumerator = purchTable2LineUpdateFields.getEnumerator();

        return purchTable2LineUpdateFieldsEnumerator;
    }

    /// <summary>
    ///  Override the record context if the RequestQueryParameterCollection of current host url has wrong filter
    ///  for the line level workflow which uses the header table but line level value
    /// </summary>
    /// <param name = "_recordContext">The current record context.</param>
    /// <returns>A boolean value to show the apply record context is good.</returns>
    public boolean applyRecordContext(str _recordContext)
    {
        boolean ret;

        if (this.args().menuItemName() == menuItemDisplayStr(PurchTable))
        {
            var generator   = new Microsoft.Dynamics.AX.Framework.Utilities.UrlHelper.UrlGenerator();
            var currentHost = new System.Uri(UrlUtility::getUrl());

            // Parse a current host url to retrieve the RequestQueryParameterCollection
            generator.ParseFullURL(currentHost.AbsoluteUri);
         
            var requestQueryParameterCollection = generator.RequestQueryParameterCollection;

            if (requestQueryParameterCollection.GetParameterCount() > 0)
            {
                str field, value;
                boolean dataSourceBlank, found;

                while (requestQueryParameterCollection.MoveNext())
                {
                    var requestQueryParameter = requestQueryParameterCollection.Current();

                    if (requestQueryParameter.DataSource == '')
                    {
                        requestQueryParameter.DataSource = tableStr(PurchTable);
                        dataSourceBlank = true;
                    }

                    if (requestQueryParameter.DataSource == tableStr(PurchTable) &&
                        requestQueryParameter.GetFieldValueCount() > 0)
                    {
                        for (int i = 0; i < requestQueryParameter.GetFieldValueCount(); i++)
                        {
                            field = requestQueryParameter.getField(i);
                            value = requestQueryParameter.getValue(i);

                            // When coming from the line level workflow, the filter can contain a RecId that it thinks is from the PurchTable,
                            // but in reality is from the PurchLine table and needs to be resolved against its actual header record.
                            if (field == fieldId2Name(tableNum(PurchTable), fieldNum(PurchTable, RecId)))
                            {
                                // Try to find the PurchTable, if not, find the line and change the filter context to the PurchTable header
                                if (!PurchTable::findRecId(str2Int64(value)).RecId)
                                {
                                    PurchLine purchLineLocal = PurchLine::findRecId(str2Int64(value));
                                    if (purchLineLocal.RecId)
                                    {
                                        value = int642Str(PurchTable::find(purchLineLocal.PurchId).RecId);

                                        requestQueryParameter.UpdateEntry(field, value);
                                        found = true;
                                        break;
                                    }
                                }
                            }
                        }
                    }
                    if (found || dataSourceBlank)
                    {
                        _recordContext = generator.GenerateRequestQueryString();

                        break;
                    }
                }
            }
        }
    
        ret = super(_recordContext);

        return ret;
    }

    private void setWithTaxPayment_IN()
    {
        TaxGSTEPZCodeHelper epzHelper = TaxGSTEPZCodeHelper::construct(purchTable);
        WithIGSTPayment_IN.visible(epzHelper.isEPZCodeNotNone());
        WithIGSTPayment_IN.allowEdit(epzHelper.isSEZ());
    }

    public boolean allowCreateDeliverySchedule()
    {
        return true;
    }

    internal void transportationDocumentFormClosed()
    {
        purchTable_ds.reread();
        purchTable_ds.refresh();
        purchTable_ds.selectionChanged();
    }

    [DataSource]
    class PurchTable
    {
        public void reReadLines()
        {
            purchLine_ds.executeQuery();
            this.editPurch();
        }

        public void reReadPackages()
        {
            retailPackagePurch_ds.executeQuery();
        }

        public void reread_BR()
        {
            purchTable_BR_ds.reread();
            purchTable_BR_ds.rereadReferenceDataSources();
            purchtable_BR_ds.refresh();
        }

        /// <summary>
        /// Enables the <c>AccountingDistributionTemplate</c> field based on the purchase order header state.
        /// </summary>
        public void enableDistributionTemplate()
        {
            distributionTemplateHeader.allowEdit(purchTable.canApplyAllocationOrDistributionTemplate());
        }

        public void executeQuery()
        {
            QueryBuildDataSource purchTableQueryRunQbds = purchTable_ds.queryRunQueryBuildDataSource();
            QueryBuildRange purchIdRange = purchTableQueryRunQbds != null ? purchTableQueryRunQbds.findRange(fieldNum(PurchTable, PurchId)) : null;
            
            // If there is specific purchase order id filter on the query run, we don't need the exist join with ProjTmpPurchListTable
            if (purchIdRange != null)
            {
                QueryRun queryRun = purchTable_ds.queryRun();
                if (queryRun != null && queryRun.query() != null)
                {
                    QueryBuildDataSource tmpQbds = queryRun.query().dataSourceTable(tableNum(ProjTmpPurchListTable));
                    if (tmpQbds != null)
                    {
                        tmpQbds.enabled(false);
                    }
                }
            }

            logisticsPostalAddressHeader_ds.validTimeStateUpdate(ValidTimeStateUpdate::Correction);
            logisticsPostalAddressHeader_ds.query().validTimeStateDateTimeRange(DateTimeUtil::minValue(), DateTimeUtil::maxValue());
            
            super();
        }

        /// <summary>
        /// Updates budget check result display cache.
        /// </summary>
        public void updateBudgetCheckResultDisplay()
        {
            if (this.cacheCalculateMethod(tableMethodStr(PurchTable, displayBudgetCheckResult)))
            {
                purchTable_ds.refresh();
                // Must refresh form cache for ALL purchase order lines.
                purchLine_ds.research(true);
            }
        }

        public void init()
        {
            Query  query;

            switch (element.args().dataset())
            {
                case tableNum(CostControlTransCommittedCost):
                    purchTable_ds.autoQuery(false);

                    query   = new Query();
                    queryBuildRangeProj = query.addDataSource(tableNum(PurchTable)).addRange(fieldNum(PurchTable, PurchId));
                    purchTable_ds.query(query);
                    break;
            }

            super();

            if (InventParameters::find().UseQualityManagement)
            {
                purchTable_ds.cacheAddMethod(tableMethodStr(PurchTable, qualityOrderStatusDisplay), false);
            }
            purchTable_ds.cacheAddMethod(tableMethodStr(PurchTable, displayBudgetCheckResult), false);
            purchTable_ds.cacheAddMethod(tableMethodStr(PurchTable, displayDocumentStatus));
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
            {
                purchTable_ds.cacheAddMethod(tableMethodStr(PurchTable, agreementDocumentTitle_RU), true);
            }

            if (BrazilParameters::isEnabled())
            {
                purchTable_ds.cacheAddMethod(tableMethodStr(PurchTable, deliveryCNPJCPFNUM_BR));
                purchTable_ds.cacheAddMethod(tableMethodStr(PurchTable, deliveryIENum_BR));
            }
            purchTable_ds.cacheAddMethod(tableMethodStr(PurchTable, editReasonComment));
        }

        public boolean validateWrite()
        {
            boolean ret;
            ListEnumerator          purchTable2LineUpdateFieldsEnumerator;
            PurchTable2LineField    purchTable2LineField;

            ret = super();

            copyTaxGroupToMarkupTrans = DialogButton::No;
            if (ret && purchTable.TaxGroup != purchTable.orig().TaxGroup)
            {
                copyTaxGroupToMarkupTrans   = MarkupTrans::promptCopyTaxGroupToMarkupTrans(purchTable.TableId, purchTable.RecId);
                ret                         = copyTaxGroupToMarkupTrans != DialogButton::Cancel;
            }

            if (TaxIntegrationBulkUpdateChargeFlight::instance().isEnabled()
                && isTaxIntegrationEnabledForPurchase)
            {
                copyOverrideSalesTaxToHeaderMarkupTrans = DialogButton::No;

                if (ret && purchTable.OverrideSalesTax != purchTable.orig().OverrideSalesTax)
                {
                    copyOverrideSalesTaxToHeaderMarkupTrans = MarkupTrans::promptCopyOverrideSalesTaxToMarkupTrans(purchTable.TableId, purchTable.RecId, true);
                    ret = copyOverrideSalesTaxToHeaderMarkupTrans != DialogButton::Cancel;
                }
            }

            if (ret)
            {
                purchTable2LineUpdatePrompt = PurchTable2LineUpdatePrompt::newExecuteExtendedPrompt(purchTable, copyTaxGroupToMarkupTrans);
                // If the purchTable2LineUpdatePrompt object is null no fields are to be updated.
                if (purchTable2LineUpdatePrompt)
                {
                    ret = purchTable2LineUpdatePrompt.parmExtendedPromptReturnValue();

                    if (ret)
                    {
                        ret = purchTable.type().checkUpdateOfInventSiteIdAndInventLocationId();
                    }
                }
            }

            if (isRU
                && ret
                && purchTable2LineUpdatePrompt)
            {
                purchTable2LineUpdateFieldsEnumerator = element.getPurchTable2LineUpdateFields();
                while (purchTable2LineUpdateFieldsEnumerator.moveNext())
                {
                    purchTable2LineField = purchTable2LineUpdateFieldsEnumerator.current();
                    if (purchTable2LineField.parmFieldId()          == PurchTable::fieldIdToInternalFieldId_W(fieldNum(PurchTable_RU, InventProfileId_RU), tableNum(PurchTable_RU))
                        && purchTable2LineField.parmUpdateLines()   == NoYes::No)
                    {
                        // must be checked for possible inconsistence if user did not select to propagate inventProfileId to the order lines
                        // otherwise it will be checked on sales order validateWrite() method
                        ret = purchTable.checkInventProfile_RU(true);
                    }
                }
            }

            boolean languageUpdate = purchTable.LanguageId != purchTable.orig().LanguageId;

            if (languageUpdate
                && ret  
                && purchTable2LineUpdatePrompt)
            {
                purchTable2LineUpdateFieldsEnumerator = element.getPurchTable2LineUpdateFields();
                while (purchTable2LineUpdateFieldsEnumerator.moveNext())
                {
                    purchTable2LineField = purchTable2LineUpdateFieldsEnumerator.current();

                    if (purchTable2LineField.parmFieldId() == fieldnum(PurchTable, LanguageId)
                        && purchTable2LineField.parmUpdateLines())
                    {
                        // update line name and description on the lines if the language id has been changed
                        purchTable.resetLinesNameAndDescriptionWithNewLanguageId();
                        break;
                    }
                }
            }

            return ret;
        }

        void  write()
        {
            DialogButton            copyAddress     = DialogButton::No;
            boolean                 convertCurrency = false;
            boolean                 rollBackCurrencyChange;
            TradeCurencyConversion  tradeCurrencyConversion;
            LogisticsPostalAddressRecId originalDeliveryPostalAddress;
            boolean                     mustReread;
            TMSPurchTable           newTMSPurchTable;

            if (purchTable.checkUpdate())
            {
                if (PurchLine::exist(purchTable.PurchId) || MarkupTrans::exist(purchTable.TableId, purchTable.RecId))
                {
                    if (purchTable.CurrencyCode != purchTable.orig().CurrencyCode)
                    {
                        [convertCurrency, tradeCurrencyConversion] = PurchTable::promptConvertCurrencyCode(purchTable);
                        rollBackCurrencyChange = !convertCurrency;
                    }
                }

                if (PurchLine::exist(purchTable.PurchId))
                {
                    if (purchTable.DeliveryPostalAddress != purchTable.orig().DeliveryPostalAddress)
                    {
                        copyAddress = PurchTable::promptCopyDeliveryAddress();
                        originalDeliveryPostalAddress = purchTable.orig().DeliveryPostalAddress;
                    }
                }

                ttsbegin;

                if (convertCurrency)
                {
                    purchTable.convertCurrencyCode(purchTable.CurrencyCode, tradeCurrencyConversion, purchTable.exchangeRateDateForCurrencyChange());
                }
                else
                {
                    if (rollBackCurrencyChange)
                    {
                        // Cancel has been choosen in the dialogue:
                        // Currency code should not be recalculated, in fact all changes in currency code should be
                        // rolled back...
                        purchTable.CurrencyCode = purchTable.orig().CurrencyCode;
                    }
                }

                if (TaxThaiGovCertificationFeatureChecker::isTaxBranchEnabled())
                {
                    purchTable_W.TaxBranch = TaxBranchType::getTaxBranchRecIdByDefaultDimension(purchTable.DefaultDimension);
                }

                if (copyTaxGroupToMarkupTrans == DialogButton::Yes || copyTaxGroupToMarkupTrans == DialogButton::YesToAll)
                {
                    MarkupTrans::updateTaxGroup(purchTable.TableId, purchTable.RecId, purchTable.TaxGroup, purchTable.orig().TaxGroup, copyTaxGroupToMarkupTrans,
                        purchTable.isInvoiceMatched());
                    copyTaxGroupToMarkupTrans = DialogButton::No;
                }

                if (TaxIntegrationBulkUpdateChargeFlight::instance().isEnabled()
                    && copyOverrideSalesTaxToHeaderMarkupTrans == DialogButton::Yes)
                {
                    MarkupTrans::updateOverrideSalesTax(
                        purchTable.TableId,
                        purchTable.RecId,
                        purchTable.OverrideSalesTax,
                        copyOverrideSalesTaxToHeaderMarkupTrans,
                        purchTable.isInvoiceMatched());
                    copyOverrideSalesTaxToHeaderMarkupTrans = DialogButton::No;
                }

                super();
                if (SysExtensionSerializerExtensionMap::isExtensionEnabled(tableNum(PurchTable_Intrastat)))
                {
                   purchtable_Intrastat.SysExtensionSerializerExtensionMap::insertAfterBaseTable(purchTable);
                }
                if (isPurchTableEnabled_W && PurchTable_W::findByPurchTable(purchTable.RecId).RecId == 0)
                {
                    purchTable_W.SysExtensionSerializerExtensionMap::insertAfterBaseTable(purchTable);
                }
                if (isPurchTableEnabled_RU)
                {
                    purchTable_RU.SysExtensionSerializerExtensionMap::insertAfterBaseTable(purchTable);
                }
                if (isPurchTableEnabled_BR)
                {
                    purchTable_BR.SysExtensionSerializerExtensionMap::insertAfterBaseTable(purchTable);
                }

                if (copyAddress != DialogButton::Cancel  &&  copyAddress != DialogButton::No)
                {
                    purchTable.copyAddressToLine(copyAddress, originalDeliveryPostalAddress);

                    if (PurchTableFormUpdateDeliveryPostalAddressFlight::instance().isEnabled())
                    {
                        mustReread = true;
                    }
                }

                if (purchTable2LineUpdatePrompt)
                {
                    purchTable2LineUpdatePrompt.runOperation();
                    purchTable2LineUpdatePrompt = null;
                    mustReread = true;
                }

                if (!tmsPurchTable.isTmp()) // No need to query for TMSPurchTable if it is disabled
                {
                    newTMSPurchTable = TMSPurchTable::find(purchTable.PurchId);

                    tmsPurchTable.data(newTMSPurchTable);
                    tmsPurchTable.reread();
                }

                ttscommit;

                reverseCharge.headerDSPostWrite();

                if (mustReread)
                {
                    purchLine_ds.research();
                }
                if (BrazilParameters::isEnabled())
                {
                    purchLine_ds.research(true);
                }
            }
            defaultPurchLine.clear();
            purchTable_ds.reread();
            purchTable_ds.refresh();

            element.updateWorkflowButtonForLineVisibility();

            if (PurchTableFormUpdateDeliveryPostalAddressFlight::instance().isEnabled() && !infolog.parmLastActivatedForm())
            {
                infolog.setLastActivatedForm(element);
            }
        }

        void  delete()
        {
            if (purchTableType)
            {
                purchTableType.formMethodDataSourceDelete(element, purchTable_ds);
            }

            super();
        }

        void  create(boolean  append = true)
        {            
            PurchTable      newPurchTable;
            TMSPurchTable   newTMSPurchTable;
            QueryBuildDataSource    purchTableDS;

            element.editPurch(true);

            // Set cursor to current record when needed
            if (newButtonCurrentPurchId && (newButtonCurrentPurchId != purchTable.PurchId))
            {
                PurchTable currentRecord = PurchTable::find(newButtonCurrentPurchId);
                if (currentRecord)
                {
                    this.positionToRecord(currentRecord);
                }
            }

            boolean purchTableFormCreate = element.createPurchTableForm();

            if (purchTableFormCreate)
            {
                if (skipLinkActive)
                {
                    skipLinkActive = false;
                    if (!linkActiveHeaderExecuted)
                    {
                        this.linkActive();
                    }
                }
                newPurchTable = purchTableForm.purchTable();
                if (newPurchTable.ProjId && element.args().dataset() == tableNum(ProjTable))
                {
                    purchTableDS = purchTable_ds.queryRun().query().dataSourceTable(tableNum(PurchTable));
                    purchTableDS.addRange(fieldNum(PurchTable, PurchId)).value(newPurchTable.PurchId);
                }
                defaultPurchLine.clear();
                element.setLineDefaults();

                if (newPurchTable)
                {
                    if (purchTable.AccountingDate)
                    {
                        DimensionEntryControlHeader.parmNonActiveValueErrorTolerance(ErrorTolerance::Warning);
                        DimensionEntryControlHeader.parmActiveValueFilterDate(purchTable.AccountingDate);
                    }

                    super(append);
                    purchTable.data(newPurchTable);
                    if (element.mustUnpackPurchTableExtensionRecords())
                    {
                        purchTable.SysExtensionSerializerMap::unpackAll();
                    }
                    purchTable_ds.reread();
                    purchTable_ds.rereadReferenceDataSources();

                    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
                    {
                        PurchTable_RU_ds.rereadReferenceDataSources();
                    }

                    lineViewTab.setFocus();

                    if (!tmsPurchTable.isTmp()) // No need to query for TMSPurchTable if it is disabled
                    {
                        newTMSPurchTable = TMSPurchTable::find(purchTable.PurchId);

                        tmsPurchTable.data(newTMSPurchTable);
                        tmsPurchTable.reread();
                    }

                    // Context of PurchTable form is now edit. If FormOpenMode is ForNew, change it to ForEdit
                    if (TradeFormHelper::isOpenedForNew(element.args()))
                    {
                        element.args().parmEnum(enum2int(FormOpenMode::ForEdit));
                    }

                    purchLine.clear();
                    logisticsPostalAddressLine.clear();
                }
                else
                {
                    element.editPurch(purchTableForm.editHeaderAllowed(), purchTableForm.deleteHeaderAllowed());
                }
            }
            else
            {
                // If PurchTable was opened from other form for the intent of creating new record, then close form
                if (TradeFormHelper::isOpenedForNewFromForm(element.args()))
                {
                    element.close();
                }
                else
                {
                    this.editPurch();
                }
            }

            skipLinkActive = false;
            element.design().viewEditMode(ViewEditMode::Edit);
         }

        int  active()
        {
            int                                 ret;
            PurchTotals                         purchTotals;
            boolean                             editHeaderAllowed;
            boolean                             deleteHeaderAllowed;
            boolean                             allowEditDeliveryPostalAddress;

            purchTableForm.purchTable(purchTable);

            editHeaderAllowed   = purchTableForm.editHeaderAllowed();
            deleteHeaderAllowed = purchTableForm.deleteHeaderAllowed();

            element.editPurch(editHeaderAllowed, deleteHeaderAllowed);

            ret = super();

            if (purchTable.AccountingDate)
            {
                DimensionEntryControlHeader.parmNonActiveValueErrorTolerance(ErrorTolerance::Warning);
                DimensionEntryControlHeader.parmActiveValueFilterDate(purchTable.AccountingDate);
            }

            if (purchTable.RecId)
            {
                purchTable_ds.enableDistributionTemplate();
            }

            interCompanyAllowIndirectCreationOrig.visible(purchTable.interCompanyAllowIndirectCreationOrig() ? true : false);

            purchTableForm.setHeaderAccess();
            allowEditDeliveryPostalAddress = purchTable_ds.object(fieldNum(PurchTable, DeliveryPostalAddress)).allowEdit();
            logisticsLocationSelectHeader.enabled(allowEditDeliveryPostalAddress);
            dirPartyPostalAddressNewHeader.enabled(allowEditDeliveryPostalAddress);

            if (isRU)
            {
                purchTable_ds.object(fieldNum(PurchTable, PostingProfile)).allowEdit(! purchTable_W.EmplAccount_RU);
            }

            if (tmpPurchTableTaxTransForm && !tmpPurchTableTaxTransForm.closed())
            {
                purchTotals = PurchTotals::newPurchTable(purchTable);
                purchTotals.calc();
                tmpPurchTableTaxTransForm.pushTaxObject(purchTotals.tax());
            }
            if (TaxWithholdParameters_IN::checkTaxParameters())
            {
                if ( tmpPurchTableTaxWithholdTransForm && !tmpPurchTableTaxWithholdTransForm.closed())
                {
                    purchTotals = PurchTotals::newPurchTable(purchTable);
                    purchTotals.calc();
                    tmpPurchTableTaxWithholdTransForm.pushTaxObject(purchTotals.taxWithhold_IN());
                }
            }

            element.interCompanyRefreshCache();

            if (isRU)
            {
                element.enabledVATTaxAgent_RU();
            }

            purchTable_ds.object(fieldNum(PurchTable,ProjId)).allowEdit(purchTable.ProjId ? true : false);
            if (purchTable.ProjId)
            {
                headerInquiry_CostControlCommittedCost.enabled(true);

                if (!purchTable.isProjectSalesItemReqPO() && isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
                {
                    if ((purchTable.isReceived()) ||
                        (purchTable.isInvoiced()))
                    {
                        purchTable_ds.object(fieldNum(PurchTable,ProjId)).allowEdit(false);
                    }
                    else
                    {
                        purchTable_ds.object(fieldNum(PurchTable,ProjId)).allowEdit(true);
                    }
                }
            }
            else
            {
                headerInquiry_CostControlCommittedCost.enabled(false);
            }

            element.configBankDocumentControls();
            element.setTitleText();
            element.showHeaderLogisticsPostalEffectiveAddressMessage();

            if (zakatParameterEnabled)
            {
                element.enableContractNumber_SA();
            }

            buttonSourceDocumentDistributionHeader.enabled(purchTable.SourceDocumentLine ? true : false);

            element.updateControlsForFrenchConfirmedPO();

            if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
            {
                retailAddItemMenuItem.enabled(purchTable.editAllowed(true)
                    && !purchTable.MCRDropShipment);

                retailSumLines_ds.executeQuery();

                if (rboItemPackage.isActivePage() && treeView.value())  //Only fills the package tree when package tab is chosen and user has selected tree view
                    element.fillPackageTree();
            }

            if (BrazilParameters::isEnabled())
            {
                purchTableForm.activate_BR();
                element.showDeliveryAddressFiscalInformation_BR();
            }

            if (TaxParameters::isCustomsEnable_IN())
            {
                customsImportAssessableValue_IN.enabled(purchTable_W.CustomsImportOrder_IN == NoYes::Yes && TaxParameters::find().Customs_IN == NoYes::Yes);
                purchLine_CustomsMaxRetailPrice_IN.visible(PurchTable::find(purchTable.PurchId).purchTable_W().CustomsImportOrder_IN == NoYes::Yes && TaxParameters::find().Customs_IN == NoYes::Yes);
                purchLine_MaximumRetailPrice_IN.enabled(PurchTable::find(purchLine.PurchId).purchTable_W().CustomsImportOrder_IN == NoYes::No);
            }
            if (TaxWithholdParameters_IN::checkTaxParameters())
            {
                element.setTaxWithholdEnabled_IN();
            }
	    
            element.enableJournalButtons();

            element.enableTMSFields();

            element.refreshFormPart(formstr(PurchLatestOrdersInfoPart));
            element.refreshFormPart(formstr(PurchEncumbranceSummaryPart));

            element.updateWorkflowButtonVisibility();
            element.updateWorkflowButtonEnabled();
            element.updateWorkflowButtonForLineVisibility();
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
            {
                element.enableFieldsActive_IN();
                element.setWithTaxPayment_IN();
            }
            return ret;
        }

        void linkActive()
        {
            CostControlTransCommittedCost   costControlTransCommittedCost;
            QueryBuildDataSource            purchTableDS;
            QueryBuildDataSource            queryBuildDataSource;
            InterCompanyPurchSalesReference interCompanyPurchReference;
   
            if (skipLinkActive)
            {
                return;
            }

            // Initialize QueryBuildDataSource as table PurchTable.
            purchTableDS = purchTable_ds.query().dataSourceTable(tableNum(PurchTable));

            switch (element.args().dataset())
            {
                case tableNum(InterCompanyPurchSalesReference):
                    // Clear dynalinks, since multiple order can be shown
                    purchTableDS.clearDynalinks();
                    // Show all orders referenced from the original order
                    interCompanyPurchReference  = element.args().record() as InterCompanyPurchSalesReference;
                    queryBuildDataSource        = purchTableDS.addDataSource(tableNum(InterCompanyPurchSalesReference));
                    queryBuildDataSource.relations(true);
                    queryBuildDataSource.joinMode(JoinMode::ExistsJoin);
                    queryBuildDataSource.addRange(fieldNum(InterCompanyPurchSalesReference, SalesId)).value(interCompanyPurchReference.SalesId);
                    break;

                case tableNum(CostControlTransCommittedCost):
                    costControlTransCommittedCost = element.args().record();
                    queryBuildRangeProj.value(queryValue(costControlTransCommittedCost.RefId));
                    break;
                
                case tableNum(PurchRFQTable):
                    this.applyPurchRFQRange(purchTable_ds.query(), element.args().record());
                    break;
            }

            if (purchTableForm.linkActive())
            {
                purchTableForm.purchTable(element.args().record());
                purchTable_ds.query(purchTableForm.queryPurchTable(purchTable_ds.query()));
            }

            if (purchTableType)
            {
                purchTableType.formMethodDataSourceLinkActive(element, purchTable_ds);
            }

            super();
            linkActiveHeaderExecuted = true;
        }

        void  editPurch()
        {
            purchTableForm.purchTable(purchTable);

            element.editPurch(purchTableForm.editHeaderAllowed(), purchTableForm.deleteHeaderAllowed());

            if (isRU)
            {
                element.enableInvoice4PaymButtons();
            }
        }

        void editHeader()
        {
            this.editPurch();
        }

        private void applyPurchRFQRange(Query _query, PurchRFQTable _purchRFQTable)
        {
            PurchRFQLine purchRFQLine;
            QueryBuildRange queryBuildRange;

            var queryBuildDataSource = SysQuery::findOrCreateDataSource(_query, tableNum(PurchTable));
            queryBuildDataSource.clearDynalinks();

            var purchIdRange    = queryBuildDataSource.findRange(fieldNum(PurchTable, PurchId));
            while (purchIdRange)
            {
                queryBuildDataSource.clearRange(fieldNum(PurchTable, PurchId));
                purchIdRange  = queryBuildDataSource.findRange(fieldNum(PurchTable, PurchId));
            }

            while select PurchId from purchRFQLine
            group by PurchId
            where purchRFQLine.rfqId == _purchRFQTable.rfqId
            {
                queryBuildRange = queryBuildDataSource.addRange(fieldNum(PurchTable, PurchId));
                queryBuildRange.value(queryValue(purchRFQLine.PurchId));
            }

            queryBuildRange.status(RangeStatus::Locked);
        }

        /// <summary>
        /// Reset some informtaion when the current record is updated.
        /// </summary>
        void setTouched()
        {
            purchIdTouched = purchTable.PurchId;
        }

        public TitleFields parentTitleFields(Common _record)
        {
            // Avoid showing title fields from another form that is opening this form
            return "";
        }

        /// <summary>
        /// Enables/disables header actions when multiple orders are selected.
        /// </summary>
        public void markChanged()
        {
            super();
            element.enableJournalButtons();
        }

        /// <summary>
        /// Gets the bill-to address for a purchase order.
        /// </summary>
        /// <param name="_set">
        /// A Boolean value that indicates whether the bill-to address is set.
        /// </param>
        /// <param name="_recId">
        /// The record ID of the location if it is set.
        /// </param>
        /// <returns>
        /// The bill-to address location description.
        /// </returns>
        [SysClientCacheDataMethodAttribute(true)]
        public edit Description editBillToAddress(boolean _set = false, Str60 _recId = "0")
        {
            LogisticsLocation location;

            if (_set)
            {
                location = LogisticsLocation::find(str2int64(_recId));
                if(!location )
                {
                    checkFailed('@ProcurementAndSourcing:NoUniqueBillToAddressError');
                    _recId = "0";
                }
                ttsbegin;
                purchTable.BillToAddress = str2int64(_recId);
                purchTable.update();
                ttscommit;
            }

            if (!location.RecId && purchTable.BillToAddress)
            {
                location = LogisticsLocation::find(purchTable.BillToAddress);
            }
            else
            {
                location = purchTableForm.getWorkerPrimaryLocation();
            }

            return location.Description;
        }

        /// <summary>
        /// Gets the postal address of bill-to address description field on a purchase order.
        /// </summary>
        /// <param name="_recId">
        /// The record ID of the location if it is set.
        /// </param>
        /// <returns>
        /// The bill-to postal address description.
        /// </returns>
        [SysClientCacheDataMethodAttribute(true)]
        display LogisticsAddressing displayLogisticsBillToAddress(Str60 _recid = "0")
        {
            LogisticsLocation location = LogisticsLocation::find(str2int64(_recid));

            if (!location.RecId && purchTable.BillToAddress)
            {
                location = LogisticsLocation::find(purchTable.BillToAddress);
            }
            else
            {
                location = purchTableForm.getWorkerPrimaryLocation();
            }

            LogisticsAddressing logisticsBillToAddress = "";

            if (location)
            {
                logisticsBillToAddress = LogisticsPostalAddress::findByLocation(location.RecId).Address;
            }

            return logisticsBillToAddress;
        }

        /// <summary>
        /// Asks user whether to copy financial dimension dimension from a project.
        /// </summary>
        /// <returns>Whether to copy dimension.</returns>
        [Replaceable]
        public DialogButton setDefaultFinancialDimensionsDialog() 
        {
            return Box::yesNo("@Proj:Project_PurchaseOrderHeaderDimension", DialogButton::No);
        }

        [DataField]
        class AccountingDate 
        {
            public boolean validate()
            {
                boolean ret = true;

                if (!purchTable.checkAccountingDateFiscalYear())
                {
                    purchTable.AccountingDate = purchTable.orig().AccountingDate;
                    ret = false;
                    Box::warning("@SYS335906");
                }
                else
                {
                    ret = super();
                }

                return ret;
            }

            public void modified()
            {
                super();
                DimensionEntryControlHeader.parmNonActiveValueErrorTolerance(ErrorTolerance::Warning);
                DimensionEntryControlHeader.parmActiveValueFilterDate(purchTable.AccountingDate);
                DimensionEntryControlLine.parmNonActiveValueErrorTolerance(ErrorTolerance::Warning);
                DimensionEntryControlLine.parmActiveValueFilterDate(purchTable.AccountingDate);
            }

        }

        [DataField]
        class BankDocumentType 
        {
            public void modified()
            {
                super();
                element.configBankDocumentControls();
            }

        }

        [DataField]
        class ContactPersonId 
        {
            void  modified()
            {
                super();

                purchTable_ds.refresh();
            }

        }

        [DataField]
        class ContractNum_SA 
        {
            public void lookup(
                FormControl _formControl,
                str         _filterStr)
            {
                VendContractZakat_SA::lookupContracts(_formControl, purchTable.OrderAccount);
            }

        }

        [DataField]
        class CurrencyCode 
        {
            public void modified()
            {
                super();
                if (TaxParameters::isCustomsEnable_IN())
                {
                    if (PurchTable::find(purchLine.PurchId).purchTable_W().CustomsImportOrder_IN == NoYes::Yes)
                    {
                        //When user changes the currency code. MRP defaulted from item is converted using Customs exchange rate for Export orders.
                        //purchLine_IN.MaximumRetailPrice_IN = CurrencyHelper_IN::customsCurAmount_IN(purchLine_IN.CustomsMaxRetailPrice_IN, purchTable.CurrencyCode, Direction_IN::Import, systemDateGet(), false);
                    }
                }
            }

        }

        [DataField]
        class DeliveryPostalAddress 
        {
            public void modified()
            {
                super();

                if (BrazilParameters::isEnabled())
                {
                    purchTable_ds.cacheCalculateMethod(tableMethodStr(PurchTable, deliveryCNPJCPFNUM_BR));
                    purchTable_ds.cacheCalculateMethod(tableMethodStr(PurchTable, deliveryIENum_BR));
                }

                purchTable_ds.refresh();

                element.showHeaderLogisticsPostalEffectiveAddressMessage();
            }

            public Common lookupReference(FormReferenceControl _formReferenceControl)
            {
                Common ret;
                LogisticsLocationSelectionLookup_Purch lookup;

                lookup = LogisticsLocationSelectionLookup_Purch::newParameters(_formReferenceControl);

                lookup.parmInventSiteId(purchTable.InventSiteId);
                lookup.parmInventLocationId(purchTable.InventLocationId);

                lookup.addRoleByType(LogisticsLocationRoleType::Delivery);
                lookup.parmReturnLocation(false);

                ret = lookup.performFormLookup();
                return ret;
            }

        }

        [DataField]
        class DlvMode 
        {
            public void modified()
            {
                super();

                element.tmsSetCarrierFieldsFromDlvMode(purchTable.DlvMode);

                element.enableTMSFields();
            }

        }

        [DataField]
        class Email 
        {
            public void lookup(FormControl _formControl, str _filterStr)
            {
                LogisticsElectronicAddressLookup lookup = LogisticsElectronicAddressLookup::newParameters(_formControl);

                lookup.addParty(purchTable.contactPerson().Party);
                lookup.addParty(purchTable.vendTable_OrderAccount().Party);

                lookup.parmMethodType(LogisticsElectronicAddressMethodType::Email);
                lookup.performFormLookup();
            }

        }

        [DataField]
        class InventLocationId 
        {
            public void modified()
            {
                super();

                purchTable_ds.refresh();
            }

            public void lookup(FormControl _formControl, str _filterStr)
            {
                if (purchTable.InventSiteId)
                {
                    InventLocation::lookupBySiteIdAllTypes(_formControl, purchTable.InventSiteId);
                }
                else
                {
                    super(_formControl, _filterStr);
                }
            }

        }

        [DataField]
        class InventSiteId 
        {
            public void modified()
            {
                super();
				
                purchTable_ds.refresh();
            }

        }

        [DataField]
        class InvoiceAccount 
        {
            public void modified()
            {
                super();

                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
                {
                    element.enableFieldsActive_IN();
                    element.setWithTaxPayment_IN();
                }
            }

        }

        [DataField]
        class OrderAccount 
        {
            public void modified()
            {
                VersioningChangeRequestRequired originalRequest = purchTable.orig().ChangeRequestRequired;
                super();

                if (originalRequest && !purchTable.ChangeRequestRequired)
                {
                    keepWorkFlowButtonEnabled = true;
                }

                purchLine_ds.reread();
                purchLine_ds.refresh();
                purchTable_ds.rereadReferenceDataSources();
                if (isPurchTableEnabled_W)
                {
                    purchTable_W_ds.refresh();
                }

                if (BrazilParameters::isEnabled())
                {
                    purchTable.enableDataSourceFields_BR();
                    purchTable_BR_ds.refresh();
                }

                element.updateWorkflowButtonEnabled();
                element.updateWorkflowButtonForLineVisibility();

                if (TaxIntegrationUtils::isTaxInformationEnabled())
                {
                    VendTable vendTable = VendTable::find(purchTable.OrderAccount);
                    PurchLine purchLineLocal;
                    while select purchLineLocal
                        where purchLineLocal.PurchId == purchTable.PurchId
                    {
                        TransTaxInformation transTaxInformationLocal = TransTaxInformationHelper::findOrCreateTransTaxInformationByRecord(purchLineLocal);
                        if (transTaxInformationLocal)
                        {
                            ttsbegin;
                            transTaxInformationLocal.selectForUpdate(true);
                            TransTaxInformationHelper::initFromCustVend(transTaxInformationLocal, vendTable);
                            transTaxInformationLocal.update();
                            ttscommit;
                        }
                    }
                }

                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
                {
                    element.enableFieldsActive_IN();
                    element.setWithTaxPayment_IN();
                }
            }

        }

        [DataField]
        class Payment 
        {
            public void modified()
            {
                boolean allowEditEmplAccount_RU;

                super();

                if (advanceHoldersEnabled)
                {
                    allowEditEmplAccount_RU = PaymTerm::isEmplAccountUsed_RU(purchTable.Payment);
                    purchTable_W_ds.object(fieldNum(PurchTable_W, EmplAccount_RU)).allowEdit(allowEditEmplAccount_RU);
                    purchTable_ds.object(fieldNum(PurchTable, CashDisc)).allowEdit(!allowEditEmplAccount_RU);
                }
            }

        }

        [DataField]
        class PaymentSched 
        {
            void modified()
            {
                super();

                if (purchTable.PaymentSched)
                {
                    buttonPaymentSchedule.enabled(true);
                }
                else
                {
                    buttonPaymentSchedule.enabled(false);
                }
            }

        }

        [DataField]
        class ProjId 
        {
            /// <summary>
            /// Modifies the header dimensions when the header project id is changed.
            /// </summary>
            public void modified()
            {
                DialogButton copyDimensions = PurchTable_DS.setDefaultFinancialDimensionsDialog();

                if (copyDimensions)
                {
                    purchTable.DefaultDimension = purchTable.copyDimension(ProjTable::find(purchTable.ProjId).DefaultDimension);
                }
                else
                {
                    purchTable.DefaultDimension = purchTable.copyDimension(VendTable::find(purchTable.OrderAccount).DefaultDimension);
                }

                super();
            }

        }

        [DataField]
        class PurchaseType 
        {
            /// <summary>
            /// Modifies the purchase lines when the purchase type is changed.
            /// </summary>
            /// <remarks>
            /// This method calls the <c>modifyPurchaseType</c> method of the <c>PurchTableType</c> class to
            /// so that the fixed asset information is cleared if necessary. The purchase line data source
            /// is refreshed as the information may have been modified.
            /// </remarks>
            public void modified()
            {
                super();

                purchTableType = purchTable.type();
                purchTableType.modifyPurchaseType();
                element.configBankDocumentControls();
                purchLine_ds.refresh();

                if (BrazilParameters::isEnabled())
                {
                    purchTable.enableDataSourceFields_BR();
                    purchTable_ds.rereadReferenceDataSources();
                    element.showDeliveryAddressFiscalInformation_BR();
                }
            }

        }

        [DataField]
        class URL 
        {
            public void lookup(FormControl _formControl, str _filterStr)
            {
                LogisticsElectronicAddressLookup lookup = LogisticsElectronicAddressLookup::newParameters(_formControl);

                lookup.addParty(purchTable.contactPerson().Party);
                lookup.addParty(purchTable.vendTable_OrderAccount().Party);

                lookup.parmMethodType(LogisticsElectronicAddressMethodType::URL);
                lookup.performFormLookup();
            }

        }

        [DataField]
        class VATNum 
        {
            public void jumpRef()
            {
                if (TaxVATNumTable::taxVATNumTableEnabled())
                    TaxVATNumTable::jumpRefVATNum(purchTable, element);
                else
                    super();
            }

            public void lookup(FormControl _formControl, str _filterStr)
            {
                if (TaxVATNumTable::taxVATNumTableEnabled())
                    TaxVATNumTable::lookupVATNum(vatNum,purchTable);
                else
                    super(_formControl, _filterStr);
            }

        }

    }

    [DataSource]
    class PurchLine
    {
        public void reread()
        {
            // Current price references may need to be deleted.
            purchLine.salesPurchLineInterface().cleanUpPriceHistoryRef();

            super();
        }

        public void updateDesignForProject()
        {
            BudgetReservationLine_PSN budgetReservationLine = BudgetReservationLine_PSN::find(purchLine.BudgetReservationLine_PSN);

            if (purchLine.ProjId == ''
                || purchLine.isProjItemBased()
                || (budgetReservationLine.RecId != 0 && budgetReservationLine.ProjId && PublicSectorUtils::isBudgetReservationEnabled()))
            {
                purchLine_DS.object(fieldNum(PurchLine, ProjWorker)).allowEdit(false);
            }
            else
            {
                purchLine_DS.object(fieldNum(PurchLine, ProjWorker)).allowEdit(true);
            }
        }

        public void deleteMarked()
        {
            purchTableForm.parmInPurchlineDeleteMarked(true);

            super();

            purchTableForm.parmInPurchlineDeleteMarked(false);

            if (purchParameters.AutomaticFactBoxUpdateOnPO_PSN)
            {
                element.calculateTotalsSummary_PSN();
            }
        }

        display ICMSCreditInstallments_BR ICMSCreditInstallments_BR(PurchLine _purchLine)
        {
            return _purchLine.ICMSCreditInstallments_BR();
        }

        display NoYes PISCOFINSReceivableLongTerm_BR(PurchLine _purchLine)
        {
            return _purchLine.PISCOFINSReceivableLongTerm_BR();
        }

        display FBPISCOFINSFixedAssetAppropMethod_BR PISCOFINSFixedAssetCreditAppropMethod_BR(PurchLine _purchLine)
        {
            return _purchLine.PISCOFINSFixedAssetCreditAppropMethod_BR();
        }

        display FBPisCofinsFixedAssetCreditInstls_BR PISCOFINSFixedAssetCreditInstallments_BR(PurchLine _purchLine)
        {
            return _purchLine.PISCOFINSFixedAssetCreditInstallments_BR();
        }

        display FBPISCOFINSFixedAssetCreditGroup_BR PISCOFINSFixedAssetCreditGroup_BR(PurchLine _purchLine)
        {
            return _purchLine.PISCOFINSFixedAssetCreditGroup_BR();
        }

        display FBPISCOFINSFixedAssetCreditPurpose_BR PISCOFINSFixedAssetCreditPurpose_BR(PurchLine _purchLine)
        {
                return _purchLine.PISCOFINSFixedAssetCreditPurpose_BR();
        }

        display NoYes ICMSReceivableLongTerm_BR(PurchLine _purchLine)
        {
            return _purchLine.ICMSReceivableLongTerm_BR();
        }

        /// <summary>
        /// Activates the <c>PurchLine</c> datasource.
        /// </summary>
        /// <returns>
        /// An integer value indicating if the method is successful. It always returns 1.
        /// </returns>
        /// <remarks>
        /// This method calls the <c>setAllowEditAssetFields</c> method of the <c>PurchTableForm</c> class
        /// to ensure that the fixed asset fields are available to be edited.
        /// </remarks>
        int  active()
        {
            int     ret;
            boolean allowEdit;
            boolean allowEditDeliveryPostalAddress;
            #ISOCountryRegionCodes
            
            if (purchLine.RecId && PurchLine::findRecId(purchLine.RecId).RecVersion != purchLine.RecVersion)
            {
                this.reread();
            }

            ret = super();
            
            this.setDimensionEntryControlLine();

            purchTableForm.purchTable(purchTable);

            element.setEditItemCategoryAllowed(purchLine.RecId == 0);
            element.setEditLinenumberAllowed(purchTableForm.editLineNumberAllowed(purchLine));
            element.showLineLogisticsPostalEffectiveAddressMessage();

            allowEdit = purchTableForm.editLineAllowed(purchLine) || purchLine.editableInWorkflow();
  
            purchLine_ds.allowCreate(purchTableForm.createLineAllowed(purchLine));
            purchLine_ds.allowEdit  (allowEdit);
            purchLine_ds.allowDelete(purchTableForm.deleteLineAllowed(purchLine));

            inventDim_ds.allowEdit  (allowEdit);

            element.checkCreditNoteLine();

            element.updateDesign(InventDimFormDesignUpdate::Active);
            PurchLine_VariantId.allowEdit(PurchLine_VariantId.allowEdit() && purchLine.SalesPurchLine::retailVariantIdAllowEdit());

            purchLine_ds.object(fieldNum(PurchLine, PurchReceivedNow)).allowEdit(purchLine.purchReceivedNowAllowEdit());

            element.setAllowEditTax1099();

            if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
            {
                element.setAllowEdit1099GFields();
                element.setAllowEdit1099SFields();
                element.setEditCommitmentLineAllowed(purchLine.ItemId || purchLine.ProcurementCategory);
            }
             

            if (isRU)
            {
                element.enabledVATTaxAgent_RU();
                element.enableMarkupCode_RU();
                element.enableForeignTrade_RU();
            }

            purchTableForm.interCompanySetLineAccess(purchLine);
            purchTableForm.directDeliverySetLineAccess(purchLine);
            allowEditDeliveryPostalAddress = purchLine_ds.object(fieldNum(PurchLine, DeliveryPostalAddress)).allowEdit();
            logisticsLocationSelectLine.enabled(allowEditDeliveryPostalAddress);
            dirPartyPostalAddressNewLine.enabled(allowEditDeliveryPostalAddress);

            if (purchLine.ProjId)
            {
                lineInquiry_CostControlCommittedCost.enabled(true);
            }
            else
            {
                lineInquiry_CostControlCommittedCost.enabled(false);
            }

            element.resetAssetContainers();

            if (tabLineFixedAsset.isActivePage())
            {
                element.setupAsset(purchLine);
            }
            else
            {
                element.design().controlName(#grpAssetQualifier).visible(false);
            }

            purchTableForm.setAllowEditAssetFields(purchTable, purchLine, purchLine_ds);
            if (AssetDocumentUtility_JP::isAssetDocumentEnabled())
            {
                purchTableForm.setAllowVisibleReductionEntryFields_JP(purchTable, purchLine, reductionEntry_JP);
            }

            // If the date is not set
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIT]))
            {
                if (!purchLine.DepreciationStartDate)
                {
                    purchLine.setDepreciationStartDate();
                }
                element.enableDepreciationStartDate(false);
            }

            if (purchLine.RecId)
            {
                purchLine_ds.enableDistributionTemplate();
            }

            element.setupPsaPwp();

            element.enableLedgerDimensionDefaultAccount();

            element.enableRetentionProject();

            element.enableProjSalesPrice();

            element.updateControlsForFrenchConfirmedPO();
            if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
            {
                allowEdit = allowEdit && (!purchLine.RetailPackageId);    //User may not be allowed to edit purchase order lines that belong to a package
                element.packageAllowEdit(allowEdit);
            }

            if (ret && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
            {
                element.enableFieldsActive_IN();
                element.updateDesign_IN();
		        if (taxWithholdParameters.tdsActivate || taxWithholdParameters.tcsActivate)
                {
                    element.setTaxWithholdEnabled_IN();
		        }
            }

            isWHSPurchLineEnabled = WHSPurchLine::isExtensionRecordNeeded(purchLine);
            crossDock.enabled(isWHSPurchLineEnabled);

            if (BrazilParameters::isEnabled())
            {
                element.enableServiceFields_BR();
            }

            element.updateWorkflowButtonForLineVisibility();

            if (purchLine.ProjId && purchLine.PurchReqLineRefId)
            {
                purchLine_ds.object(fieldNum(PurchLine, ProjId)).allowEdit(false);
                purchLine_ds.object(fieldNum(PurchLine, ProjCategoryId)).allowEdit(false);
            }

            purchTableForm.setAllowEditConsignmentFields(purchLine);

            if (PublicSectorUtils::isBudgetReservationEnabled())
            {
                purchTableForm.enableBudgetReservationFields(purchLine);
                groupFinancialDimensionLine.enabled(purchLine.BudgetReservationLine_PSN == 0);
                purchTableForm.setFinancialEditingForLineWithBudgetReservationReference(purchLine);
            }
 
            if (isTaxIntegrationEnabledForPurchase)
            {
                PurchLine_ds.object(fieldNum(PurchLine, TaxGroup)).allowEdit(purchLine.OverrideSalesTax == NoYes::Yes);
                PurchLine_ds.object(fieldNum(PurchLine, TaxItemGroup)).allowEdit(purchLine.OverrideSalesTax == NoYes::Yes);
            }

            // User will not be allowed to edit project related fields on purchase line when item requirement is linked to purchase line and item requirement status is Invoiced / Delivered.
            this.disableProjectFieldsForItemReq();

            return ret;
        }

        private void disableProjectFieldsForItemReq()
        {
            SalesLine salesLineLoc = purchLine.salesLine();
            if (purchLine.ProjId
                && ProjRelatedFieldsRestrictedForPOItemReqFlight::instance().isEnabled()
                && purchLine.isPurchLineLinkedToItemRequirement()
                && salesLineLoc
                && (salesLineLoc.salesStatus == SalesStatus::Invoiced || salesLineLoc.salesStatus == SalesStatus::Delivered))
                {
                    PurchLine_ds.object(fieldNum(PurchLine, ProjId)).allowEdit(false);
                    PurchLine_ds.object(fieldNum(PurchLine, ActivityNumber)).allowEdit(false);
                    PurchLine_ds.object(fieldNum(PurchLine, ProjCategoryId)).allowEdit(false);
                    PurchLine_ds.object(fieldNum(PurchLine, ItemId)).allowEdit(false);
                    PurchLine_ds.object(fieldNum(PurchLine, ProjLinePropertyId)).allowEdit(false);
                    PurchLine_ds.object(fieldNum(PurchLine, ProjWorker)).allowEdit(false);
                    PurchLine_ds.object(fieldNum(PurchLine, ProjSalesCurrencyId)).allowEdit(false);
                    PurchLine_ds.object(fieldNum(PurchLine, ProjSalesUnitId)).allowEdit(false);
                    PurchLine_ds.object(fieldNum(PurchLine, ProjTaxGroupId)).allowEdit(false);
                    PurchLine_ds.object(fieldNum(PurchLine, ProjTaxItemGroupId)).allowEdit(false);
                }
        }

        /// <summary>
        /// Setting dimension entry control line values.
        /// </summary>
        public void setDimensionEntryControlLine()
        {
            DimensionEntryControlLine.allowEdit(!purchLine.IsInvoiceMatched);
            if (purchTable.AccountingDate)
            {
                DimensionEntryControlLine.parmNonActiveValueErrorTolerance(ErrorTolerance::Warning);
                DimensionEntryControlLine.parmActiveValueFilterDate(purchTable.AccountingDate);
            }
        }

        /// <summary>
        /// Updates <c>InventDim</c> with new data which has been set due to modification of <c>PurchLine</c>.
        /// </summary>
        public void initInventDim()
        {
            inventDim.data(InventDim::find(purchLine.InventDimId));

            // Override the initial value if a default is provided.
            if (defaultInventDim && purchLine.ItemId == defaultItemId)
            {
                inventDim.initFromInventDim(defaultInventDim);
            }

            inventDim_ds.setCurrent();
        }

        display container lineDeliveryTypeImage(PurchLine _purchLine)
        {
            switch (_purchLine.LineDeliveryType)
            {
                case LineDeliveryType::OrderLineWithMultipleDeliveries:
                    return OrderLineMultipleDeliveriesImageData;
                case LineDeliveryType::DeliveryLine:
                    return DeliveryLineImageData;
                default:
                    return connull();
            }
        }

        public void executeQuery()
        {
            logisticsPostalAddressLine_ds.validTimeStateUpdate(ValidTimeStateUpdate::Correction);
            logisticsPostalAddressLine_ds.query().validTimeStateDateTimeRange(DateTimeUtil::minValue(), DateTimeUtil::maxValue());

            super();
        }

        /// <summary>
        /// Updates budget check result display cache.
        /// </summary>
        public void updateBudgetCheckResultDisplay()
        {
            if (Ledger::isLedgerBudgetControlEnabled())
            {
                if (this.cacheCalculateMethod(tableMethodStr(PurchLine, displayBudgetCheckResult)))
                {
                    purchLine_ds.refresh();
                }
            }
        }

        /// <summary>
        /// Eanbles the <c>BudgetControlLine</c> inquiry button.
        /// </summary>
        private void enableBudgetControlLineInquiry()
        {
            budgetControlLine.enabled(budgetControlLine.visible() && purchLine.IsModified);
        }

        edit AssetRuleAssetQualifier editAssetQualifier(boolean set, AssetRuleAssetQualifier _qualifier)
        {
            if (set)
            {
                if (AssetRuleTmpAssetQualifierLookup::getAssetGroupFromQualifier(_qualifier, assetQualifierList) != '')
                {
                    selectedAssetQualifier = _qualifier;
                }
            }
            return  selectedAssetQualifier;
        }

        public boolean validateDelete()
        {
            boolean ret = true;
            str warning = purchLine.type(purchTable).getDeleteWarning();

            if (warning != "")
            {
                ret = (Box::yesNo(warning, DialogButton::No) == DialogButton::Yes)
                    && purchLine.validateDelete();
            }
            else
            {
                ret = super();
            }

            return ret;
        }

        /// <summary>
        /// Should reset purch line fields when item id modified.
        /// </summary>
        public void resetPurchLineFieldsWhenItemIdModified()
        {
            ItemId                  itemId;
            LedgerDimensionAccount  ledgerDimension;
            RefRecId                sourceDocumentLine;

            itemId             = purchLine.ItemId;
            ledgerDimension    = purchLine.LedgerDimension;
            sourceDocumentLine = purchLine.SourceDocumentLine;

            purchTableForm.resetPurchLine(purchLine);

            // Update GBR reference control UI after purchase line is reset.
            element.resetPurchaseLineBudgetReferenceControl();

            purchLine.ItemId             = itemId;
            purchLine.LedgerDimension    = ledgerDimension;
            purchLine.SourceDocumentLine = sourceDocumentLine;
        }

        void itemIdModified()
        {
            purchLine.itemIdChanged(purchTable.MatchingAgreement, true /* perform product variant validation */);

            this.changedInventoriedStatus();
            isWHSPurchLineEnabled = WHSPurchLine::isExtensionRecordNeeded(purchLine);
            crossDock.enabled(isWHSPurchLineEnabled);

            // Reread ReferenceGroup controls, e.g. to show the category name.
            purchLine_ds.rereadReferenceDataSources();

            element.enableLedgerDimensionDefaultAccount();

            element.enableMarkupCode_RU();
            element.enableForeignTrade_RU();

            element.findProductNumber();
        }

        /// <summary>
        /// Updates the form to reflect the current inventoried status inventoried status, i.e. after a change to the itemid, category, or inventoried field.
        /// </summary>
        void changedInventoriedStatus()
        {
            // Update inventDim with new data which has been set due to modification
            this.initInventDim();
            purchLine.modifyInventDim(inventDim, fieldNum(InventDim,InventLocationId), !purchLine.MatchingAgreementLine);

            InventMovement::bufferSetTransQtyUnit(purchLine);

            // Update inventdim fields
            element.updateDesign(InventDimFormDesignUpdate::FieldChange);

            // Disable category editing if itemid is selected
            purchLine_ds.object(fieldNum(PurchLine, ProcurementCategory)).allowEdit(purchLine.ItemId == '');
            // Disable itemid editing if only a category is selected
            purchLine_ds.object(fieldNum(PurchLine, ItemId)).allowEdit(!purchLine.isCategoryBased());

            // Update allow edit for scrap
            element.checkCreditNoteLine();
            // Update allow edit for inventory fields
            purchTableForm.interCompanySetLineAccess(purchLine);
            purchTableForm.directDeliverySetLineAccess(purchLine);

            purchTableForm.setAllowEditAssetFields(purchTable, purchLine, purchLine_ds);
        }

        void  create(boolean append = true)
        {
            element.setEditItemCategoryAllowed(true);
            distributionTemplateLine.allowEdit(true);

            if (!purchTableForm.canNewLineBeAppended(purchLine))
            {
                append = false;
            }

            purchTableForm.purchLine_CreatePreSuper(purchLine);

            if (purchTable.checkUpdate())
            {
                super(append);
            }

            if (purchTable && tabPageDetails.isActivePage() && purchLine_ItemId)
            {
                purchLine_ItemId.setFocus();
            }

            // Invoke postSuper to store an initialized purchLine used for further creation. Only store it if an item
            // has not been defined or we have a default item.
            if ((!purchLine.ItemId && !purchLine.ProcurementCategory)
                || (defaultItemId && defaultItemId == purchLine.ItemId))
            {
                purchTableForm.purchLine_CreatePostSuper(purchLine);
            }

            // filter exists on ItemId
            if (purchLine.ItemId)
            {
                this.itemIdModified();
            }

            // filter exists on ProcurementCategory
            if (purchLine.ProcurementCategory)
            {
                this.changedInventoriedStatus();
            }

            this.createFixedAssetModified();
         }

        /// <summary>
        /// Broadcasts that the <c>CreateFixedAsset</c> field value has changed to the <c>purchLine</c> table buffer.
        /// </summary>
        void createFixedAssetModified()
        {
            purchLine.modifyCreateFixedAsset();
        }

        void  delete()
        {
            PurchId purchId;
            boolean mustFormResearchAfterDelete = purchTableForm.mustFormResearchAfterDelete(purchLine);

            if (purchLine.checkDelete(true, purchTable))
            {
                purchId = purchLine.PurchId;

                ttsbegin;
                if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
                {
                    purchLine.type(purchTable).deleteRetailSumLinesFromPurch();
                }

                // Current price references may need to be deleted.
                purchLine.salesPurchLineInterface().cleanUpPriceHistoryRef();

                reverseCharge.lineDSPreDelete();

                super();
                if (purchParameters.AutomaticFactBoxUpdateOnPO_PSN)
                {
                    element.refreshTotalsFormPart_PSN();
                }

                ttscommit;

                if ( mustFormResearchAfterDelete )
                {
                    purchLine_ds.research(true);
                }

                if (purchId && PurchTable::exist(purchId))
                {
                    purchTable_ds.reread();
                    purchTable_ds.refresh();
                }

                if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
                {
                    retailSumLines_ds.research();
                }

                element.setupPsaPwp();
            }
        }

        /// <summary>
        /// Enables the <c>AccountingDistributionTemplate</c> field based on the purchase order line state.
        /// </summary>
        public void enableDistributionTemplate()
        {
            if (purchLine.canApplyAllocationOrDistributionTemplate())
            {
                distributionTemplateLine.allowEdit(true);
            }
            else
            {
                distributionTemplateLine.allowEdit(false);
            }
        }

        void initValue()
        {
            if (purchTable
               && (defaultPurchLine.PurchId != purchTable.PurchId
               || (defaultPurchLine.PurchId == purchTable.PurchId
               && purchTableRecVersion      != purchTable.RecVersion)))
            {
                defaultPurchLine.clear();
                defaultPurchLine.initFromPurchTable(purchTable);
                defaultPurchLine.initFromVendTable(purchTable.vendTable_OrderAccount());
                purchTableRecVersion = purchTable.RecVersion;
            }

            purchLine.data(defaultPurchLine);
            if (isPurchLine_INEnabled || isPurchLine_WEnabled || isPurchLine_IntrastatEnabled)
            {
                // The defaulted extension table record are packed in defaultPurchLine
                // and been copied to purchLine.PackedExtensions field. Unpack it to apply
                // these default value to extension table data source.
                purchLine.SysExtensionSerializerMap::unpackAll();
            }

            // For category based lines Name should be kept if manually modified.
            keepName = false;

            if (defaultItemId)
            {
                purchLine.ItemId = defaultItemId;
            }

            if (defaultDate)
            {
                purchLine.ShippingDateRequested = defaultDate;
            }

            super();
        }

        public void init()
        {
            super();

            this.query().dataSourceTable(tableNum(PurchLine)).addRange(fieldNum(PurchLine,IsDeleted)).value(queryValue(NoYes::No));

            purchLine_ds.cacheAddMethod(tableMethodStr(PurchLine, whsGetLoads));

            purchLine_ds.cacheAddMethod(tableMethodStr(PurchLine, receivedInTotal), false);
            purchLine_ds.cacheAddMethod(tableMethodStr(PurchLine, invoicedInTotal), false);
            purchLine_ds.cacheAddMethod(tableMethodStr(PurchLine, itemName), false);
            purchLine_ds.cacheAddMethod(tableMethodStr(PurchLine, displayBudgetCheckResult), false);
            purchLine_ds.cacheAddMethod(tableMethodStr(PurchLine, calcPendingQtyPurchDisplay));
            purchLine_ds.cacheAddMethod(tableMethodStr(PurchLine, getPurchReqItemName), false);
            if (InventParameters::find().UseQualityManagement)
            {
                purchLine_ds.cacheAddMethod(tableMethodStr(PurchLine, qualityOrderStatusDisplay), false);
            }

            if (BrazilParameters::isEnabled())
            {
                purchLine_ds.cacheAddMethod(tableMethodStr(PurchLine, deliveryCNPJCPFNUM_BR));
                purchLine_ds.cacheAddMethod(tableMethodStr(PurchLine, deliveryIENum_BR));
            }

            purchLine.setDepreciationStartDate(true);
            element.enableDepreciationStartDate();

            element.invoiceMatchingAccess();
        }

        void  linkActive()
        {
            #ISOCountryRegionCodes
            super();

            /* Set Caption */
            if (!purchLine && purchTable)
                {
                    purchTableForm.purchTable(purchTable);
                    purchLine_ds.create();
            }

            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIT]))
            {
                if (!purchLine.DepreciationStartDate)
                {
                    purchLine.setDepreciationStartDate();
                }
                element.enableDepreciationStartDate(false);
            }
        }

        FormDataSource purchTable_ds()
        {
            return purchTable_ds;
        }

        public boolean validateWrite()
        {
            boolean ret = true;

            //Set SubLedgerDistributions and SubLedgerJournalLines as needing to be created/updated
            purchTable_ds.setTouched();

            ret = element.setupAsset(purchLine);

            purchLine.InventDimId = InventDim::findOrCreate(inventDim).InventDimId;

            if (!purchLine.isAgreementLinkValid(true))
            {
                ret = purchLine.unLinkAgreementLinePrompt(0, tableNum(PurchLine), false);
            }

            copyTaxGroupToMarkupTrans = DialogButton::No;
            if (ret && purchLine.TaxGroup != purchLine.orig().TaxGroup)
            {
                copyTaxGroupToMarkupTrans   = MarkupTrans::promptCopyTaxGroupToMarkupTrans(purchLine.TableId, purchLine.RecId);
                ret                         = copyTaxGroupToMarkupTrans != DialogButton::Cancel;
            }

            if (TaxIntegrationBulkUpdateChargeFlight::instance().isEnabled()
                && isTaxIntegrationEnabledForPurchase)
            {
                copyOverrideSalesTaxToLineMarkupTrans = DialogButton::No;

                if (ret && purchLine.OverrideSalesTax != purchLine.orig().OverrideSalesTax)
                {
                    copyOverrideSalesTaxToLineMarkupTrans = MarkupTrans::promptCopyOverrideSalesTaxToMarkupTrans(purchLine.TableId, purchLine.RecId, false);
                    ret = copyOverrideSalesTaxToLineMarkupTrans != DialogButton::Cancel;
                }
            }

            if (purchLine.ProjId && purchOrderEnabledForProjOps)
            {
                if (purchLine.ProcurementCategory 
                    && !FeatureStateProvider::isFeatureEnabled(ProjOpsEnableProcurementCategoriesFeature::instance()))
                {
                    ret = false;
                    return checkFailed(strFmt("@Proj:ProcCategoryNotSupportedProjOpsPO"));
                }
                else if (purchLine.ItemId && InventTable::find(purchLine.ItemId).isStocked())
                {
                    ret = false;
                    return checkFailed(strFmt("@Proj:StockedItemNotSupportedProjOpsPO"));
                }
            }
            
            ret = super() && ret;

            return ret;
        }

        void  write()
        {
            PurchLine       localPurchLine;
            boolean         agreementWasChanged = (purchLine.MatchingAgreementLine != purchLine.orig().MatchingAgreementLine);
            boolean         isPurchLineReread;
            boolean         isPurchLineRefreshed;

            PurchLineWritePreSuperInputContract     inputContractPre = PurchLineWritePreSuperInputContract::construct();
            PurchLineWritePreSuperOutputContract    outputContractPre;
            PurchLineWritePostSuperInputContract    inputContractPost = PurchLineWritePostSuperInputContract::construct();
            PurchLineWritePostSuperOutputContract   outputContractPost;

            boolean             newTax1099Detail;
            Tax1099Fields       tax1099Fields;

            newTax1099Detail = tax1099BoxDetail.RecId;

            inputContractPre.parmPurchTable(purchTable);
            inputContractPre.parmPurchLine(purchLine);
            outputContractPre   = purchTableForm.purchLine_WritePreSuper(inputContractPre);
            inputContractPost.parmOrigTaxGroup(purchLine.orig().TaxGroup);

            if (outputContractPre.parmPurchTableCheckUpdate())
            {
                buf2Buf(outputContractPre.parmPurchLine(), purchLine);

                if (PurchLine::hasExensionTableEnabled())
                {
                    purchLine.SysExtensionSerializerMap::unPackAll();
                }

                purchLine.InventDimId = InventDim::findOrCreate(inventDim).InventDimId;

                if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)) && (purchLine.Tax1099Fields || purchLine.Tax1099RecId))
                {
                    //Must make sure we write tax1099Detail only when we are writing purchLine to maintain relationship
                    if (purchLine.Tax1099Fields)
                    {
                        tax1099Fields = outputContractPre.parmTax1099Fields();
                    }

                    if (tax1099Fields && (tax1099Fields.Tax1099Box == Tax1099G::unemploymentCompensation().tax1099Box
                                      || tax1099Fields.Tax1099Box == Tax1099G::incomeTaxRefundsCreditsOffsets().tax1099Box
                                      || tax1099Fields.Tax1099Box == Tax1099S::grossProceeds().tax1099Box))
                    {
                        try
                        {
                            tax1099BoxDetail_ds.write(true);

                            if (!newTax1099Detail)
                            {
                                purchLine.Tax1099RecId = tax1099BoxDetail.RecId;
                            }
                        }
                        catch
                        {
                            return;
                        }
                    }
                    else
                    {
                        if (tax1099BoxDetail)
                        {
                            tax1099BoxDetail.delete();
                        }
                        purchLine.Tax1099RecId = 0;
                    }
                }

                if (isConfigurationkeyEnabled(configurationKeyNum(Retail)) && outputContractPre.parmRetailSumLinesHasChanged())
                {
                    retailSumLines_ds.research();
                }

                reverseCharge.lineDSPreWrite();

                if (isWHSPurchLineEnabled && !whsPurchLine.RecId)
                {
                    purchLine.PackedWHSLine = buf2Con(whsPurchLine);
                }

                super();

                if (isWHSPurchLineEnabled)
                {
                    whsPurchLine.data(WHSPurchLine::find(purchLine.InventTransId));
                }

                if (SysExtensionSerializerExtensionMap::isExtensionEnabled(tableNum(PurchLine_Intrastat)))
                {
                   purchLine_Intrastat.SysExtensionSerializerExtensionMap::insertAfterBaseTable(purchLine);
                }
                if (isPurchLine_INEnabled)
                {
                    purchLine_IN.SysExtensionSerializerExtensionMap::insertAfterBaseTable(purchLine);
                }
                if (isPurchLine_WEnabled)
                {
                    purchLine_W.SysExtensionSerializerExtensionMap::insertAfterBaseTable(purchLine);
                }

                inputContractPost.parmPurchTableCheckUpdate(outputContractPre.parmPurchTableCheckUpdate());
                inputContractPost.parmPurchLine(purchLine);

                if (copyTaxGroupToMarkupTrans == DialogButton::Yes || copyTaxGroupToMarkupTrans == DialogButton::YesToAll)
                {
                    inputContractPost.parmCopyTaxGroupToMarkupTrans(copyTaxGroupToMarkupTrans);
                    copyTaxGroupToMarkupTrans = DialogButton::No;
                }

                if (TaxIntegrationBulkUpdateChargeFlight::instance().isEnabled()
                    && copyOverrideSalesTaxToLineMarkupTrans == DialogButton::Yes)
                {
                    inputContractPost.parmCopyOverrideSalesTaxToMarkupTrans(copyOverrideSalesTaxToLineMarkupTrans);
                    copyOverrideSalesTaxToLineMarkupTrans = DialogButton::No;
                }

                if (purchParameters.AutomaticFactBoxUpdateOnPO_PSN)
                {
                    element.refreshTotalsFormPart_PSN();
                }

                if (purchLine.isCategoryBased() && !purchLineForeignTradeCategory.PurchLineInventTransId)
                {
                    purchLineForeignTradeCategory.initFromPurchLine(purchLine);
                    purchLineForeignTradeCategory_ds.write();
                    inputContractPost.parmUpdatePendingRegistrationsNonStocked(true);
                }

                outputContractPost = purchTableForm.purchLine_WritePostSuper(inputContractPost);

                if (isConfigurationkeyEnabled(configurationKeyNum(Retail)) && outputContractPost.parmRetailSumLinesHasChanged())
                {
                    retailSumLines_ds.research();
                    purchLine_ds.reread();
                    isPurchLineReread = true;
                    purchLine_ds.refresh();
                    isPurchLineRefreshed = true;
                }

                if (purchLine.InventDimId != inventDim.InventDimId)
                {
                    inventDim.data(InventDim::find(purchLine.InventDimId));
                    inventDim_ds.setCurrent();
                }

                purchTableForm.refreshDeliverySchedule(purchLine, agreementWasChanged && !purchLine.MatchingAgreementLine);

                if (TaxParameters::isCustomsEnable_IN()
                    && purchTable_W.CustomsImportOrder_IN
                    && TaxParameters::find().EximIncentiveSchemes_IN
                    && eximPurchLine_IN)
                {
                    eximPurchLine_IN.write();
                }

                if (purchTable.InterCompanyOrder)
                {
                    localPurchLine.data(purchLine.data());
                    element.args().lookupRecord(localPurchLine);
                    purchLine_ds.research(true);
                }

                reverseCharge.lineDSPostWrite();

                if (!(isPurchLineReread && isPurchLineRefreshed))
                {
                    // update purchase order line budget check result display.
                    purchLine_ds.updateBudgetCheckResultDisplay();
                }
                purchTable_ds.reread();
                purchTable_ds.refresh();
                purchLine_ds.reread();
                purchLine_ds.refresh();
            }
            else
            {
                outputContractPost = purchTableForm.purchLine_WritePostSuper(inputContractPost);
                purchLine_ds.reread();
                purchTable_ds.reread();
            }

            if (isRU)
            {
                element.enableInvoice4PaymButtons();
            }

            interCompanyIsPriceDiscSearchNeeded = 0;

            if (outputContractPost.parmCreditNoteCashDiscMessage())
            {
                info("@SYS99051");
            }

             element.updateWorkflowButtonForLineVisibility();

             if (purchLine.isBudgetReservationLineReferenced() && purchLine.LineAmount < 0)
             {
                 purchLine.BudgetReservationLine_PSN = 0;
                 info("@Budgeting_BudgetReservationPS:PurchTableBudgetReservationDoesNotSupportNegativeQuantitiesInfolog");
             }

             if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
             {
                 element.refreshPurchLine_IN();
             }
             
             if (purchParameters.AutomaticFactBoxUpdateOnPO_PSN)
             {
                 element.calculateTotalsSummary_PSN();
             }

        }

        public display container workflowIcon(PurchLine _line)
        {
            ImageReference imgRef;

            workflowIconObservableLink.observe();

            if (Workflow::findWorkItemsForCurrentUser(_line).elements())
            {
                imgRef = ImageReference::constructForSymbol(ImageReferenceSymbol::Workflow);
            }
            else
            {
                imgRef = ImageReference::constructForSymbol('');
            }

            return imgRef.pack();
        }

        [DataField]
        class ActivityNumber 
        {
            /// <summary>
            /// Creates lookup for project activities, and blocks parent activity selection based on project parameters.
            /// </summary>
            /// <param name="_formControl">
            /// A form control on which lookup appears.
            /// </param>
            /// <param name="_filterStr">
            /// A string value for filteration.
            /// </param>
            public void lookup(FormControl _formControl, str _filterStr)
            {
                HierarchyTreeTable::lookupHierarchyTree(_formControl, ProjTable::find(purchLine.ProjId), ProjParameters::find().BlockParentActivitySelection);
            }

        }

        [DataField]
        class AssetBookId 
        {
            public void modified()
            {
                super();

                if (AssetDocumentUtility_JP::isAssetDocumentEnabled())
                {
                    purchTableForm.setAllowVisibleReductionEntryFields_JP(purchTable, purchLine, reductionEntry_JP);
                }

                purchLine.setDepreciationStartDate();
                element.enableDepreciationStartDate();
            }

        }

        [DataField]
        class AssetGroup 
        {
            public void modified()
            {
                super();

                element.enableLedgerDimensionDefaultAccount();
           }

        }

        [DataField]
        class AssetId 
        {
            /// <summary>
            /// Modifies the <c>AssetId</c> field value on the <c>PurchLine</c> table buffer.
            /// </summary>
            /// <remarks>
            /// This method calls the
            /// <c>setAllowEditAssetFields</c> method of the <c>purchTableForm</c> class to correctly
            /// set the <c>allowEdit</c> property of the fixed asset fields.
            /// </remarks>
            public void modified()
            {
                super();

                purchLine_ds.refresh();

                purchLine.setDepreciationStartDate();
                element.enableDepreciationStartDate();

                purchTableForm.setAllowEditAssetFields(purchTable, purchLine, purchLine_ds);
                if (AssetDocumentUtility_JP::isAssetDocumentEnabled())
                {
                    purchTableForm.setAllowVisibleReductionEntryFields_JP(purchTable, purchLine, reductionEntry_JP);
                    PurchLine_ds.research();
                }

                purchline_ds.enableDistributionTemplate();

                element.enableLedgerDimensionDefaultAccount();
            }

        }

        [DataField]
        class AssetTransTypePurch 
        {
            public void modified()
            {
                super();

                element.enableDepreciationStartDate();
            }

        }

        [DataField]
        class BudgetReservationLine_PSN 
        {
            /// <summary>
            /// Adds the view details link to the budget reservation context menu.
            /// </summary>
            public void jumpRef()
            {
                BudgetReservation_PSN::jumpRefBudgetReservation(purchLine.BudgetReservationLine_PSN);
            }

            public void modified()
            {
                super();

                purchLine_ds.refresh();

                purchTableForm.setAllowEditProjectFields(purchLine, purchLine_ds);

                purchLine_ds.updateDesignForProject();

                element.enableProjSalesPrice();

                groupFinancialDimensionLine.enabled(!purchLine.isBudgetReservationLineReferenced());
            }

        }

        [DataField]
        class CFOPTable_BR 
        {
            public void modified()
            {
                super();

                purchLine_ds.refresh();
            }

            public Common lookupReference(FormReferenceControl _formReferenceControl)
            {
                Common                      ret;

                if (BrazilParameters::isEnabled())
                {
                    CFOPAttributesDeterminer_BR cfopAttributes = CFOPAttributesDeterminer_BR::construct(purchLine);

                    ret = CFOPLookupHelper_BR::lookupCFOPTable(_formReferenceControl, cfopAttributes);
                }

                return ret;
            }

        }

        [DataField]
        class CreateFixedAsset 
        {
            /// <summary>
            /// Modifies the <c>CreateFixedAssetField</c> field value on the <c>PurchLine</c> table buffer.
            /// </summary>
            /// <remarks>
            /// This method broadcasts the change in value of the <c>CreateFixedAssetField</c> field by
            /// calling <c>createFixedAssetModified</c> on the data source. Then it calls the
            /// <c>setAllowEditAssetFields</c> method of the <c>purchTableForm</c> class to correctly
            /// set the <c>allowEdit</c> property of the fixed asset fields.
            /// </remarks>
            public void modified()
            {
                super();

                purchLine_ds.createFixedAssetModified();
                purchTableForm.setAllowEditAssetFields(purchTable, purchLine, purchLine_ds);
                if (AssetDocumentUtility_JP::isAssetDocumentEnabled())
                {
                    purchTableForm.setAllowVisibleReductionEntryFields_JP(purchTable, purchLine, reductionEntry_JP);
                }
                purchLine_ds.enableDistributionTemplate();
            }

        }

        [DataField]
        class DeliveryPostalAddress 
        {
            public void modified()
            {
                super();

                purchLine_ds.refresh();

                element.showLineLogisticsPostalEffectiveAddressMessage();
            }

            public Common lookupReference(FormReferenceControl _formReferenceControl)
            {
                Common ret;
                LogisticsLocationSelectionLookup_Purch lookup;

                lookup = LogisticsLocationSelectionLookup_Purch::newParameters(_formReferenceControl);

                lookup.parmInventSiteId(inventDim.InventSiteId);
                lookup.parmInventLocationId(inventDim.InventLocationId);

                lookup.addRoleByType(LogisticsLocationRoleType::Delivery);
                lookup.parmReturnLocation(false);

                ret = lookup.performFormLookup();
                return ret;
            }

        }

        [DataField]
        class IntrastatCommodity 
        {
            public Common resolveReference(FormReferenceControl _formReferenceControl)
            {
                var intrastatCommodityController = IntrastatCommodityController::newFromItemAndCategory(PurchLine.ItemId, PurchLine.ProcurementCategory);

                return intrastatCommodityController.resolveReference(_formReferenceControl);
            }

            public Common lookupReference(FormReferenceControl _formReferenceControl)
            {
                var intrastatCommodityController = IntrastatCommodityController::newFromItemAndCategory(PurchLine.ItemId, PurchLine.ProcurementCategory);

                return intrastatCommodityController.lookupReference(_formReferenceControl);
            }

        }

        [DataField]
        class ItemId 
        {
            public void lookup(FormControl _formControl, str _filterStr)
            {
                if (isProductSearchLookupEnabled)
                {
                    EcoResProductSearchLookup::lookupProduct(_formControl as FormStringControl);
                }
                else
                {
                    InventLookup lookup = new InventLookup(_formControl, new Query(), formStr(InventItemIdLookupPurchase));
                    lookup.run();
                }
            }

            void  modified()
            {
                InventTable     inventTableLoc;

                super();

                purchLine_ds.resetPurchLineFieldsWhenItemIdModified();

                purchLine_ds.itemIdModified();

                element.enableLinePCActions();

                purchLine_ds.cacheCalculateMethod(tableMethodStr(PurchLine, itemName));
                purchLine_ds.enableDistributionTemplate();

                element.enableProjSalesPrice();

                element.setEditCommitmentLineAllowed(purchLine.ItemId || purchLine.ProcurementCategory);

                if (TaxIntegrationUtils::isTaxInformationEnabled() && purchLine.orig().ItemId != '')
                {
                    TransTaxInformation transTaxInformationLocal = TransTaxInformationHelper::findOrCreateTransTaxInformationByRecord(purchLine);
                    if (transTaxInformationLocal)
                    {
                        ttsbegin;
                        transTaxInformationLocal.selectForUpdate(true);
                        TransTaxInformationHelper::initFromInventItem(transTaxInformationLocal, purchLine.ItemId, VendTable::find(purchTable.OrderAccount));
                        transTaxInformationLocal.update();
                        ttscommit;
                    }
                }

                if (TaxParameters::checkTaxParameters_IN())
                {
                    if (PurchTable::find(purchLine.PurchId).purchTable_W().CustomsImportOrder_IN == NoYes::Yes)
                    {
                        //MRP defaulted from item is converted using Customs exchange rate for Import orders.
                        purchLine_IN.MaximumRetailPrice = CurrencyHelper_IN::customsCurAmount_IN(
                            purchLine_IN.CustomsMaxRetailPrice,
                            purchTable.CurrencyCode,
                            Direction_IN::Import,
                            DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                            false);
                    }
                }

                if (isRU)
                {
                    InventTable inventTable = InventTable::find(purchLine.ItemId);
                    purchLine_W.MarkupCode_RU = inventTable.isMarkupCodeEnabled_RU() ? inventTable.MarkupCode_RU : '';
                }

                if (BrazilParameters::isEnabled())
                {
                    if (purchLine.inventTable().ItemType != ItemType::Service)
                    {
                        purchLine.LedgerDimension = SalesPurchOperationType_BR::find(purchTable_BR.SalesPurchOperationType_BR).LedgerDimension;
                    }

                    purchLine.setCFOP_BR();

                    element.enableServiceFields_BR();
                }

                if (productFromLookup) // if there was product selected from the product lookup
                {
                    element.updateProductDimensions(InventDim::find(productFromLookup.InventDimId));
                    productFromLookup = null;
                }
            }

        }

        [DataField]
        class LedgerDimension 
        {
            public boolean validate()
            {
                PurchLineOrigin purchLineOrigin;
                boolean         ret;

                ret = super();
                if (ret && purchLine.LedgerDimension != purchLine.orig().LedgerDimension)
                {
                    select firstOnly RecId from purchLineOrigin
                        where purchLineOrigin.PurchLineInventTransId   == purchLine.InventTransId
                            && purchLineOrigin.PurchLineDataAreaId      == purchLine.DataAreaId
                            && purchLineOrigin.OriginSourceDocumentLine != 0;

                    if (purchLineOrigin.RecId)
                    {
                        ret = checkFailed("@SCM:PurchLineLedgerAccountNotEditable");
                    }
                }

                return ret;
            }

        }

        [DataField]
        class LineAmount 
        {
            void modified()
            {
                super();

                if (isRU)
                {
                    inventDim_ds.setRecord(purchLine.inventDimProfileRAsset_RU(inventDim));
                }

                purchLine_ds.active();
            }

        }

        [DataField]
        class LineDisc 
        {
            public void modified()
            {
                super();

                if (isRU)
                {
                    inventDim_ds.setRecord(purchLine.inventDimProfileRAsset_RU(inventDim));
                }
            }

        }

        [DataField]
        class LinePercent 
        {
            public void modified()
            {
                super();

                if (isRU)
                {
                    inventDim_ds.setRecord(purchLine.inventDimProfileRAsset_RU(inventDim));
                }
            }

        }

        [DataField]
        class MultiLnDisc 
        {
            public void modified()
            {
                super();

                if (isRU)
                {
                    inventDim_ds.setRecord(purchLine.inventDimProfileRAsset_RU(inventDim));
                }
            }

        }

        [DataField]
        class MultiLnPercent 
        {
            public void modified()
            {
                super();

                if (isRU)
                {
                    inventDim_ds.setRecord(purchLine.inventDimProfileRAsset_RU(inventDim));
                }
            }

        }

        [DataField]
        class Name 
        {
            public void modified()
            {
                super();
                // Do not default Name from category when modified.
                keepName = true;
            }

        }

        [DataField]
        class OverrideSalesTax 
        {
            public void modified()
            {
                super();
                PurchLine_ds.object(fieldNum(PurchLine, TaxGroup)).allowEdit(purchLine.OverrideSalesTax == NoYes::Yes);
                PurchLine_ds.object(fieldNum(PurchLine, TaxItemGroup)).allowEdit(purchLine.OverrideSalesTax == NoYes::Yes);
            }

        }

        [DataField]
        class PriceUnit 
        {
            void  modified()
            {
                super();

                if (isRU)
                {
                    inventDim_ds.setRecord(purchLine.inventDimProfileRAsset_RU(inventDim));
                }

                purchLine_ds.refresh();
            }

        }

        [DataField]
        class ProcurementCategory 
        {
            public Common resolveReference(FormReferenceControl _formReferenceControl)
            {
                return EcoResCategory::resolveCategoryHierarchyRole(
                    _formReferenceControl,
                    EcoResCategoryNamedHierarchyRole::Procurement);
            }

            public Common lookupReference(FormReferenceControl _formReferenceControl)
            {
                if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)) && purchTable.MatchingAgreement)
                {
                    return EcoResCategory::lookupCategoryHierarchyRole(
                        _formReferenceControl,
                        EcoResCategoryNamedHierarchyRole::Procurement,
                        false, true, true, null, 0, 0, 0, purchTable.MatchingAgreement);
                }
                else
                {
                    return EcoResCategory::lookupCategoryHierarchyRole(
                        _formReferenceControl,
                        EcoResCategoryNamedHierarchyRole::Procurement);
                }
            }

            public void modified()
            {
                PurchCategory               procurementCategory;
                ItemFreeTxt                 name;
                LedgerDimensionAccount      ledgerDimension;

                name                = purchLine.Name;

                procurementCategory = purchLine.ProcurementCategory;
                ledgerDimension     = purchLine.LedgerDimension;

                purchTableForm.resetPurchLine(purchLine);

                // Update GBR reference control UI after purchase line is reset.
                element.resetPurchaseLineBudgetReferenceControl();        

                purchLine.ProcurementCategory       = procurementCategory;
                purchLine.LedgerDimension           = ledgerDimension;

                super();

                // Name is defaulted from category in super(). So we revert to saved value, if needed.
                if (keepName)
                {
                    purchLine.Name  = name;
                }

                // Enabled/disable fields
                purchLine_ds.changedInventoriedStatus();

                element.enableLinePCActions();
                element.enableForeignTrade_RU();

                if (purchLine.isCategoryBased())
                {
                    if (purchTable.MatchingAgreement)
                    {
                        purchLine.salesPurchLineInterface().autoMatchAgreementLine(purchTable.MatchingAgreement);
                    }

                    if (purchLineForeignTradeCategory.PurchLineDataAreaId == '')
                    {
                        //Only create a new record if none exists
                        purchLineForeignTradeCategory_ds.allowCreate(true);
                        purchLineForeignTradeCategory_ds.create();
                        purchLineForeignTradeCategory_ds.allowEdit(true);
                        purchLineForeignTradeCategory_ds.allowCreate(false);
                    }
                }
                else
                {
                    purchLineForeignTradeCategory.clearFormFields();
                    purchLineForeignTradeCategory_ds.allowEdit(false);
                    purchLineForeignTradeCategory_ds.refresh();
                }

                purchLine.ProjLinePropertyId = ProjLinePropertySetup::findLinePropertyId(purchLine.ProjId, purchLine.ProjCategoryId);

                purchLine_ds.enableDistributionTemplate();

                element.enableProjSalesPrice();

                element.setEditCommitmentLineAllowed(purchLine.ItemId || purchLine.ProcurementCategory);
            }

            public boolean validate()
            {
                boolean ret;
                EcoResCategory  ecoResCategory;
                EcoResCategory  ecoResCategoryChildren;
                AgreementLine   agreementLineLocal;

                if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)) && purchTable.MatchingAgreement)
                {
                    select firstonly RecId from ecoResCategory
                        where ecoResCategory.RecId == purchLine.ProcurementCategory
                            join Category from agreementLineLocal
                            where ecoResCategory.RecId == agreementLineLocal.Category
                            && agreementLineLocal.Agreement == purchTable.MatchingAgreement;

                    if (!ecoResCategory.RecId)
                    {
                        select firstonly RecId from ecoResCategory
                            join Category from agreementLineLocal
                            where ecoResCategory.RecId == agreementLineLocal.Category
                            && agreementLineLocal.Agreement == purchTable.MatchingAgreement
                                exists join ParentCategory, RecId from ecoResCategoryChildren
                                where ecoResCategoryChildren.CategoryHierarchy == ecoResCategory.CategoryHierarchy
                                && (ecoResCategoryChildren.NestedSetLeft >= ecoResCategory.NestedSetLeft
                                && ecoResCategoryChildren.NestedSetRight <= ecoResCategory.NestedSetRight)
                                && (ecoResCategory.RecId == purchLine.ProcurementCategory || ecoResCategoryChildren.RecId == purchLine.ProcurementCategory);
                    }

                    if (ecoResCategory.RecId || ecoResCategoryChildren.RecId)
                    {
                        ret = super();
                    }
                    else
                    {
                        ret = false;
                    }
                }
                else
                {
                    ret = super();
                }

                return ret;
            }

        }

        [DataField]
        class ProjCategoryId 
        {
            public void modified()
            {
                super();
                purchLine_DS.updateDesignForProject();
                element.enableProjSalesPrice();
            }

        }

        [DataField]
        class ProjId 
        {
            public void modified()
            {
                // Modifies the project id of <c>PurchLine</c> related to item requirement based on the user input.
                SalesLine salesLineLoc = purchLine.salesLine();
                if (salesLineLoc && purchLine.ProjId && salesLineLoc.ProjId != purchLine.ProjId &&
                    purchLine.purchTable().isProjectSalesItemReqPO() && salesLineLoc.SalesType == SalesType::ItemReq)
                {
                    if (ProjParameters::find().SkipPOAndItemReqSync == NoYes::Yes)
                    {
                        purchLine.ProjId = purchLine.orig().ProjId;

                        checkFailed(strFmt("@Proj:ValidationOnProjectIDModification"));

                        return;
                    }
                    else
                    {
                        DialogButton projIdModificationConfirmed = Box::yesNo("@Proj:ConfirmationOnProjectIDModification", DialogButton::No);
                        if (!projIdModificationConfirmed)
                        {
                            purchLine.ProjId = purchLine.orig().ProjId;

                            return;
                        }
                    }
                }

                super();

                if (ProjInvoiceTable::isSalesCurrencyLocked(ProjTable::find(purchLine.ProjId).ProjInvoiceProjId))
                {
                    purchLine_ds.object(fieldNum(PurchLine, ProjSalesCurrencyId)).allowEdit(false);
                    purchLine_ds.object(fieldNum(PurchLine, ProjSalesCurrencyId)).skip(true);
                }
                else
                {
                    purchLine_ds.object(fieldNum(PurchLine, ProjSalesCurrencyId)).allowEdit(!purchLine.isInvoiceMatched());
                    purchLine_ds.object(fieldNum(PurchLine, ProjSalesCurrencyId)).skip(purchLine.isInvoiceMatched());
                }

                purchLine_ds.enableDistributionTemplate();

                element.enableLedgerDimensionDefaultAccount();
            }

        }

        [DataField]
        class ProjTransId 
        {
            public void jumpRef()
            {
                ProjItemTrans::jumpRefTransId(purchLine, element);
            }

        }

        [DataField]
        class ProjWorker 
        {
            public Common lookupReference(FormReferenceControl _formReferenceControl)
            {
                HcmWorkerLookup workerLookup;
                ProjParameters  projParameters = ProjParameters::find();
                boolean         includeTerminated = true;

                if (projParameters.ShowInactiveEmployees == NoYes::No)
                {
                    includeTerminated = false;
                }
                workerLookup = HcmWorkerLookup::newCustomOptions(
                    false, // includeEmployees
                    true, // includeContractors
                    true, // includeActive
                    false, // includePending
                    includeTerminated, // includeTerminated
                    true, // includeOnlyCurrentLegalEntity
                    true, // lock workerTypeFilters
                    true, // lock workerStatusFilters
                    true); // lock legalEntityFilters

                return workerLookup.lookupWorker(_formReferenceControl);
            }

        }

        [DataField]
        class PurchCommitmentLine_PSN 
        {
            /// <summary>
            /// Adds the 'View details' link to the commitment context menu.
            /// </summary>
            public void jumpRef()
            {
                PurchCommitmentHeader_PSN::jumpRefPurchCommitment(purchLine.PurchCommitmentLine_PSN);
            }

            public Common lookupReference(FormReferenceControl _formReferenceControl)
            {
                Common commitmentLookupTableBuffer;

                PurchCommitmentLineLookup_PSN   purchCommitmentLineLookupClass = PurchCommitmentLineLookup_PSN::construct(_formReferenceControl, purchLine);

                commitmentLookupTableBuffer = purchCommitmentLineLookupClass.performFormLookup();

                return commitmentLookupTableBuffer;
            }

        }

        [DataField]
        class PurchMarkup 
        {
            void modified()
            {
                super();

                purchLine_ds.refresh();
            }

        }

        [DataField]
        class PurchPrice 
        {
            void  modified()
            {
                super();

                if (isRU)
                {
                    inventDim_ds.setRecord(purchLine.inventDimProfileRAsset_RU(inventDim));
                }

                purchLine_ds.refresh();
            }

        }

        [DataField]
        class PurchQty 
        {
            void  modified()
            {
                TaxParameters   taxParametersLoc = TaxParameters::find();
                boolean         isCustomsEnabled = TaxParameters::isCustomsEnable_IN();
                boolean         isExciseEnabled  = TaxParameters::isExciseEnable_IN();
                super();

                purchLine.purchQtyModifiedInteraction(inventDim);

                purchLine.InventDimId = InventDim::findOrCreate(inventDim).InventDimId;
                purchLine.modifyWMSLocation(inventDim, false, InventDirection::Receipt, InventDirection::Receipt);

                interCompanyIsPriceDiscSearchNeeded = purchLine.RecId;

                element.checkCreditNoteLine();

                if (isCustomsEnabled || isExciseEnabled)
                {
                    element.enableFieldsActive_IN();

                    if (TaxParameters::find().EximIncentiveSchemes_IN
                        && purchLine.PurchQty < 0)
                    {
                        eximPurchLine_IN.EximPorts                  = 0;
                        eximPurchLine_IN.EximIncentiveSchemeGroup   = 0;
                        eximPurchLine_IN.EximProductGroupTable      = 0;
                        eximPurchLine_IN.ApplyDEPB            = NoYes::No;
                        eximPurchLine_IN_ds.refresh();
                    }

                    element.setEximFieldsAccess_IN();
                }

                 if (PublicSectorUtils::isBudgetReservationEnabled() && purchLine.PurchQty < 0)
                 {
                     purchTableForm.enableBudgetReservationFields(purchLine);
                 }
                 
                purchLine_ds.refresh();

            }

        }

        [DataField]
        class PurchUnit 
        {
            void  modified()
            {
                super();

                PurchLine::modifyPurchQty(purchLine, inventDim, !purchLine.MatchingAgreementLine);
                interCompanyIsPriceDiscSearchNeeded = purchLine.RecId;

                purchLine_ds.refresh();
            }

        }

        [DataField]
        class ReturnActionId 
        {
            void  modified()
            {
                super();
                purchLine.returnActionChanged(inventDim);
                purchLine_ds.refresh();
            }

        }

        [DataField]
        class Tax1099Amount 
        {
            public boolean validate()
            {
                boolean ret;

                ret = super();

                if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)) && ret && purchLine.Tax1099Amount == 0.0 && tax1099BoxDetail.Tax1099PropertyOrServices == NoYes::No)
                {
                    ret = checkFailed(strFmt("@SPS1165","@SYS23907", "@SPS1100"));
                }

                return ret;
            }

        }

        [DataField]
        class Tax1099Fields 
        {
            public boolean validate()
            {
                boolean ret;

                ret = super();

                if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)) && purchLine.Tax1099Amount != 0.0 && !purchLine.Tax1099Fields)
                {
                    ret = checkFailed(strFmt("@SYS86315", "@SYS23885"));
                }

                return ret;
            }

            public void modified()
            {
                super();

                if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
                {
                    element.setAllowEdit1099GFields();
                    element.setAllowEdit1099SFields();

                    Tax1099BoxDetail::deleteOrClear1099Detail(Tax1099Fields::find(purchLine.Tax1099Fields).Tax1099Box, tax1099BoxDetail.RecId);
                    tax1099BoxDetail_ds.executeQuery();
                }
            }

        }

        [DataField]
        class TaxGroup 
        {
            public void modified()
            {
                PurchLine purchLineOrig = purchLine.orig();

                super();

                if (isRU)
                {
                    inventDim_ds.setRecord(purchLine.inventDimProfileRAsset_RU(inventDim));
                }

                if (purchLine.TaxGroup != purchLineOrig.TaxGroup)
                {
                    TaxApplicabilityChangedTelemetry::writeUpdateEvent(
                        tableId2Name(purchLine.TableId), TaxApplicabilityChangedTelemetry::TaxGroup, purchTable.RecId, purchLine.RecId);
                }
            }

        }

        [DataField]
        class TaxItemGroup 
        {
            public void modified()
            {
                PurchLine purchLineOrig = purchLine.orig();

                super();

                if (isRU)
                {
                    inventDim_ds.setRecord(purchLine.inventDimProfileRAsset_RU(inventDim));
                }

                if (purchLine.TaxItemGroup != purchLineOrig.TaxItemGroup)
                {
                    TaxApplicabilityChangedTelemetry::writeUpdateEvent(
                        tableId2Name(purchLine.TableId), TaxApplicabilityChangedTelemetry::TaxItemGroup, purchTable.RecId, purchLine.RecId);
                }
            }

        }

        [DataField]
        class TaxServiceCode_BR 
        {
            public void lookup(FormControl _formControl, str _filterStr)
            {
                NoYes                   serviceCodeOnDlvAddress;
                LogisticsPostalAddress  logisticsPostalAddress;

                serviceCodeOnDlvAddress = purchTable_BR.ServiceCodeOnDlvAddress_BR;
                logisticsPostalAddress = LogisticsLocationEntity::location2PostalAddress(purchLine.deliveryLocation());

                TaxServiceCode_BR::lookup(_formControl, serviceCodeOnDlvAddress,
                                          logisticsPostalAddress.CountryRegionId,
                                          logisticsPostalAddress.State,
                                          logisticsPostalAddress.City);
            }

        }

        [DataField]
        class VariantId 
        {
            /// <summary>
            /// Variant ID - Jump Ref
            /// </summary>
            public void jumpRef()
            {
                Args args = new Args();

                args.caller(element);
                args.record(InventTable::find(purchLine.ItemId));
                args.lookupRecord(EcoResDistinctProductVariant::find(InventDimCombination::findVariantId(purchLine.VariantId).DistinctProductVariant));

                new MenuFunction(menuitemDisplayStr(EcoResProductVariantsAction), MenuItemType::Display).run(args);
            }

            /// <summary>
            /// Variant ID - Modified
            /// </summary>
            public void modified()
            {
                super();

                InventDim variantInventDim = InventDimCombination::findVariantId(purchLine.VariantId).inventDim();
				if (variantInventDim)
                {
                    element.updateProductDimensions(variantInventDim);
                }
            }

            /// <summary>
            /// Variant ID - Lookup
            /// </summary>
            /// <param name="_formControl">
            /// Form String Control
            /// </param>
            /// <param name="_filterStr">
            /// Filter String
            /// </param>
            public void lookup(FormControl _formControl, str _filterStr)
            {
                PurchLine::lookupRetailVariantId(_formControl, purchLine.ItemId);
            }

        }

        [DataField]
        class VendAccount 
        {
            public void modified()
            {
                super();

                if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
                {
                    purchLine_ds.refresh();
                }
            }

        }

    }

    [DataSource]
    class PurchLineForeignTradeCategory
    {
        public int active()
        {
            int     ret;
            boolean allowEditLine;

            ret = super();

            if (purchLine.isCategoryBased())
            {
                allowEditLine = purchTableForm.editLineAllowed(purchLine);
                purchLineForeignTradeCategory_ds.allowEdit(allowEditLine);
            }
            else
            {
                purchLineForeignTradeCategory_ds.allowEdit(false);
            }

            return ret;
        }

        public boolean validateWrite()
        {
            boolean ret = true;

            if (purchLine.RecId && purchLine.isCategoryBased())
            {
                ret = super();
            }

            return ret;
        }

        public void write()
        {
            boolean             isPurchLineResearch;
            PurchTableVersion   purchTableVersion;

            if (purchLine.RecId && purchLine.isCategoryBased())
            {
                if (!purchTable.ChangeRequestRequired && purchTable.DocumentState == VersioningDocumentState::Confirmed)
                {
                    purchTableVersion = PurchTableVersion::findLatest(purchTable.PurchId, purchTable.DataAreaId);
                    if (purchTableVersion && purchTableVersion.IsArchived == NoYes::No)
                    {
                        isPurchLineResearch = true;
                    }
                }

                super();

                if (isPurchLineResearch)
                {
                    purchLine_ds.research(true);
                }
            }
        }

        public void create(boolean _append = false)
        {
            if (purchLine.isCategoryBased())
            {
                super(_append);
            }
        }

        public void init()
        {
            super();

            this.query().dataSourceTable(this.table()).addRange(fieldNum(PurchLineForeignTradeCategory, IsDeleted)).value(queryValue(NoYes::No));
        }

    }

    [DataSource]
    class InventDim
    {
        public void write()
        {
        //    super();
        }

        void initValue()
        {
            purchLine_ds.initInventDim();

            super();
        }

        display FiscalEstablishmentId_BR FiscalEstablishment()
        {
            return inventDim.inventSite().fiscalEstablishment().FiscalEstablishmentId;
        }

        public void modifyCustomInventDimension(FieldId _fieldId)
        {
            if (InventDim::isFieldIdProductDimension(_fieldId))
            {
                element.modifyInventDimField(_fieldId);
                element.performUpdatePostProductDimensionChange();
            }
            else if (InventDim::isFieldIdTrackingDimension(_fieldId))
            {
                purchLine.modifyInventDim(inventDim, _fieldId, !purchLine.MatchingAgreementLine);
            }
        }

        [DataField]
        class configId 
        {
            public void modified()
            {
                super();

                element.modifyInventDimField(fieldNum(InventDim, ConfigId));
                element.performUpdatePostProductDimensionChange();
            }

            public void lookup(FormControl _formControl, str _filterStr)
            {
                if (!EcoResProductMasterConfigurationMgr::configure(  _formControl,
                                                                    purchLine.ItemId,
                                                                    InventDim::findOrCreate(inventDim).InventDimId,
                                                                    purchLine.deliveryDate(),
                                                                    purchLine.ItemBOMId,
                                                                    purchLine.QtyOrdered))
                {
                    super(_formControl, _filterStr);
                }
            }

            public boolean validate()
            {
                boolean ret;

                ret = super();

                if (ret)
                {
                    ret = purchLine.validateModifyInventDim(inventDim,fieldNum(InventDim,ConfigId));
                }

                return ret;
            }

        }

        [DataField]
        class inventBatchId 
        {
            public boolean validate()
            {
                boolean ret;

                ret = super();

                if (ret)
                {
                    ret = purchLine.validateModifyInventDim(inventDim, fieldNum(InventDim, InventBatchId));
                }

                return ret;
            }

            public void modified()
            {
                super();

                purchLine.modifyInventDim(inventDim, fieldNum(InventDim, InventBatchId), element.mustResetPriceOnInventBatchModified());
            }

        }

        [DataField]
        class InventColorId 
        {
            public void modified()
            {
                super();

                element.modifyInventDimField(fieldNum(InventDim, InventColorId));
                element.performUpdatePostProductDimensionChange();
            }

            public boolean validate()
            {
                boolean ret;

                ret = super();

                if (ret)
                {
                    ret = purchLine.validateModifyInventDim(inventDim,fieldNum(InventDim,InventColorId));
                }

                return ret;
            }

        }

        [DataField]
        class InventDimension1 
        {
            public void modified()
            {
                super();

                InventDim_ds.modifyCustomInventDimension(fieldnum(InventDim, InventDimension1));
            }

            public boolean validate()
            {
                return super() && purchLine.validateModifyInventDim(inventDim, fieldNum(InventDim, InventDimension1));
            }

        }

        [DataField]
        class InventDimension10 
        {
            public void modified()
            {
                super();

                InventDim_ds.modifyCustomInventDimension(fieldNum(InventDim, InventDimension10));
            }

            public boolean validate()
            {
                return super() && purchLine.validateModifyInventDim(inventDim, fieldNum(InventDim, InventDimension10));
            }

        }

        [DataField]
        class InventDimension11 
        {
            public void modified()
            {
                super();

                InventDim_ds.modifyCustomInventDimension(fieldNum(InventDim, InventDimension11));
            }

            public boolean validate()
            {
                return super() && purchLine.validateModifyInventDim(inventDim, fieldNum(InventDim, InventDimension11));
            }

        }

        [DataField]
        class InventDimension12 
        {
            public void modified()
            {
                super();

                InventDim_ds.modifyCustomInventDimension(fieldNum(InventDim, InventDimension12));
            }

            public boolean validate()
            {
                return super() && purchLine.validateModifyInventDim(inventDim, fieldNum(InventDim, InventDimension12));
            }

        }

        [DataField]
        class InventDimension2 
        {
            public void modified()
            {
                super();

                InventDim_ds.modifyCustomInventDimension(fieldNum(InventDim, InventDimension2));
            }

            public boolean validate()
            {
                return super() && purchLine.validateModifyInventDim(inventDim, fieldNum(InventDim, InventDimension2));
            }

        }

        [DataField]
        class InventDimension3 
        {
            public void modified()
            {
                super();

                InventDim_ds.modifyCustomInventDimension(fieldNum(InventDim, InventDimension3));
            }

            public boolean validate()
            {
                return super() && purchLine.validateModifyInventDim(inventDim, fieldNum(InventDim, InventDimension3));
            }

        }

        [DataField]
        class InventDimension4 
        {
            public void modified()
            {
                super();

                InventDim_ds.modifyCustomInventDimension(fieldNum(InventDim, InventDimension4));
            }

            public boolean validate()
            {
                return super() && purchLine.validateModifyInventDim(inventDim, fieldNum(InventDim, InventDimension4));
            }

        }

        [DataField]
        class InventDimension5 
        {
            public void modified()
            {
                super();

                InventDim_ds.modifyCustomInventDimension(fieldNum(InventDim, InventDimension5));
            }

            public boolean validate()
            {
                return super() && purchLine.validateModifyInventDim(inventDim, fieldNum(InventDim, InventDimension5));
            }

        }

        [DataField]
        class InventDimension6 
        {
            public void modified()
            {
                super();

                InventDim_ds.modifyCustomInventDimension(fieldNum(InventDim, InventDimension6));
            }

            public boolean validate()
            {
                return super() && purchLine.validateModifyInventDim(inventDim, fieldNum(InventDim, InventDimension6));
            }

        }

        [DataField]
        class InventDimension7 
        {
            public void modified()
            {
                super();

                InventDim_ds.modifyCustomInventDimension(fieldNum(InventDim, InventDimension7));
            }

            public boolean validate()
            {
                return super() && purchLine.validateModifyInventDim(inventDim, fieldNum(InventDim, InventDimension7));
            }

        }

        [DataField]
        class InventDimension8 
        {
            public void modified()
            {
                super();

                InventDim_ds.modifyCustomInventDimension(fieldNum(InventDim, InventDimension8));
            }

            public boolean validate()
            {
                return super() && purchLine.validateModifyInventDim(inventDim, fieldNum(InventDim, InventDimension8));
            }

        }

        [DataField]
        class InventDimension9 
        {
            public void modified()
            {
                super();

                InventDim_ds.modifyCustomInventDimension(fieldNum(InventDim, InventDimension9));
            }

            public boolean validate()
            {
                return super() && purchLine.validateModifyInventDim(inventDim, fieldNum(InventDim, InventDimension9));
            }

        }

        [DataField]
        class InventGtdId_RU 
        {
            public void modified()
            {
                super();

                purchLine.modifyInventDim(inventDim,
                                          fieldNum(InventDim, InventGtdId_RU));
            }

            public boolean validate()
            {
                boolean ret = super();

                if (ret)
                {
                    ret = purchLine.validateModifyInventDim(inventDim,
                                                            fieldNum(InventDim, InventGtdId_RU));
                }

                return ret;
            }

        }

        [DataField]
        class InventLocationId 
        {
            public void modified()
            {
                super();

                if (inventDim.orig().InventSiteId != inventDim.InventSiteId)
                {
                    element.modifyInventDimField(fieldNum(InventDim, InventSiteId));
                }

                element.modifyInventDimField(fieldNum(InventDim, InventLocationId));                

                purchLine.setAddressFromInventDim(inventDim);
                purchLine_ds.rereadReferenceDataSources();
                purchLine_ds.refresh();
				
				// <GIN>
                if (TaxParameters::checkTaxParameters_IN() || TaxWithholdParameters_IN::checkTaxParameters())
                {
                    purchLine_IN_ds.refresh();
                }
                // </GIN>
            }

            public boolean validate()
            {
                boolean ret;
                RetailStoreTable                    rboStoreTable;
                RetailChannelTable                  retailChannelTable;
                RetailChannelAssortedProductView    retailChannelAssortedProductView;
                InventTable                         inventTable;

                ret = super();

                if (ret)
                {
                    ret = purchLine.validateModifyInventDim(inventDim,fieldNum(InventDim,InventLocationId));
                }

                if (isConfigurationkeyEnabled(configurationKeyNum(Retail))
                    && ret)
                {
                    select firstonly InventLocation, RecId, PoItemFilter, StoreNumber from rboStoreTable where
                        rboStoreTable.InventLocation == inventDim.InventLocationId;

                    if (rboStoreTable.RecId && rboStoreTable.PoItemFilter == true)
                    {
                        select firstonly RecId
                            from retailChannelTable
                                where retailChannelTable.RecId == rboStoreTable.RecId
                            join omOperatingUnitId, ProductID, InventLocationDataAreaId from retailChannelAssortedProductView
                                where retailChannelAssortedProductView.omOperatingUnitId == retailChannelTable.omOperatingUnitID
                            join ItemId, Product, DataAreaId from inventTable
                                where inventTable.Product == retailChannelAssortedProductView.ProductID &&
                                inventTable.DataAreaId == retailChannelAssortedProductView.InventLocationDataAreaId &&
                                inventTable.DataAreaId == purchLine.DataAreaId &&
                                inventTable.ItemId == purchLine.ItemId;

                        if (!retailChannelTable)
                        {
                            return checkFailed(strFmt("@RET4631", purchLine.ItemId, rboStoreTable.StoreNumber));
                        }
                    }
                }
                return ret;
            }

        }

        [DataField]
        class InventOwnerId_RU 
        {
            public boolean validate()
            {
                boolean ret;

                ret = super();

                if (ret)
                {
                    ret = purchLine.validateModifyInventDim(inventDim, fieldNum(InventDim, InventOwnerId_RU));
                }

                return ret;
            }

            public void modified()
            {
                super();

                purchLine.modifyInventDim(inventDim,
                                        fieldNum(InventDim, InventOwnerId_RU));
            }

        }

        [DataField]
        class InventProfileId_RU 
        {
            public void modified()
            {
                super();

                purchLine.modifyInventDim(inventDim, fieldNum(InventDim, InventProfileId_RU));
            }

            public boolean validate()
            {
                boolean ret;

                ret = super();

                if (ret)
                {
                    ret = purchLine.validateModifyInventDim(inventDim, fieldNum(InventDim, InventProfileId_RU));
                }

                return ret;
            }

        }

        [DataField]
        class inventSerialId 
        {
            public void modified()
            {
                super();

                purchLine.modifyInventDim(inventDim,fieldNum(InventDim,InventSerialId), !purchLine.MatchingAgreementLine);
            }

            public boolean validate()
            {
                boolean ret;

                ret = super();

                if (ret)
                {
                    ret = purchLine.validateModifyInventDim(inventDim,fieldNum(InventDim,InventSerialId));
                }

                return ret;
            }

        }

        [DataField]
        class InventSiteId 
        {
            public boolean validate()
            {
                boolean ret;

                ret = super();

                if (ret)
                {
                    ret = purchLine.validateModifyInventDim(inventDim,fieldNum(InventDim,InventSiteId));
                }

                return ret;
            }

            public void modified()
            {
                super();

                element.modifyInventDimField(fieldNum(InventDim, InventSiteId));

                purchLine.setAddressFromInventDim(inventDim);
                purchLine_ds.rereadReferenceDataSources();
                purchLine_ds.refresh();
				
				// <GIN>
                if (TaxParameters::checkTaxParameters_IN() || TaxWithholdParameters_IN::checkTaxParameters())
                {
                    purchLine_IN_ds.refresh();
                }
                // </GIN>
            }

        }

        [DataField]
        class InventSizeId 
        {
            public void modified()
            {
                super();

                element.modifyInventDimField(fieldNum(InventDim, InventSizeId));
                element.performUpdatePostProductDimensionChange();
            }

            public boolean validate()
            {
                boolean ret;

                ret = super();

                if (ret)
                {
                    ret = purchLine.validateModifyInventDim(inventDim,fieldNum(InventDim,InventSizeId));
                }

                return ret;
            }

        }

        [DataField]
        class InventStatusId 
        {
            public boolean validate()
            {
                boolean ret;

                ret = super();

                if (ret)
                {
                    ret = purchLine.validateModifyInventDim(inventDim,fieldNum(InventDim, InventStatusId));
                }

                return ret;
            }

            public void modified()
            {
                super();

                purchLine.modifyInventDim(inventDim,fieldNum(InventDim, InventStatusId), !purchLine.MatchingAgreementLine);
            }

        }

        [DataField]
        class InventStyleId 
        {
            public void modified()
            {
                super();

                element.modifyInventDimField(fieldNum(InventDim, InventStyleId));
                element.performUpdatePostProductDimensionChange();
            }

            public boolean validate()
            {
                boolean ret;

                ret = super();

                if (ret)
                {
                    ret = purchLine.validateModifyInventDim(inventDim,fieldNum(InventDim,InventStyleId));
                }

                return ret;
            }

        }

        [DataField]
        class InventVersionId 
        {
            public void modified()
            {
                super();

                element.modifyInventDimField(fieldNum(InventDim, InventVersionId));
                element.performUpdatePostProductDimensionChange();
            }

            public boolean validate()
            {
                boolean ret;

                ret = super();

                if (ret)
                {
                    ret = purchLine.validateModifyInventDim(inventDim,fieldNum(InventDim, InventVersionId));
                }

                return ret;
            }

        }

        [DataField]
        class wMSLocationId 
        {
            public void modified()
            {
                super();

                purchLine.modifyInventDim(inventDim,fieldNum(InventDim,wmsLocationId), !purchLine.MatchingAgreementLine);
            }

            public boolean validate()
            {
                boolean ret;

                ret = super();

                if (ret)
                {
                    ret = purchLine.validateModifyInventDim(inventDim,fieldNum(InventDim,wmsLocationId));
                }

                return ret;
            }

        }

    }

    [DataSource]
    class PDSAdvancedPriceInfo
    {
        public void init()
        {
            if (!#PDSPotencyEnabled)
            {
                pdsAdvancedPriceInfo_DS.joinSource(null);
                pdsAdvancedPriceInfo_DS.linkType(QueryDataLinkType::None);
            }
            super();
        }

        public void write()
        {
            //super();
        }

    }

    [DataSource]
    class PurchTable_BR
    {
        public void init()
        {
            if (isPurchTableEnabled_BR)
            {
                this.linkType(FormLinkType::OuterJoin);
            }
            super();
        }

        [DataField]
        class CFPSId_BR 
        {
            public void lookup(FormControl _formControl, str _filterStr)
            {
                CFPSTable_BR::lookup(_formControl, SalesPurchBoth_BR::Purch);
            }

        }

        [DataField]
        class SalesPurchOperationType_BR 
        {
            public boolean validate()
            {
                CFOPAttributesDeterminer_BR cfopAttributesDeterminer;
                boolean                     ret;

                cfopAttributesDeterminer = CFOPAttributesDeterminer_BR::construct(purchLine);

                ret = salesPurchOperationTypeController_BR.validate(purchTable_BR.SalesPurchOperationType_BR, cfopAttributesDeterminer);

                if (ret && !purchTable.createInventTrans_BR())
                {
                    if (Box::yesNo("@GLS104", DialogButton::No) == DialogButton::No)
                    {
                        return false;
                    }
                }

                return super() && ret;
            }

            public Common lookupReference(FormReferenceControl _formReferenceControl)
            {
                CFOPAttributesDeterminer_BR cfopAttributesDeterminer;
                SalesPurchOperationTypeController_BR s;

                GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceBR00007, funcName());
                cfopAttributesDeterminer = CFOPAttributesDeterminer_BR::construct(purchLine);
                s = new SalesPurchOperationTypeController_BR (element.name());
                return s.lookupReference(_formReferenceControl, cfopAttributesDeterminer);
            }

        }

    }

    [DataSource]
    class RetailPackagePurch
    {
        /// <summary>
        /// Retail Package Purch - Delete
        /// </summary>
        public void delete()
        {
            super();

            purchTable_ds.reread();
            purchTable_ds.reReadLines();
        }

        [DataField]
        class Qty 
        {
            /// <summary>
            /// Retail Package Purchase - Qty - Modified
            /// </summary>
            public void modified()
            {
                super();

                purchTable_ds.reReadLines();
            }

        }

        [DataField]
        class QtyReceived 
        {
            /// <summary>
            /// Retail Package Purch - Qty Received - Modified
            /// </summary>
            public void modified()
            {
                super();

                purchTable_ds.reReadLines();
            }

        }

    }

    [DataSource]
    class RetailSumLines
    {
        /// <summary>
        /// Retail Sum Lines - Write
        /// </summary>
        public void write()
        {
            super();

            purchLine_ds.refresh();
            purchLine_ds.research();
            purchLine_ds.active();
        }

        /// <summary>
        /// Retail Sum LInes - Active
        /// </summary>
        /// <returns>
        /// boolean
        /// </returns>
        public int active()
        {
            int ret;

            ret = super();

            this.inventLocationIdActive();

            return ret;
        }

        /// <summary>
        /// Retail Sum Lines - Invent Location ID active
        /// </summary>
        void inventLocationIdActive()
        {
            InventDimGroupFieldSetup inventDimGroupFieldSetup = InventDimGroupSetup::newItemId(retailSumLines.ItemId).getFieldSetup(fieldNum(InventDim,InventLocationId));

            fshSumLines_InventLocationId.allowEdit(inventDimGroupFieldSetup.isActive());
        }

        /// <summary>
        /// Retail Sum Lines - Initilize Value
        /// </summary>
        public void initValue()
        {
            super();

            retailSumlines.InventLocationId = purchTable.InventLocationId;
        }

        [DataField]
        class ItemId 
        {
            /// <summary>
            /// Retail Sum Lines - Item ID - Modified
            /// </summary>
            public void modified()
            {
                retailSumLines_DS.inventLocationIdActive();

                super();
            }

        }

    }

    [DataSource]
    class EximPurchLine_IN
    {
        int prev()
        {
            int ret;

            ret = purchLine_ds.prev();

            return ret;
        }

        int next()
        {
            int ret;

            ret = purchLine_ds.next();

            return ret;
        }

        int last()
        {
            int ret;

            ret = purchLine_ds.last();

            return ret;
        }

        int first()
        {
            int ret;

            ret = purchLine_ds.first();

            return ret;
        }

        public void create(boolean _append = false)
        {
            purchLine_ds.create();
        }

        [DataField]
        class EximIncentiveSchemeGroup 
        {
            public void modified()
            {
                super();

                if (eximPurchLine_IN.EximIncentiveSchemeGroup)
                {
                    eximPurchLine_IN.EximPorts = EximIncentiveSchemeGroup_IN::find(eximPurchLine_IN.EximIncentiveSchemeGroup).EximPortId;
                }

                eximPurchLine_IN_ds.object(fieldNum(EximPurchLine_IN, ApplyDEPB)).allowEdit(element.enableApplyDEPB_IN());
                eximPurchLine_IN_ds.rereadReferenceDataSources();
            }

        }

    }

    [DataSource]
    class Tax1099BoxDetail
    {
        public void write(boolean _tax1099DetailRequired = false)
        {
            Tax1099Fields tax1099Fields;

            if (_tax1099DetailRequired)
            {
                //Called as a child record for PurchLine
                super();
                tax1099Fields = Tax1099Fields::find(purchLine.Tax1099Fields);

                if (tax1099Fields.Tax1099Box == Tax1099G::incomeTaxRefundsCreditsOffsets().tax1099Box)
                {
                    if (tax1099BoxDetail.Tax1099TaxYear > year(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
                        && tax1099BoxDetail.Tax1099TaxYear < (year(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())) + Tax1099Constants::Tax1099TaxYear_MaxNumOfYearsInPast))
                    {
                        warning("@SPS2");
                    }
                }
            }
            else if (purchLine.validateWrite())
            {
                purchline_ds.write();
            }
        }

        public boolean validateWrite()
        {
            boolean         isValid;
            Tax1099Fields   tax1099Fields;

            isValid = super();
            tax1099Fields = Tax1099Fields::find(purchLine.Tax1099Fields);

            if (isValid)
            {
                if (isValid && tax1099Fields.Tax1099Box == Tax1099G::unemploymentCompensation().tax1099Box)
                {
                    if ((abs(tax1099BoxDetail.Tax1099StateTaxWithheld) > abs(purchLine.Tax1099Amount)))
                    {
                        isValid = checkFailed("@SPS1943");
                    }
                }

                if (tax1099Fields.Tax1099Box == Tax1099S::grossProceeds().tax1099Box)
                {
                    if ((tax1099BoxDetail.Tax1099DateOfClosing == dateNull()) || (tax1099BoxDetail.Tax1099AddressorLegalDesc == ""))
                    {
                        isValid = checkFailed("@SPS3");
                    }
                }
                else if (tax1099Fields.Tax1099Box == Tax1099G::incomeTaxRefundsCreditsOffsets().tax1099Box)
                {
                    if ((tax1099BoxDetail.Tax1099TaxYear < (year(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))- Tax1099Constants::Tax1099TaxYear_MaxNumOfYearsInPast))
                        || (tax1099BoxDetail.Tax1099TaxYear > (year(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())) + Tax1099Constants::Tax1099TaxYear_MaxNumOfYearsInFuture)))
                    {
                        isValid = checkFailed(strFmt(
                            "@SPS17",
                            "@SPS1064",
                            int2str(year(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())) - Tax1099Constants::Tax1099TaxYear_MaxNumOfYearsInPast),
                            int2str(year(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())) + Tax1099Constants::Tax1099TaxYear_MaxNumOfYearsInFuture)));
                    }
                }
            }

            return isValid;
        }

        [DataField]
        class State 
        {
            public void modified()
            {
                super();

                tax1099BoxDetail.Tax1099StateTaxID = VendStateTaxID::findByVendState(purchTable.InvoiceAccount,tax1099BoxDetail.State).StateTaxID;
            }

            public void lookup(FormControl _formControl, str _filterStr)
            {
                Tax1099BoxDetail::lookupTax1099State(_formControl, purchTable.InvoiceAccount);
            }

            public void jumpRef()
            {
                Tax1099BoxDetail::jumpRefTax1099State(purchTable.InvoiceAccount,tax1099BoxDetail.State);
            }

        }

    }

    [DataSource]
    class RAssetPurchTrans
    {
        public int active()
        {
            int ret = super();

            rassetpurchTrans_ds.allowDelete(rAssetPurchTrans.Posted ?
                                            false :
                                            purchTableForm.editLineAllowed(purchLine) && (element.allowEditAsset_RU() || purchLine.ProcurementCategory));

            return ret;
        }

        public void write()
        {
            super();
            purchTable_ds.reread();
            purchTable_ds.refresh();
            purchTable_ds.selectionChanged();
        }

        public void delete()
        {
            super();
            purchTable_ds.reread();
            purchTable_ds.refresh();
            purchTable_ds.selectionChanged();
        }

        public void initValue()
        {
            super();

            rAssetPurchTrans.initFromPurchLine(purchLine);
        }

        public void linkActive()
        {
            boolean allowEdit;

            super();

            allowEdit = purchTableForm.editLineAllowed(purchLine) && (element.allowEditAsset_RU() || purchLine.ProcurementCategory);

            rassetpurchTrans_ds.allowEdit(allowEdit);
            rassetpurchTrans_ds.allowCreate(allowEdit);
        }

    }

    [DataSource]
    class PurchLine_IN
    {
        public int active()
        {
            int ret;

            ret = super();

            if (ret)
            {
                purchLine_IN_ds.rereadReferenceDataSources();
            }

            return ret;
        }

        public void write()
        {
            if (purchLine.RecId)
            {
                purchLine.updatePurchLine_IN();
            }

            super();
        }

        public boolean leaveRecord(boolean _forceUpdate = false)
        {
            boolean ret;

            if (purchLine_IN.PurchLine)
            {
                ret = super(_forceUpdate);
            }
            else
            {
                ret = true;
            }

            return ret;
        }

        public boolean validateWrite()
        {
            boolean ret = true;

            if (purchLine_IN.PurchLine)
            {
                ret = super();
            }

            return ret;
        }

        public void init()
        {
            if (isPurchLine_INEnabled)
            {
                this.linkType(FormLinkType::OuterJoin);
            }
            super();
        }

        [DataField]
        class TCSGroup 
        {
            public void lookup(FormControl _formControl, str _filterStr)
            {
                TaxWithholdGroupHeading::lookupTaxGroupWithPurchLine_IN(
                    _formControl,
                    TaxWithholdCodeType_IN::TCS,
                    purchLine);
            }

            public void modified()
            {
                super();
                element.setTaxWithholdEnabled_IN();
            }

        }

        [DataField]
        class TDSGroup 
        {
            public void lookup(FormControl _formControl, str _filterStr)
            {
                TaxWithholdGroupHeading::lookupTaxGroupWithPurchLine_IN(
                    _formControl,
                    TaxWithholdCodeType_IN::TDS,
                    purchLine);
            }

            public void modified()
            {
                super();
                element.setTaxWithholdEnabled_IN();
            }

        }

    }

    [DataSource]
    class PurchLine_W
    {
        public void write()
        {
            super();
            if (isIsoMY)
            {
                if (purchTable.hasLinesWithoutRefrence_MY() && purchTable.hasLinesWithRefrence_MY())
                {
                    if (!isWrnPrintedMY)
                    {
                        warning("@SYP4860678");
                        isWrnPrintedMY = true;
                    }
                }
                else
                {
                    isWrnPrintedMY = false;
                }
            }
        }

        public boolean validateWrite()
        {
            boolean ret;

            if (purchLine_W.PurchLine)
            {
                ret = super();
            }
            else
            {
                ret = true;
            }
			
			// <GMY>
            if (ret && isIsoMY)
            {
                if (purchLine_W.RefInvoiceId_MY && purchLine_W.RefInvoiceDate_MY)
                {
                    if (!VendInvoiceJour::existByInvoiceIdTransDate(purchLine_W.RefInvoiceId_MY, purchLine_W.RefInvoiceDate_MY))
                    {
                        ret = checkFailed("@SYP4860680");
                    }
                }
                else if ((purchLine_W.RefInvoiceId_MY && !purchLine_W.RefInvoiceDate_MY) || (!purchLine_W.RefInvoiceId_MY && purchLine_W.RefInvoiceDate_MY))
                {
                    ret = checkFailed("@SYP4860689");
                }
            }
            // <GMY>

            return ret;
        }

        public void init()
        {
            if (isPurchLine_WEnabled)
            {
                this.linkType(FormLinkType::OuterJoin);
            }
            super();
        }

        [DataField]
        class CountryRegionName_RU 
        {
            public void lookup(FormControl _formControl, str _filterStr)
            {
                PurchLine::lookupCountryRegionName_RU(_formControl, purchTable.LanguageId);
            }

        }

        [DataField]
        class MarkupCode_RU 
        {
            public void modified()
            {
                super();
                element.enableLedgerDimensionDefaultAccount();
            }

            public void lookup(FormControl _formControl, str _filterStr)
            {
                MarkupTable::serviceMarkupCodeLookup_RU(_formControl);
            }

        }

    }

    [DataSource]
    class PurchTable_W
    {
        public void init()
        {
            if (isPurchTableEnabled_W)
            {
                this.linkType(FormLinkType::OuterJoin);
            }
            super();
        }

        [DataField]
        class InvoicePostalAddress_TH 
        {
            public Common lookupReference(FormReferenceControl _formReferenceControl)
            {
                Common      ret;
                VendTable   vendTable = VendTable::find(purchTable.InvoiceAccount);

                ret = LogisticsLocationSelectionLookup::lookupAddressForm(_formReferenceControl, vendTable, [LogisticsLocationRoleType::Invoice], false);
                return ret;
            }

        }

        [DataField]
        class TCSGroup_IN 
        {
            public void modified()
            {
                super();
                element.setTaxWithholdEnabled_IN();
            }

            public void lookup(FormControl _formControl, str _filterStr)
            {
                TaxWithholdGroupHeading::lookupTaxComponentGroup_IN(_formControl, TaxWithholdCodeType_IN::TCS);
            }

        }

        [DataField]
        class TDSGroup_IN 
        {
            public void modified()
            {
                super();
                element.setTaxWithholdEnabled_IN();
            }

            public void lookup(FormControl _formControl, str _filterStr)
            {
                TaxWithholdGroupHeading::lookupTaxComponentGroup_IN(_formControl, TaxWithholdCodeType_IN::TDS);
            }

        }

    }

    [DataSource]
    class PurchTable_RU
    {
        public void init()
        {
            if (isPurchTableEnabled_RU)
            {
                this.linkType(FormLinkType::OuterJoin);
            }
            super();
        }

        [DataField]
        class AgreementHeaderExt_RU 
        {
            public void modified()
            {
                super();

                // force a refresh because the agreement document title is indirectly related on a different datasource
                purchTable_DS.cacheCalculateMethod(tableMethodStr(PurchTable_RU, agreementDocumentTitle_RU));
                purchTable_DS.refresh();
            }

            public Common lookupReference(FormReferenceControl _formReferenceControl)
            {
                Common ret;

                ret = PurchAgreementHeaderExt_RU::purchAgreementReferenceLookup(_formReferenceControl,
                    purchTable.OrderAccount,
                    purchTable.AccountingDate,
                    purchTable.InvoiceAccount);

                return ret;
            }

            public void jumpRef()
            {
                PurchAgreementHeaderExt_RU::purchAgreementJumpRef(purchTable_RU.AgreementHeaderExt_RU);
            }

        }

    }

    [DataSource]
    class TMSPurchTable
    {
        /// <summary>
        /// Determines whether the current record is valid and ready to be written to the database.
        /// </summary>
        /// <returns>
        /// true if the record is valid; otherwise, false.
        /// </returns>
        /// <remarks>
        /// Some purchase table records don't have a corresponding tms transportation table record
        /// so call super only if corresponding record exists
        /// </remarks>
        public boolean validateWrite()
        {
            boolean ret = true;

            if (tmsPurchTable.CarrierCode != "" && tmsPurchTable.CarrierServiceCode == "")
            {
                ret = checkFailed("@TRX733");
            }

            if (ret
            && tmsPurchTable.CarrierCode
            && tmsPurchTable.CarrierServiceCode
            && !TMSCarrierService::exist(tmsPurchTable.CarrierServiceCode, tmsPurchTable.CarrierCode))
            {
                ret = checkFailed("@TRX734");
            }

            if (ret && tmsPurchTable.RecId != 0)
            {
                ret = super();
            }

            return ret;
        }

        /// <summary>
        ///    Persists a record in the database when super is called.
        /// </summary>
        /// <remarks>
        /// Some purchase table records don't have a corresponding tms transportation table record
        /// so call write method and not super and it will update database properly
        /// </remarks>
        public void write()
        {
            if (!tmsPurchTable.RecId)
            {
                tmsPurchTable.initFromPurchTable(purchTable.PurchId);
            }

            tmsPurchTable.write();
        }

        public int active()
        {
            int ret;

            ret = super();

            element.enableTMSFields();

            return ret;
        }

        [DataField]
        class CarrierCode 
        {
            public void modified()
            {
                if (tmsPurchTable.RecId == 0)
                {
                    tmsPurchTable.initFromPurchTable(purchTable.PurchId);
                }

                super();

                tmsPurchTable.ModeCode  = TMSCarrier::find(tmsPurchTable.CarrierCode).ModeCode;

                if (!tmsPurchTable.CarrierCode
                || !TMSCarrierService::exist(tmsPurchTable.CarrierServiceCode, tmsPurchTable.CarrierCode))
                {
                    tmsPurchTable.CarrierServiceCode    = "";
                }

                tmsPurchTable_ds.refresh();

                element.tmsUpdatePurchTable();

                element.enableTMSFields();
            }

        }

        [DataField]
        class CarrierServiceCode 
        {
            public void modified()
            {
                if (tmsPurchTable.RecId == 0)
                {
                    tmsPurchTable.initFromPurchTable(purchTable.PurchId);
                }

                super();

                element.tmsUpdatePurchTable();

                element.enableTMSFields();
            }

        }

        [DataField]
        class ModeCode 
        {
            public void modified()
            {
                if (tmsPurchTable.RecId == 0)
                {
                    tmsPurchTable.initFromPurchTable(purchTable.PurchId);
                }

                super();

                element.enableTMSFields();
            }

        }

    }

    [DataSource]
    class PurchRFQReplyLinePurchLine
    {
        public boolean validateWrite()
        {
            return true;
        }

        public void write()
        {
            // Commented out call to Super() to avoid unintentional insert of new record
            // or updating an existing record ( Kernel behavior caused by Outerjoin to PurchLine)

            //super();
        }

    }

    [DataSource]
    class WHSPurchLine
    {
        public boolean validateWrite()
        {
            boolean ret;

            if (whsPurchLine.RecId)
            {
                ret = super();
            }
            else
            {
                ret = true;
            }

            return ret;
        }

        public void write()
        {
            if (whsPurchLine.RecId)
            {
                super();
            }
        }

    }

    [DataSource]
    class InventDistinctProductExpanded
    {
        public void init()
        {
            super();

            showDisplayProductNumber = InventDistinctProductExpanded::prepareInventDistinctProductDatasource(InventDistinctProductExpanded_DisplayProductNumber,
                                                                                  this.queryBuildDataSource(),
                                                                                  PurchLine_DS.name(),
                                                                                  fieldNum(PurchLine, ItemId),
                                                                                  InventDim_DS.name());
        }

    }

    [DataSource]
    class ProjTmpPurchListTable
    {
        /// <summary>
        /// Initialize the datasource temp table ProjTmpPurchListTable, when loading purchase order list from projects / contracts / estimate projects; otherwise disable the datasource.
        /// </summary>
        public void init()
        {
            xArgs                       args = element.args();
            boolean                     enableProjectFilter = false;    // Indicates whether we need to filter purchase orders by joining ProjTmpPurchListTable
            
            super();

            if (args && args.dataset())
            {
                ProjTable                   projTableLink;
                ProjTable                   projTableLinkQuery;
                ProjInvoiceTable            projInvoiceTableLink;
                ProjWIPTable                projWIPTableLink;
                PurchTable                  purchTableLink;
                PurchLine                   purchLineLink;
                QueryBuildDataSource        purchTableDS;
                QueryBuildDataSource        projTmpPurchListTableDS;
                QueryBuildRange             projIdPurchTable;
                                
                switch (args.dataset())
                {
                    case tableNum(ProjTable):
                        // Initialize QueryBuildDataSource as table PurchTable.
                        purchTableDS = purchTable_ds.query().dataSourceTable(tableNum(PurchTable));
                        
                        // Clear any range on field ProjId of table PurchTable
                        projIdPurchTable    = purchTableDS.findRange(fieldNum(PurchTable,ProjId));
                        while (projIdPurchTable)
                        {
                            purchTableDS.clearRange(fieldNum(PurchTable,ProjId));
                            projIdPurchTable  = purchTableDS.findRange(fieldNum(PurchTable,ProjId));
                        }

                        projTableLink = args.record();
                        enableProjectFilter = true;
                        
                        ProjTmpPurchListTable.linkPhysicalTableInstance(projTmpPurchList);
                        
                        // Find all records in PurchLine that matches the Project Id.
                        insert_recordset projTmpPurchList (ProjId, PurchId)
                            select ProjId, PurchId from purchLineLink group by ProjId, PurchId
                            where purchLineLink.ProjId  == projTableLink.ProjId && !purchLineLink.IsDeleted;

                        // Find all records in PurchLine that matches the sub-projects of the Project Id.
                        insert_recordset projTmpPurchList (ProjId, PurchId)
                            select ParentId from projTableLinkQuery
                            where projTableLinkQuery.ParentId == projTableLink.ProjId
                            join PurchId from purchLineLink group by projTableLinkQuery.ParentId, purchLineLink.PurchId
                            where purchLineLink.ProjId == projTableLinkQuery.ProjId && !purchLineLink.IsDeleted;

                        // filter by ProjId of ProjTable
                        projTmpPurchListTableDS = purchTable_ds.query().dataSourceTable(tableNum(ProjTmpPurchListTable));
                        projTmpPurchListTableDS.relations(true);
                        projTmpPurchListTableDS.joinMode(JoinMode::ExistsJoin);
                        projTmpPurchListTableDS.addRange(fieldNum(ProjTmpPurchListTable, ProjId)).value(projTableLink.ProjId);
                        
                        // Clear the dynalinks to remove the dynalink range by Project Id in PurchTable.
                        select firstonly RecId from projTmpPurchList where projTmpPurchList.ProjId == projTableLink.ProjId;

                        if (projTmpPurchList.RecId)
                        {
                            purchTableDS.clearDynalinks();
                        }
                        else
                        {
                            enableProjectFilter = false;
                        }

                        break;
                
                    case tableNum(ProjInvoiceTable):
                        // Initialize QueryBuildDataSource as table PurchTable.
                        purchTableDS = purchTable_ds.query().dataSourceTable(tableNum(PurchTable));

                        // Clear any range on field ProjId of table PurchTable
                        projIdPurchTable    = purchTableDS.findRange(fieldNum(PurchTable,ProjId));
                        while (projIdPurchTable)
                        {
                            purchTableDS.clearRange(fieldNum(PurchTable,ProjId));
                            projIdPurchTable  = purchTableDS.findRange(fieldNum(PurchTable,ProjId));
                        }

                        projInvoiceTableLink = args.record();
                        enableProjectFilter = true;

                        ProjTmpPurchListTable.linkPhysicalTableInstance(projTmpPurchList);

                        // Find all records in PurchLine that matches the Project Ids related to a Project Contract.
                        insert_recordset projTmpPurchList (ProjInvoiceProjId, PurchId)
                            select ProjInvoiceProjId from projTableLink
                            where projTableLink.ProjInvoiceProjId == projInvoiceTableLink.ProjInvoiceProjId
                            join PurchId from purchLineLink
                            where purchLineLink.ProjId == projTableLink.ProjId && !purchLineLink.IsDeleted;

                        // If no matching records found in PurchLine, look for records in PurchTable.
                        select firstonly RecId from projTmpPurchList where projTmpPurchList.ProjInvoiceProjId == projInvoiceTableLink.ProjInvoiceProjId;

                        if (!projTmpPurchList.RecId)
                        {
                            insert_recordset projTmpPurchList (ProjInvoiceProjId, PurchId)
                                select ProjInvoiceProjId from projTableLink
                                where projTableLink.ProjInvoiceProjId == projInvoiceTableLink.ProjInvoiceProjId
                                join PurchId from purchTableLink
                                where purchTableLink.ProjId == projTableLink.ProjId;
                        }

                        // filter by ProjInvoiceProjId of ProjInvoiceTable
                        projTmpPurchListTableDS = purchTable_ds.query().dataSourceTable(tableNum(ProjTmpPurchListTable));
                        projTmpPurchListTableDS.relations(true);
                        projTmpPurchListTableDS.joinMode(JoinMode::ExistsJoin);
                        projTmpPurchListTableDS.addRange(fieldNum(ProjTmpPurchListTable, ProjInvoiceProjId)).value(projInvoiceTableLink.ProjInvoiceProjId);

                        break;
                
                    case tableNum(ProjWIPTable):
                        // Initialize QueryBuildDataSource as table PurchTable.
                        purchTableDS = purchTable_ds.query().dataSourceTable(tableNum(PurchTable));

                        // Clear any range on field ProjId of table PurchTable
                        projIdPurchTable    = purchTableDS.findRange(fieldNum(PurchTable,ProjId));
                        while (projIdPurchTable)
                        {
                            purchTableDS.clearRange(fieldNum(PurchTable,ProjId));
                            projIdPurchTable  = purchTableDS.findRange(fieldNum(PurchTable,ProjId));
                        }

                        projWIPTableLink = args.record();
                        enableProjectFilter = true;

                        ProjTmpPurchListTable.linkPhysicalTableInstance(projTmpPurchList);

                        // Find all records in PurchLine that matches the Project Ids related to an estimate project.
                        insert_recordset projTmpPurchList (ProjWipId, PurchId)
                            select WIPProject from projTableLink
                            where projTableLink.WIPProject == projWIPTableLink.ProjId
                            join PurchId from purchLineLink
                            where purchLineLink.ProjId == projTableLink.ProjId && !purchLineLink.IsDeleted;
                        
                        // If no matching records foung in PurchLine, look for records in PurchTable.
                        select firstonly RecId from projTmpPurchList where projTmpPurchList.ProjWipId == projWIPTableLink.ProjId;

                        if (!projTmpPurchList.RecId)
                        {
                            insert_recordset projTmpPurchList (ProjWipId, PurchId)
                                select WIPProject from projTableLink
                                where projTableLink.WIPProject  == projWIPTableLink.ProjId
                                join PurchId from purchTableLink
                                where purchTableLink.ProjId == projTableLink.ProjId;
                        }

                        // filter by ProjId of ProjWIPTable
                        projTmpPurchListTableDS = purchTable_ds.query().dataSourceTable(tableNum(ProjTmpPurchListTable));
                        projTmpPurchListTableDS.relations(true);
                        projTmpPurchListTableDS.joinMode(JoinMode::ExistsJoin);
                        projTmpPurchListTableDS.addRange(fieldNum(ProjTmpPurchListTable, ProjWipId)).value(projWIPTableLink.ProjId);
                        
                        break;
                }
            }

            if (!enableProjectFilter)
            {
                purchTable_ds.query().dataSourceTable(tableNum(ProjTmpPurchListTable)).enabled(false);
            }
        }

    }

    [Control("MenuFunctionButton")]
    class buttonRequestChange
    {
        public void clicked()
        {
            // If a new change could possibly affect next year budget and this PO is budget tracked before
            // requst change is denied by throwing error.
            if (BudgetControlPurchaseOrderSettingsValidator::canUpdatedAccountingDateAffectNextYearBudgetSource(purchTable.AccountingDate, purchTable.DataAreaId)
                && BudgetSourceCollectionIntegrator::isDocumentBudgetTracked(purchTable))
            {
                throw error("@Budget:NotAllowRequestChangeOnPODueToPeriodOnHold");
            }

            super();

            purchTable_ds.allowEdit(true);
            purchTable_ds.selectionChanged();
            purchLine_ds.research();

            if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
            {
                retailAddItemMenuItem.enabled(purchTable.editAllowed(true) && !purchTable.MCRDropShipment);
            }
        }

    }

    [Control("MenuFunctionButton")]
    class Totals
    {
        void  clicked()
        {
            element.automaticTotalDiscount();

            if (purchTable.checkMarkupTrans())
            {
                super();
            }

            // Refresh the Totals Fact Box
            element.refreshFormPart(formstr(PurchTotalsSummaryPart));

            if (isTaxIntegrationEnabledForPurchase)
            {
                PurchTable_ds.reread();
                PurchTable_ds.reReadLines();
            }
        }

    }

    [Control("MenuFunctionButton")]
    class TaxTransSource
    {
        void  clicked()
        {
            element.automaticTotalDiscount();

            if (!tmpPurchTableTaxTransForm || (tmpPurchTableTaxTransForm && tmpPurchTableTaxTransForm.closed()))
            {
                tmpPurchTableTaxTransForm = PurchTotals::showTax(menuitemDisplayStr(TaxTmpWorkPurchOrder), purchTable, element);

                if (isTaxIntegrationEnabledForPurchase)
                {
                    PurchTable_ds.reread();
                    PurchTable_ds.reReadLines();
                }
            }
        }

    }

    [Control("MenuFunctionButton")]
    class TaxDocumentLauncher
    {
        public void clicked()
        {
            this.parameters(classStr(TaxableDocumentDescriptorPurchaseOrder));
            super();
        }

    }

    [Control("Button")]
    class MultiLineDiscAction
    {
        void  clicked()
        {
            super();

            element.multiLineDiscount();
        }

    }

    [Control("Button")]
    class EndDiscAction
    {
        public void  clicked()
        {
            super();

            element.endDiscount();
        }

    }

    [Control("MenuFunctionButton")]
    class SuppItemCalc_PurchHeader
    {
        void clicked()
        {
            element.automaticTotalDiscount();

            super();
        }

    }

    [Control("Button")]
    class TieredCharges
    {
        public void  clicked()
        {
            super();

            if(PurchAutoChargesFromAndToAmountFeatureVisibilityManager::isPurchAutoChargesFromAndToAmountFeatureAndConfigKeyEnabled())
            {
                purchTable.calculateTieredCharges();
            }

            else
            {
                info("The Configuration key 'Markup' or the'Purchase Auto Charges for FROM and TO Amounts' Feature is currently disabled.");
            }
        }

    }

    [Control("MenuFunctionButton")]
    class PrepayPurchTableHeading
    {
        public void clicked()
        {
            boolean isProjectVendorPrepaymentCreated = purchTable.checkIfPrePaymentVendorInvoiceCreate();
            if (isProjectVendorPrepaymentCreated)
            {
                super();
            }
        }

    }

    [Control("MenuFunctionButton")]
    class buttonUpdatePurchaseOrder
    {
        void clicked()
        {
            super();

            purchTable_ds.updateBudgetCheckResultDisplay();
        }

    }

    [Control("MenuFunctionButton")]
    class buttonConfirm
    {
        void clicked()
        {
            PurchTable      purchTableSelection;
            Common          firstDatasourceCursor;
            boolean         tax1099SFieldsOK = true;
            int             originalPosition;

            if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
            {
                originalPosition = purchTable_DS.getPosition();
                firstDatasourceCursor = purchTable_ds.getFirst(true);

                for (purchTableSelection = (firstDatasourceCursor ? firstDatasourceCursor : purchTable_ds.cursor()) ; purchTableSelection && tax1099SFieldsOK == true ; purchTableSelection = purchTable_ds.getNext())
                {
                    tax1099SFieldsOK = Tax1099BoxDetail::checkTax1099Fields(purchTableSelection.PurchId);
                }

                purchTable_DS.setPosition(originalPosition);

                if (tax1099SFieldsOK)
                {
                    super();
                }

                purchTable_ds.updateBudgetCheckResultDisplay();
            }
            else
            {
                try
                {
                    super();

                    purchTable_ds.updateBudgetCheckResultDisplay();

                    purchTableForm.parmIsHeaderVersioned(true);
                }
                catch
                {
                    purchTable_ds.updateBudgetCheckResultDisplay();
                }
            }
        }

    }

    [Control("MenuFunctionButton")]
    class buttonSubLedgerJournalLines
    {
        void clicked()
        {
            buttonSubLedgerJournalLines.dataSource(purchTable_ds.id());
            super();
        }

    }

    [Control("MenuFunctionButton")]
    class buttonBindingConfirmationRequest
    {
        public void clicked()
        {
            if (!element.checkSelectedPurchaseOrdersAreAllVendorCollaboration())
            {
                throw error("@SCM:PurchaseOrderNotEnableVendorCollaboration");
            }

            super();
        }

    }

    [Control("MenuFunctionButton")]
    class LineAmounts_PSN
    {
        void clicked()
        {
            SourceDocumentProcessorCaller processorCaller = null;

            if (purchTable.RecId > 0 && purchTable.DocumentState < VersioningDocumentState::Confirmed && !AccountingDistribution::existEventAndSourceDocumentLine(AccountingEvent::findBySourceDocumentHeader(purchTable.SourceDocumentHeader).RecId, purchTable.SourceDocumentLine))
            {
                purchTable.checkFullyDistributedAndQualified(processorCaller);
            }

            super();
        }

    }

    [Control("Button")]
    class BudgetControl
    {
        void clicked()
        {
            if (purchTable)
            {
                PurchTotals::newPurchTable(purchTable).calc();

                if (PublicSectorUtils::isBudgetReservationEnabled())
                {
                    // Perform document balance check against a referenced general budget reservation document if any.
                    PurchTable::checkBudgetReservationBalance_PSN(purchTable.PurchId, purchTable.SourceDocumentHeader);
                }
 
                // Submit to source document processor for an on-demand GL budget check
                SourceDocumentProcessorFacade::submitOnDemandSourceDocumentImpl(purchTable);

                purchTable_ds.updateBudgetCheckResultDisplay();
            }
        }

    }

    [Control("Button")]
    class ButtonInterCompanySalesTable
    {
        void  clicked()
        {
            super();

            element.formRefOnIntercompanySalesTable();
        }

    }

    [Control("MenuFunctionButton")]
    class ButtonOriginalSalesTable
    {
        void clicked()
        {
            TradeInterCompany::construct(purchTable).referenceForm();
        }

    }

    [Control("Button")]
    class ButtonInterCompanyCustPackingSlipJournal
    {
        void  clicked()
        {
            super();

            TradeInterCompany::construct(purchTable).formRun(formStr(CustPackingSlipJournal),element);
        }

    }

    [Control("Button")]
    class ButtonInterCompanyCustInvoiceJournal
    {
        void  clicked()
        {
            super();

            TradeInterCompany::construct(purchTable).menuFunction(menuItemDisplayStr(CustInvoiceJournal), MenuItemType::Display, element);
        }

    }

    [Control("Button")]
    class buttonInterCompanySalesFormLetter_Pickinglist
    {
        void  clicked()
        {
            if (!purchTable.RecId && !purchTable.InterCompanySalesId)
            {
                throw(error("@SYS28047"));
            }

            TradeInterCompany::construct(purchTable).menuFunction(classStr(SalesFormLetter_PickingList),MenuItemType::Action,element);
        }

    }

    [Control("MenuFunctionButton")]
    class buttonUpdatePrepayInvoice
    {
        public void clicked()
        {
            boolean isProjectVendorPrepaymentCreated = purchTable.checkIfPrePaymentVendorInvoiceCreate();
            if (isProjectVendorPrepaymentCreated)
            {
                super();
            }
        }

    }

    [Control("MenuFunctionButton")]
    class buttonPaymentSchedule
    {
        void clicked()
        {
            CustVendPaymSched   custVendPaymSched;

            element.automaticTotalDiscount();

            if (purchTable.PaymentSched && !VendPaymSched::exist(purchTable.TableId,purchTable.RecId))
            {
                custVendPaymSched = CustVendPaymSched::construct(SysModule::Vend,purchTable);
                custVendPaymSched.copyPaymSched(PaymSched::find(purchTable.PaymentSched));
                purchTable.createPaymentSched();
            }
            super();
        }

    }

    [Control("MenuFunctionButton")]
    class Cov
    {
        public void clicked()
        {
            element.automaticTotalDiscount();

            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
            {
                if (purchTable.checkMarkupTrans())
                {
                    this.updateLedgerCov();
                    super();
                }
            }
            else
            {
                this.updateLedgerCov();
                super();
            }
        }

        public void updateLedgerCov()
        {
            if (purchTable.CovStatus == 0)
            {
                ttsbegin;
                purchTable.updateLedgerCov(LedgerCoverage::construct(purchTable));
                ttscommit;
            }
        }

    }

    [Control("MenuFunctionButton")]
    class VendOpenTrans
    {
        void clicked()
        {
            if (TaxWithholdParameters_IN::checkTaxParameters())
            {
                TaxWithholdUncommitted_IN::deleteForDocumentHeader(purchTable.TableId, purchTable.RecId);
            }
            super();
        }

    }

    [Control("MenuFunctionButton")]
    class TradeBLWIChangeCode
    {
        void clicked()
        {
            if (! purchTable.RecId)
            {
                purchTable.write();
            }

            super();
        }

    }

    [Control("Button")]
    class PrintMgmt
    {
        void clicked()
        {
            if (purchTable_ds.cursor() == null)
            {
                return;
            }

            super();

            element.PrintManagement();
        }

    }

    [Control("MenuFunctionButton")]
    class PdsApprovedVendorListByVend
    {
        void clicked()
        {
            VendTable       vendTable;
            Args            args = new Args();
            MenuFunction    menuFunction = new MenuFunction(
                menuitemDisplayStr(PdsInventInquiryApprovedVendorListByVend),
                MenuItemType::Display);

            vendTable = purchTable.vendTable_OrderAccount();
            if (vendTable)
            {
                args.caller(this);
                args.record(vendTable);
                menuFunction.run(args);
            }
        }

    }

    [Control("Button")]
    class PrintMgmtSMB
    {
        void clicked()
        {
            if (purchTable_ds.cursor() == null)
            {
                return;
            }

            super();

            element.PrintManagement();
        }

    }

    [Control("Tab")]
    class MainTab
    {
        public void tabChanged(int _fromTab, int _toTab)
        {
            super(_fromTab, _toTab);
            element.showHeaderLogisticsPostalEffectiveAddressMessage();
        }

    }

    [Control("String")]
    class editContactPersonNameLineView
    {
        public void jumpRef()
        {
            purchTable_ContactPersonId.jumpRef();
        }

        void lookup()
        {
            ContactPerson::lookupVendContactPerson(purchTable_ContactPersonId,
                                                   purchTable.OrderAccount,
                                                   this,
                                                   purchTable.ContactPersonId);
        }

    }

    [Control("MenuButton")]
    class LineStripPurchLine
    {
        void clicked()
        {
            if (TaxParameters::isCustomsEnable_IN())
            {
                purchTableForm.enableEximInquiry_IN(purchLine.PurchQty,
                                                    purchTable_W.CustomsImportOrder_IN,
                                                    eximAA_IN,
                                                    eximDFIA_IN,
                                                    eximDEPB_IN,
                                                    eximEPCG_IN);
            }
            super();
        }

    }

    [Control("MenuFunctionButton")]
    class buttonDeliverySchedule
    {
        void clicked()
        {
            if (element.allowCreateDeliverySchedule())
            {
                if (PurchTableForm::openDeliveryScheduleForm(this, purchLine).closedOk())
                {
                    purchLine_ds.research(true);
                    purchTable_ds.reread();
                    purchTable_ds.refresh();
                }
            }
        }

    }

    [Control("MenuFunctionButton")]
    class SuppItemCalc_Purch
    {
        void clicked()
        {
            element.automaticTotalDiscount();

            super();
        }

    }

    [Control("MenuButton")]
    class LineStripPurchLineSMB
    {
        void clicked()
        {
            if (TaxParameters::isCustomsEnable_IN())
            {
                purchTableForm.enableEximInquiry_IN(purchLine.PurchQty,
                                                    purchTable_W.CustomsImportOrder_IN,
                                                    eximAA_IN,
                                                    eximDFIA_IN,
                                                    eximDEPB_IN,
                                                    eximEPCG_IN);
            }
            super();
        }

    }

    [Control("MenuButton")]
    class LineStripFinancials
    {
        public void clicked()
        {
            super();

            purchTableForm.enableLineCreditInvoiceButton(purchLine, buttonCustVendCreditInvoicingLines);

            if (Project::Enabled())
            {
                if (purchLine.IsPwp)
                {
                    buttonSubledgerdistribution.enabled(false);
                }
                else
                {
                    buttonSubledgerdistribution.enabled(true);
                }
            }
        }

    }

    [Control("MenuFunctionButton")]
    class ButtonSubledgerdistribution
    {
        void clicked()
        {
            // Ensure there is a record existing with an amount to distribute
            if (!purchLine.SourceDocumentLine)
            {
                info("@SYS311174");
            }
            else
            {
                super();
            }
        }

    }

    [Control("Button")]
    class BudgetControlLine
    {
        void clicked()
        {
            element.budgetControlLine();
        }

    }

    [Control("MenuFunctionButton")]
    class MarkupTrans_LinePurchTable
    {
        public void clicked()
        {
            if (purchTableForm.editLineAllowedIfBudgetResReferenced(purchLine))
            {
                super();
            }
            else
            {
                //
                // Will display maintain charge in view mode
                // when purchase order line with GBR reference is not editable.
                //
                PurchLine purchLineLocal = PurchLine::find(purchLine.PurchID);
                Args args = new Args();

                args.caller(element);
                args.record(purchLineLocal);
                args.openMode(OpenMode::View);
                new MenuFunction(menuitemDisplayStr(MarkupTrans_LinePurchTable), MenuItemType::Display).run(args);
            }
        }

    }

    [Control("MenuFunctionButton")]
    class LineTaxTransSource
    {
        void  clicked()
        {
            element.lineTaxTransSource();
            if (isTaxIntegrationEnabledForPurchase)
            {
                PurchLine_ds.reread();
            }
        }

    }

    [Control("MenuButton")]
    class LineStripFinancialsSMB
    {
        public void clicked()
        {
            super();

            purchTableForm.enableLineCreditInvoiceButton(purchLine, buttonCustVendCreditInvoicingLines);

            if (Project::Enabled())
            {
                if (purchLine.IsPwp)
                {
                    buttonSubledgerdistribution.enabled(false);
                }
                else
                {
                    buttonSubledgerdistribution.enabled(true);
                }
            }
        }

    }

    [Control("MenuFunctionButton")]
    class LineTaxTransSourceSMB
    {
        void  clicked()
        {
            element.lineTaxTransSource();
        }

    }

    [Control("MenuFunctionButton")]
    class InventMarking
    {
        void clicked()
        {
            super();
            purchTableForm.setAllowEditAssetFields(purchTable, purchLine, purchLine_ds);
        }

    }

    [Control("Button")]
    class ButtonInterCompanyInventTrans
    {
        void  clicked()
        {
            super();

            PurchTableForm::openIterCompanyInventTransForm(purchLine);
        }

    }

    [Control("Button")]
    class ButtonInterCompanyInventOnHandReserve
    {
        void  clicked()
        {
            super();

            PurchTableForm::interCompanyInventOnHandReserve(purchLine);
        }

    }

    [Control("Button")]
    class PCExecute
    {
        void clicked()
        {
            element.pcConfigureLine();
        }

    }

    [Control("MenuFunctionButton")]
    class RenumberLineNumber
    {
        void clicked()
        {
            super();
            purchLine_ds.research(true);
        }

    }

    [Control("Button")]
    class CreateLink
    {
        void clicked()
        {
            super();
            element.createAgreementLink();
        }

    }

    [Control("Button")]
    class RemoveLink
    {
        void clicked()
        {
            super();

            element.removeAgreementLink();
        }

    }

    [Control("MenuFunctionButton")]
    class ButtonWithholdTax_IN
    {
        void  clicked()
        {
            if (!tmpPurchTableTaxWithholdTransForm || (tmpPurchTableTaxWithholdTransForm && tmpPurchTableTaxWithholdTransForm.closed()))
            {
                tmpPurchTableTaxWithholdTransForm = PurchTotals::showWithholdTaxLine_IN(purchTable,purchLine);
            }
        }

    }

    [Control("Image")]
    class lineDeliveryType
    {
        public str toolTip()
        {
            DictEnum    dictEnum = new DictEnum(enumNum(LineDeliveryType));

            return dictEnum.label() + ': ' + dictEnum.value2Name(purchLine.LineDeliveryType);
        }

    }

    [Control("String")]
    class PurchLine_ItemId
    {
        public str resolveAmbiguousReference()
        {
            return FormControlAmbiguousReferenceResolver::resolveAmbiguousReferenceForControl(
                this,
                true,
                AbsoluteFieldBinding::construct(fieldStr(InventTable, ItemId), tableStr(InventTable)),
                AbsoluteFieldBinding::construct(fieldStr(InventTable, NameAlias), tableStr(InventTable)));
        }

    }

    [Control("CheckBox")]
    class PurchLine_IsPwp
    {
        public boolean modified()
        {
            boolean ret;

            ret = super();

            if (Project::Enabled())
            {
                if (purchLine.IsPwp)
                {
                    buttonSourceDocumentDistributionHeader.enabled(false);
                }
                else
                {
                    buttonSourceDocumentDistributionHeader.enabled(true);
                }
            }
            return ret;
        }

    }

    [Control("String")]
    class PurchLine_W_RefInvoiceId_MY
    {
        public void lookup()
        {
            element.performVendInvoiceJourLookup_MY(
                this,
                purchTable.OrderAccount);
        }

        public boolean modified()
        {
            boolean ret;

            ret = super();

            if (ret)
            {
                if (this.text())
                {
                    element.updateSourceRefControlsAfterLookup_MY();
                }
            }

            return ret;
        }

    }

    [Control("ReferenceGroup")]
    class PurchLine_BudgetReservationLine_PSN
    {
        public void lookup()
        {
            BudgetReservation_PSN::showBudgetReservationLookup(purchLine, this.formRun(), this);
        }

    }

    [Control("MenuFunctionButton")]
    class BudgetReservationLineSelection
    {
        public void clicked()
        {
            BudgetReservationLineRecId_PSN budgetReservationLineRecId;
            BudgetReservationLineSelectorContract_PSN budgetResLineSelectorContract;

            budgetResLineSelectorContract = BudgetReservationLineSelectorContract_PSN::newFromParameters(
                BudgetReservationRelievingDocument_PSN::PurchaseOrder,
                purchLine.purchTable().AccountingDate);

            budgetResLineSelectorContract.parmDoShowEditableSelectorForm(PurchTableForm.canBudgetReservationLineBeEdited_PSN(purchLine_ds));

            BudgetReservationLineSelectorForm_PSN::showBudgetResLineSelector(
                budgetResLineSelectorContract,
                purchLine,
                element);

            budgetReservationLineRecId = budgetResLineSelectorContract.getSingleBudgetReservationLineRecId();

            if (budgetReservationLineRecId)
            {
                purchLine.BudgetReservationLine_PSN = budgetReservationLineRecId;

                if (purchLine.validateField(fieldNum(PurchLine, BudgetReservationLine_PSN)))
                {
                    purchLine.modifiedField(fieldNum(PurchLine, BudgetReservationLine_PSN));

                    purchLine_ds.refresh();
                    
                    purchTableForm.setAllowEditProjectFields(purchLine, purchLine_ds);
                    purchLine_ds.updateDesignForProject();
                    element.enableProjSalesPrice();
                }
                else
                {
                    purchLine.BudgetReservationLine_PSN = purchLine.orig().BudgetReservationLine_PSN;
                }
            }
        }

    }

    [Control("String")]
    class ProjectIdentification_ProjId
    {
        public boolean modified()
        {
            boolean ret;
            RecId   projRecId, smmActivityParentLink;
            str     currentActivityNumber;

            ret = super();

            if (Project::Enabled())
            {
                if (ProjTable::setFieldPwpThresholdPercent(ProjTable::find(purchLine.ProjId)))
                {
                    purchLine_IsPwp.visible(true);
                    psaPwpPercent.visible(true);
                }
                else
                {
                    purchLine_IsPwp.visible(false);
                    psaPwpPercent.visible(false);
                }
            }

            currentActivityNumber = projectIdentification_ActivityNumber.text();
            if (currentActivityNumber != '')
            {
                //validate activity is associated to Project
                projRecId = ProjTable::find(purchLine.ProjId).RecId;
                smmActivityParentLink = smmActivityParentLinkTable::findByActivityAndParent(currentActivityNumber, smmActivityParentType::Project, projRecId, tableNum(ProjTable)).RecId;

                // Clear activity number if it's no longer a valid
                // combination with the new project ID
                if (smmActivityParentLink == 0)
                {
                    purchLine.ActivityNumber = '';
                    projectIdentification_ActivityNumber.update();
                }
            }

            return ret;
        }

    }

    [Control("String")]
    class ProjectIdentification_ProjLinePropertyId
    {
        public boolean modified()
        {
            boolean ret;

            ret = super();
            if (Project::Enabled())
            {
                element.setIsPwpField();
            }

            return ret;
        }

    }

    [Control("TabPage")]
    class RBOItemPackage
    {
        /// <summary>
        /// Retail Item Package - Page Activated
        /// </summary>
        public void pageActivated()
        {
            if (treeView.value())
            {
                element.fillPackageTree();
            }

            super();
        }

    }

    [Control("CommandButton")]
    class ProductPackagesLineDelete
    {
        /// <summary>
        /// Product Packages Line - clicked
        /// </summary>
        public void clicked()
        {
            boolean ret = RetailPackagePurch.validateDelete();

            if (ret)
            {
                RetailPackagePurch.delete();
            }

            // Refresh page after lines deleted.
            PurchLine_ds.research();
        }

    }

    [Control("CheckBox")]
    class TreeView
    {
        /// <summary>
        /// Tree View - Clicked
        /// </summary>
        public void clicked()
        {
            super();

            if (this.value())
            {
                PackageGrid.visible(false);
                treeGroup.visible(true);
                element.fillPackageTree();
                ProductPackagesButtonGroup.visible(false);
            }
            else
            {
                treeGroup.visible(false);
                PackageGrid.visible(true);
                ProductPackagesButtonGroup.visible(true);
            }
        }

    }

    [Control("TabPage")]
    class TabLineFixedAsset
    {
        public void pageActivated()
        {
            super();

            element.setupAsset(purchLine);
        }

    }

    [Control("String")]
    class FixedAssets_AssetId
    {
        public void lookup()
        {
            AssetTable::lookupInvoiceAsset(this, curext());
        }

    }

    [Control("String")]
    class FixedAssets_AssetBookId
    {
        public void lookup()
        {
            if (fixedAssets_AssetId.valueStr())
            {
                AssetBook::lookupAssetBook(this, fixedAssets_AssetId.valueStr(), curext());
            }
        }

    }

    [Control("String")]
    class editAssetQualifier
    {
        public void lookup()
                {
                    AssetRuleTmpAssetQualifierLookup::lookupAssetQualifier(this, assetQualifierList);
                }

        public boolean modified()
                {
                    boolean ret;

                    ret = super();

                    purchLine.AssetGroup        = AssetRuleTmpAssetQualifierLookup::getAssetGroupFromQualifier(selectedAssetQualifier, assetQualifierList);
                    purchLine.DefaultDimension  = purchLine.copyDimension(purchLine.DefaultDimension);
                    purchLine.CreateFixedAsset  = NoYes::Yes;
                    purchLine_ds.refresh();

                    return ret;
                }

    }

    [Control("String")]
    class RAssetPurchTrans_assetId
    {
        public void lookup()
        {
            RAssetTable::lookupAccountNum(this, curext(), RAssetTransType::Acquisition);
       }

    }

    [Control("String")]
    class editContactPersonName
    {
        public void jumpRef()
        {
            purchTable_ContactPersonId.jumpRef();
        }

        void lookup()
        {
            ContactPerson::lookupVendContactPerson(purchTable_ContactPersonId,
                                                   purchTable.OrderAccount,
                                                   this,
                                                   purchTable.ContactPersonId);
        }

    }

    [Control("String")]
    class editReasonCode
    {
        /// <summary>
        /// Adds the 'Go to Main Table Form' option to the context menu for reason code field.
        /// </summary>
        public void jumpRef()
        {
            //Pass the account type of Vendor, so that the relevant form shows.
            ReasonTable::jumpRef(ReasonCodeAccountTypeAll::Vend, this.valueStr());
        }

        /// <summary>
        /// Constructs a lookup for the reason code field.
        /// </summary>
        /// <remarks>
        /// The lookup shows the appropriate reason codes (if any) given the offset and main account selections.
        /// </remarks>
        public void lookup()
        {
            //Calls the lookup method passing Vendor as both main and offset account types; boolean values of true
            //and false are passed for them respectively, since the offset account is not present in this journal.
            ReasonFormTable::reasonCodeLookup(this, LedgerJournalACType::Vend, LedgerJournalACType::Vend, true, false);
        }

        public boolean modified()
        {
            boolean ret;

            ret = super();

            // Update the cache for the ReasonComment value, which is changed during the call to super.
            purchTable_DS.cacheCalculateMethod(tableMethodStr(PurchTable,editReasonComment));

            return ret;
        }

        /// <summary>
        /// Validate existence of vendor type reason code in ReasonTable.
        /// </summary>
        /// <returns>
        /// A boolean indicating whether the reason code was valid for vendor type reason or not.
        /// </returns>
        public boolean validate()
        {
            boolean ret;

            ret = super();

            ret = ReasonTable::validateReasonCode(this.text(), LedgerJournalACType::Vend, true, LedgerJournalACType::Vend);

            if (ret &&
                BrazilParameters::isEnabled() &&
                purchTable_BR.InvoiceRefRecId_BR &&
                !strLRTrim(this.text()))
            {
                ret = checkFailed(strFmt("@SYS26332", fieldPName(ReasonTable, Reason)));
            }
            return ret;
        }

    }

    [Control("String")]
    class editReasonComment
    {
        public boolean validate()
        {
            boolean ret;

            ret = super();

            if (BrazilParameters::isEnabled() && purchTable_BR.InvoiceRefRecId_BR)
            {
                if (strLen(strLRTrim(this.text())) < 15)
                {
                    ret = checkFailed("@SYS4002144");
                }
            }

            return ret;
        }

    }

    [Control("String")]
    class GSTInvoice_MY_M_editInvoiceType_MY
    {
        public void lookup()
        {
            TaxGSTDocInvoiceType_MY::construct(tableNum(PurchTable_W)).lookup(this);
        }

        public boolean modified()
        {
            boolean ret;

            ret = super();

            if (ret)
            {
                element.updateDesignForGSTApprovalNumber_MY();
                purchTable_W_ds.refresh();
            }

            return ret;
        }

    }

    [Control("String")]
    class BillToAddressLookup
    {
        /// <summary>
        /// Populates Bill-to address lookup control
        /// </summary>
        public void lookup()
        {
            RecId recIdLE = CompanyInfo::current();
            Query query = new Query();

            SysTableLookup sysTableLookup = SysTableLookup::newParameters(tablenum(LogisticsPostalAddress), this, false);

            sysTableLookup.addLookupfield(fieldnum(LogisticsPostalAddress, Location));
            sysTableLookup.setLabel("@SYS335041");
            sysTableLookup.addLookupfield(fieldnum(LogisticsPostalAddress, Street));
            sysTableLookup.addLookupfield(fieldnum(LogisticsPostalAddress, City));
            sysTableLookup.addLookupfield(fieldnum(LogisticsPostalAddress, State));
            sysTableLookup.addLookupfield(fieldnum(LogisticsPostalAddress, ZipCode));

            QueryBuildDataSource qbdsRoot = query.addDataSource(tablenum(LogisticsPostalAddress));
            qbdsRoot = qbdsRoot.addDataSource(tableNum(DirPartyLocation));
            qbdsRoot.joinMode(JoinMode::ExistsJoin);
            qbdsRoot.relations(false);
            qbdsRoot.addLink(fieldNum(LogisticsPostalAddress, Location), fieldNum(DirPartyLocation, Location));
            qbdsRoot.addSortField(fieldNum(DirPartyLocation, IsPrimary), SortOrder::Descending);

            QueryBuildDataSource qbdsCompanyInfo = qbdsRoot.addDataSource(tableNum(OMInternalOrganization));
            qbdsCompanyInfo.joinMode(JoinMode::ExistsJoin);
            qbdsCompanyInfo.relations(false);
            qbdsCompanyInfo.addLink(fieldNum(DirPartyLocation, Party), fieldNum(OMInternalOrganization, RecId));

            QueryBuildDataSource qbdsPartyLocation = qbdsRoot.addDataSource(tableNum(DirPartyLocationRole));
            qbdsPartyLocation.joinMode(JoinMode::ExistsJoin);
            qbdsPartyLocation.relations(true);
        
            QueryBuildDataSource qbdsLocationRole = qbdsPartyLocation.addDataSource(tableNum(LogisticsLocationRole));
            qbdsLocationRole.joinMode(JoinMode::ExistsJoin);
            qbdsLocationRole.relations(true);
        
            QueryBuildRange qbrPrimayAddress = qbdsLocationRole.addRange(fieldnum(LogisticsLocationRole, DataAreaId));
            str condition = '(((OMInternalOrganization_1.%1 == %2) && (DirPartyLocation_1.%3 == %4)) || ((LogisticsLocationRole_1.%5 == %6) && (OMInternalOrganization_1.%7 == %8)) || ((LogisticsLocationRole_1.%9 == %10) && (OMInternalOrganization_1.%11 == %12)))';
            qbrPrimayAddress.value(strFmt(condition,
                fieldstr(OMInternalOrganization, RecId), queryValue(recIdLE),
                fieldstr(DirPartyLocation, IsPrimary), enum2int(NoYes::Yes),
                fieldstr(LogisticsLocationRole, Type), enum2int(LogisticsLocationRoleType::Invoice),
                fieldstr(OMInternalOrganization, OrganizationType), enum2int(OMInternalOrganizationType::OperatingUnit),
                fieldstr(LogisticsLocationRole, Type), enum2int(LogisticsLocationRoleType::Invoice),
                fieldstr(OMInternalOrganization, RecId), queryValue(recIdLE)));

            sysTableLookup.parmQuery(query);
            sysTableLookup.performFormLookup();
        }

    }

    [Control("String")]
    class TMSPurchTable_CarrierServiceCode
    {
        public void lookup()
        {
            TMSCarrierService::lookupCarrierServiceCode(this, tmsPurchTable.CarrierCode);
        }

    }

    [Control("String")]
    class TMSPurchTable_CarrierGroupCode
    {
        public boolean modified()
        {
            boolean ret;

            if (tmsPurchTable.RecId == 0)
            {
                tmsPurchTable.initFromPurchTable(purchTable.PurchId);
            }

            ret = super();

            element.enableTMSFields();

            return ret;
        }

    }

    [Control("String")]
    class TMSPurchTable_TransportationTemplateId
    {
        public boolean modified()
        {
            boolean ret;

            if (tmsPurchTable.RecId == 0)
            {
                tmsPurchTable.initFromPurchTable(purchTable.PurchId);
            }

            ret = super();

            element.enableTMSFields();

            return ret;
        }

    }

}